
# \LaTeX 과 PDF

LaTeX("라텍" 혹은 "레이텍"으로 읽음)을 간단히 정의하자면 **"논리적인 디자인"**이라고 할 수 있다. 작품이 생성되는 과정에서는 작가가 원고를 수기로 작성하거나 타자기로 입력한 뒤 이를 출판사에 제출한다. 그 후, 출판사의 편집 디자이너는 원고를 검토하여 세부적인 출력 형식을 결정하고 이를 인쇄소에 전달한다. 인쇄소에서는 이 정보를 바탕으로 과거에는 식자공이 식자판을 제작했으나, 현재는 컴퓨터가 파일을 생성한다. @fig-latex-structure 에 문서 디자인과 문서 논리 구조에 대해 이해를 위해 도식화했다. 

미국 스탠포트 대학 크누스(Donald Knuth) 교수가 1978년에 만든 문서조판 프로그램을 TeX("텍"으로 읽음)이라고 하고, 레슬리 램포트(Leslie Lamport) 교수가 만든 TeX 매크로 팩키지를 라텍이라고 한다. 텍과 라텍의 탄생 역사를 살펴보면 문서 논리 구조와 디자인 분리가 갖는 문서 저작 장점을 잘 나타내고 있다. 저수준(low-level) 언어로, 사용자가 페이지 레이아웃이나 글꼴 설정 등을 직접 제어할 수 있지만, 복잡한 포맷을 만들기 위해 사용자가 직접 매크로를 작성해야 한다는 점에서 일반 저작자가 사용하기에는 한계도 분명히 존재했다.

라텍은 1980년대에 레슬리 램포트에 의해 개발되었고, 텍을 기반으로 개발된다. 텍 복잡성을 단순화하여 더 사용자 친화적인 인터페이스를 제공한다. 따라서, 문서 구조와 내용에 더 집중할 수 있도록 고수준(high-level) 언어를 제공하며, 다양한 템플릿과 패키지가 제공되어 사용자가 쉽게 복잡한 레이아웃과 기능을 구현할 수 있다. 라텍 문서는 내부적으로 텍 엔진을 사용하여 조판된다. [@Kim2017]

- 라텍: 편집 디자이너의 역할에 해당하는 작업을 수행
- 텍: 식자공의 역할에 해당하는 작업을 수행

![문서 디자인과 문서 논리 구조](images/document-logical-design.jpg){#fig-latex-structure}

라텍에서 적용하는 논리적 디자인의 가장 큰 이점은 글쓰기 능력의 향상에 있다. 라텍으로 글을 작성하면서 점차 라텍의 논리적 디자인 철학에 맞춰가게 되며, 이를 통해 글쓰기 실력이 개선된다.

컴퓨터를 이용한 전자조판의 주된 목적은 문서를 읽기 쉽게 구성하여 저자의 의도를 독자에게 명확하게 전달하는 것이다. 이를 위해선 문서의 디자인이 그 내용의 논리적 구조를 잘 반영해야 하며, 이를 달성하기 위해서는 디자이너가 문서의 논리적 구조를 충분히 이해해야 한다. 라텍 명령어 체계는 기본적으로 이러한 **문서의 논리적 구조를 명시**하는 데 중점을 둔다. 이렇게 설정된 명령어는 텍 엔진을 통해 조판되어 최종적으로 원하는 결과물을 생성한다.


라텍의 가장 큰 장점 중 하나는 확실히 자동화 기능이다. 수식, 참고문헌, 표, 그래프의 번호를 자동으로 관리해주며, 복잡한 문서 구조도 쉽게 다룰 수 있다. 특히, 국내외 학술지에 논문을 제출할 때에는 템플릿만 변경하면 고품질의 논문을 쉽게 생성할 수 있다. 반면, 워드 프로세서를 사용할 경우 이러한 작업은 수동으로 해야 하며, 이로 인해 시간을 낭비하게 되고 결과물이 덜 정교하게 나올 수 있다. 결과적으로, 라텍을 사용하면 글쓰기 본질에 더 집중할 수 있으며, 이를 통해 저자의 생각과 의견을 더욱 솔직하고 명확하게 독자에게 전달할 수 있다.


## 라텍 엔진  {#latex-engine}

라텍을 실제 문서 작성에 활용하기 위해서는 적절한 텍 배포판을 선택해야 한다. 
이에 대해 [KTUG 한국 TeX 사용자 그룹](http://www.ktug.org/)은 $ko.TeX$ Live를 추천하고 있으며, 그 이유는 다음과 같다. [@Lee2017]

- 라텍 엔진으로 `pdfLaTeX`, `XeLaTeX`, `LuaLaTeX` 세 가지가 있으나, `XeLaTeX`은 유니코드 텍 엔진으로 동아시아 언어(CJK)를 잘 지원하고, 트루타입 및 오픈타입 폰트를 자유롭게 선택할 수 있어 인기가 높다.
- 운영체제에 따라 차이는 있지만, 실제 문서 작업에 라텍을 안정적으로 설치하고 사용하기 위해서는 `TeX Live`가 `MikTeX`보다 안정성과 사용자 지원 측면에서 우수하다.
- 텍 소스파일과 PDF 파일 간의 탐색 기능은 TexStudio IDE를 활용하여 쉽게 이용할 수 있다.

과거에는 `latex+dvips+pspdf`를 사용한 전통적인 작업 흐름이 있었으며, 이 방식은 `pstricks`를 이용해 PDF 파일을 생성하는데 시간이 오래 걸리고, `eps` 파일만을 이미지로 사용할 수 있다는 한계가 있었다. 또 다른 방식인 `latex+dvipdfmx` 작업 흐름은 중간 단계로 `.dvi` 파일을 생성한 후 `dvipdfmx`를 이용해 PDF 파일을 만든다. 그러나 현재 가장 인기 있는 작업 흐름은 pdfLaTeX, XeLaTeX, LuaLaTeX를 활용한 방식으로, 이는 `.tex` 소스파일에서 바로 `.pdf` 파일을 생성할 수 있다는 장점이 있다.

논문 외의 문서를 작성할 경우에는 한 단계 더 나아가 `memoir` 또는 `oblivoir` 클래스를 활용하는 것이 효율적이다. 이 방법은 이미 검증된 문서 템플릿을 기반으로 빠르게 PDF 문서를 생성할 수 있는 방법이다.


![한글지원 라텍 엔진과 작업흐름](images/tex-engines.png)


## 라텍 구성요소 {#latex-knuth}

수학과 교수였던 도널드 크누스는 문서 조판 시스템을 개발하면서 수식 처리를 간편하게 할 수 있도록 하면서, 메타폰트(METAFONT)라는 글꼴 시스템도 개발하여 고품질 글자체를 구현할 수 있도록 했다. 이러한 기초 위에 레슬리 램포트는 텍을 더욱 사용하기 쉽게 만들기 위해 다양한 매크로를 라텍으로 묶어 공개했다. 그 결과 일반인도 라텍을 이용해 고품질의 문서를 쉽게 작성할 수 있게 되었다. 버클리 대학 마이클 스피백 교수는 수식을 간편하게 문서에 적용할 수 있도록 AMS-TeX라는 매크로를 개발하고, 이에 대한 설명을 "The Joy of TeX"이라는 책에서도 공개했다. [@spivak1990joy]

`pdftex`와 `e-TeX`이 결합하여 사실상 [표준 TeX](http://wiki.ktug.org/wiki/wiki.php/TeX)이 되었고, 이를 기반으로 [XeTeX](http://wiki.ktug.org/wiki/wiki.php/XeTeX)과 `LuaTeX`이 발전하고 있다. 
특히, 한글 폰트 처리에 있어서 XeTeX(지텍으로 읽음)이 널리 사용되고 있다.

라텍 동작 원리는 Salomon의 도식화에 영감을 받아 Kees van der Laan이 1994년에 정리한 논문에서 상세하게 설명되어 있다. [@van1994tex] 기본적으로 고품질의 전자 출판을 위해 글꼴과 텍이 필요하며, 이 두 요소가 결합하여 고품질의 출력물을 생성한다. 이러한 텍 엔진을 지원하는 다양한 패키지 중에서 `AMS-(La)TeX`, `LaTeX`, `manmac` 등이 주목을 받고 있다. 

문서의 다양한 구성 요소, 예를 들어 *목차*, *색인*, *참고문헌*, *그림과 표* 등은 모듈화되어 관리되며, 글꼴 및  구조적인 스타일과 관련된 부분도 별도로 관리되고 있다. [TeXWorks](https://www.tug.org/texworks/)와 같은 위지윅(WYSIWYG)을 지원하는 편집기는 구문 강조, 맞춤법 검사 등을 통해 고품질의 라텍 문서 작성을 지원하고 있다.

[^10]: [표준 \LaTeX](http://wiki.ktug.org/wiki/wiki.php/ModernLaTeX)


![편집기, 엔진, 글꼴을 중심으로 본 \LaTeX 내부](images/latex_under_the_hood.jpg)

라텍 문서 작성을 위해 기본적인 구성요소는 다음과 같다.

1.  **배포판:** 과거에는 다양한 배포판이 윈도우, 리눅스, 맥에서 사용되었지만, 현재는 [TeX Live](https://www.tug.org/texlive/)가 대표적인 LaTeX 작업 환경이다. [MikTeX](http://miktex.org/)도 있지만, 큰 차이는 없다.
  
2.  **글꼴:** 초기에는 글꼴로 폰트 메트릭(tfm)과 메타폰트(MetaFont)가 주로 사용되었으나, 현재는 트루타입과 오픈타입이 널리 쓰인다.
    - 폰트 선택은 밥처럼 기본적이면서도 안정적인 것이 좋다. 특별한 상황에서는 그에 맞는 폰트를 선택하는 것이 중요하다.
    - 일반적으로 Serif와 San Serif 폰트를 한 쌍으로 사용하는 것이 균형감이 있다. 예를 들어, 나눔고딕과 나눔명조, KoPub돋움과 KoPub바탕, 함초롬도움과 함초롬바탕 등이 있다.
    - 글자 크기는 10~12 포인트가 적절하며, 이는 장시간 동안의 읽기 피로를 줄이기 위함이다.

3.  **그래픽:** 텍/라텍 자체는 그래픽을 주요 영역으로 보지 않는다. 과거에는 `dvips`와 EPS 형식을 주로 사용했으나, 현재는 `.jpg`, `.png`, `.pdf` 등도 잘 처리한다.

4.  **문자와 입력:** 초기에는 ASCII 코드가 주를 이루었으나, 현재는 UTF-8을 권장하고 있다. 특히, `\usepackage[utf8x]{inputenc}`가 필요한 경우가 많다.

5.  **색인과 참고문헌:** `makeindex`와 `bibtex`는 색인과 참고문헌 처리의 표준이다. 그러나 유니코드 처리를 위해 `texindy`와 `biber`도 주목을 받고 있다.

6.  **수식:** 수학 표현과 관련해서는 미국 수학회가 발전시킨 **amsmath**가 표준이다.

7.  **출력:** 과거에는 `.dvi` 형식이 기본이었으나, 현재는 `.pdf`가 기본이다. 또한, 웹을 위한 다양한 `.html` 출력도 지원한다. 이에 따라, 웹이 책 형태의 문서보다 더 중요한 위치를 차지하게 될 것으로 예상된다.

```tex
% A flowchart of a TeX workflow
% Author: Stefan Kottwitz
% https://www.packtpub.com/hardware-and-creative/latex-cookbook
\documentclass[border=10pt]{standalone}
\begin{document}
\smartdiagram[flow diagram:horizontal]{Edit,
  \LaTeX, Bib\TeX/ biber, make\-index, \LaTeX}
\end{document}
```

라텍을 통한 PDF 파일 제작 과정은 몇 가지 주요 단계로 이루어진다. 
라텍 전용 TexStudio 같은 통합개발환경(IDE), RStudio 같은 데이터 과학 IDE, 
범용 소프트웨어 개발 VS코드 같은 IDE에서 텍스트 편집기를 열어 신규 라텍 파일을 생성하는데 
파일 확장자는 `.tex`이다. 파일 시작 부분에 `\documentclass` 명령어를 사용하여 문서의 종류와 옵션을 설정하는데, 학술 논문을 작성한다면 `article` 클래스를, 책을 작성한다면 `book` 클래스 등을 선택한다.

`\usepackage` 명령어를 사용하여 필요한 패키지를 불러와서 특별한 기능이나 스타일을 추가한다. 예를 들어, 수식을 표현하기 위해 `amsmath` 패키지를, 그림을 삽입하기 위해 `graphicx` 패키지 등이 사용된다.

문서의 본문은 `\begin{document}`와 `\end{document}` 사이에 작성되고, 영역 안에서 텍스트, 표, 그림, 수식 등을 자유롭게 배치할 수 있다. 본문 작성 중에 참고문헌 서지관리를 위해 `BibTeX` `texindy`, `biber`를 사용하고, 색인 생성을 위해 `makeindex`를 사용한다.

본문 작성이 완료되면, 라텍 컴파일러를 실행하여 `.tex` 파일을 PDF로 변환한다. 영어는 `pdflatex`, 한글은 `xelatex` 을 라텍 엔진으로 사용하고, 참고문헌과 색인이 포함된 경우 컴파일 과정이 수차례 이어진다.

![라텍 작업흐름](images/latex_workflow.jpg)



## 환경설정

PDF는 기술적, 학술적, 사업적으로 혁신적인 문서 양식이다. PDF가 개발된
것은 오랜 역사를 자랑하지만 아래한글, 워드퍼펙트, MS 워드, 리브레 워드
등에 가려 그 진가를 발휘하지 못했다. 하지만 이제 PDF는 문서 출판의
최고봉이라는데 이의를 제기하는 사람은 없을 것이다. PDF 를 통해 아도비(Adobe) 회사는 엄청난 성공을 이어나가고 있고, 과학기술
저작에도 필수적인 파일 형태라 PDF에 대한 기본소양은 인공지능 시대를 살고
있는 시민으로 누구나 갖춰야하는 소양이다.

## 라텍 환경설정

라텍 설치와 사용은 처음에는 다소 복잡하게 느껴질 수 있다. 일반적으로 라텍 배포판(예: TeX Live, MiKTeX)을 설치한 뒤, 텍스트 에디터(예: TeXShop, TeXworks)를 선택하여 작업환경을 구성한다. 설치가 완료되면, `.tex` 파일을 생성하고 라텍 명령을 통해 PDF를 컴파일한다. 

환경변수 설정, 패키지 관리, 글꼴 설정 등 세부적인 환경설정이 필요하다. 특히 한글 문서를 처리할 경우에는 `ko.TeX`나 `CTeX`와 같은 한글을 지원하는 패키지를 별도로 설치하고 한글 글꼴도 설정해야 한다. 


### 쿼토 설치

[Install Quarto](https://docs.posit.co/resources/install-quarto/)
웹사이트에 쿼토 설치 방법이 잘 설명되어 있다. 먼저 쉘에서 `curl`로 쿼토
설치파일을 다운로드 받는다. `gdebi-core`를 설치하고 다운로드 받은 쿼토
파일을 `gdebi` 명령어로 설치하고 나서 `quarto --version` 명령어로 설치된
쿼토 버전을 확인한다.

``` bash
$ sudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb
$ sudo apt-get install gdebi-core
$ sudo gdebi quarto-linux-amd64.deb
$ quarto --version
1.3.450
```

### 라텍 설치

`TinyTeX`은 `TeX Live`를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운
라텍 배포판으로 라텍 설치와 관련된 일반적인 불편함을 해결하기 위해
만들어졌고, 특히 "이휘 쉬에(Yihui Xie)"가 개발하여 R과 R 마크다운 통합이
잘 되어 있다.

다른 라텍 배포판들이 수 기가바이트(GB)의 크기를 갖지만, `TinyTeX`은 설치
크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는
사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, 라텍
문서를 컴파일할 때 누락된 라텍 패키지도 자동으로 설치해주는 기능이 많은
사랑을 받고 있다.

보통 TexLive에 기반을 둔 `tinytex` 를 사용하는데 한글을 사용하는
입장에서는 `kotex`를 설치하는 방법도 모색이 필요하다. 유니코드 문자를
처리하기 위해서 `xelatex`을 쿼토 $LaTeX$ 기본엔진으로 지정하면
`xelatex`을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.

쿼토를 설치하면 `quarto install tinytex` 명령어로 `TinyTeX`을 쉽게
설치할 수 있고, 설치 정보는 `quarto tools info tinytex`으로 파악이
가능하다.

``` bash
$ quarto install tinytex
Installing tinytex
[✓] Downloading TinyTex v2023.09
[✓] Unzipping TinyTeX-v2023.09.tar.gz
[✓] Moving files
[✓] Verifying tlgpg support
[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/
Installation successful

$ quarto tools info tinytex
{
  "name": "TinyTeX",
  "installed": true,
  "version": "v2023.09",
  "directory": "/home/statkclee/.TinyTeX",
  "bin-directory": "/home/statkclee/.TinyTeX/bin/x86_64-linux",
  "configuration": {
    "status": "ok"
  }
}
```

`kotex` 패키지 주요 장점 중 하나는 한글 관련 문제를 해결할 수 있는
다양한 라텍 패키지와 기본 한글 글꼴을 내장하고 있어 한글 문서 작성이
훨씬 편리하다. 하지만, `tinytex`를 기본 라텍 엔진으로 사용할 경우,
누락된 패키지로 인해 추가 작업이 어려울 수 있다. 이러한 문제를 해결하기
위해 `tinytex::parse_install()` 함수를 사용하면, 오류가 발생한 텍스트를
붙여넣을 때 자동으로 필요한 패키지를 설치해 준다. 설치과정에서 오류
사항이 담긴 `.log` 파일을 `tinytex::parse_install()` 함수에 인자로
넣어주면, 자동으로 필요한 패키지를 설치해 준다.

```{r}
#| eval = FALSE

# log 파일이 hello_world.log
tinytex::parse_install("hello_world.log")

tinytex::parse_install(
  text = "! LaTeX Error: File `titlepic.sty' not found."
)
```


:::{.callout-note}
### `tinytex` 설치

윈도우 환경에서 쿼토로 PDF 파일 생성할 때 다음과 같은 오류가 발생하여 로그에 기록될 경우 `tinytex` R 패키지를 설치하고 `tinytex::install_tinytex()` 명령어로 `tinytex`를 다시 설치한다.

```bash
running xelatex - 1

No TeX installation was detected.

Please run 'quarto install tinytex' to install TinyTex.
If you prefer, you may install TexLive or another TeX distribution.
```

:::

## 헬로월드

영문으로 작성된 PDF 파일은 텍스트, 이미지, 표, 그래프, 다이어그램과 같은 다양한 문서 기본구성요소가 포함된다. 다양한 문서요소로 구성된 PDF 문서는 출력을 했을 때 또렷하고 가독성이 좋다. 하지만, 한글이 추가될 때 언어 호환성 문제가 발생하여 한글 텍스트가 깨지는 문제가 종종 발생된다. 문제해결방법 중 하나가 한글 글꼴을 명시적으로 설정하는 것이다.

한글 글꼴 설정을 통해 문제를 해결한 후에는 쿼토 마크다운(QMD) 형식으로 PDF 파일을 변환한다. 쿼토 마크다운을 사용하는 이유는 라텍보다 마크다운 문서의 작성이 더 생산적이며, 웹 출판을 중점적으로 고려한 결과, 다양한 형태와 아름다운 웹 출판물을 쉽게 제작할 수 있기 때문이다. 쿼토 마크다운을 사용하면 웹 출판을 기본으로 하면서, PDF 출판도 함께 진행할 수 있어 일거양득의 효과를 볼 수 있다.

### 영문 PDF

기본적인 라텍 문서 구조에 표, 수식, 다이어그램, 주석을 추가한 라텍 기본
문서를 작성한다.

``` tex
\documentclass{article}  % 문서 클래스 지정. article은 학술 논문, 보고서 등에 적합하다.

\usepackage{tikz}  % tikz 패키지 추가. 그래픽을 그리기 위해 필요하다.

\title{fathers of the atomic bomb}  % 문서의 제목 설정
\author{Oppenheimer}  % 문서의 저자 설정
\date{\today}  % 문서의 날짜 설정. \today를 사용하여 오늘 날짜를 자동 입력한다.

\begin{document}  % 문서의 본문 시작

\maketitle  % 제목, 저자, 날짜를 출력

\section{Introduction}  % "Introduction"이라는 섹션 생성

The name "Oppenheimer"\footnote{Oppenheimer is pronounced in English as /ˈɒpənˌhaɪmər} is a German-origin surname that is most famously associated with J. Robert Oppenheimer, the American physicist known as one of the "fathers of the atomic bomb."  % 본문과 각주

\section{Table}  % "Table"이라는 섹션 생성
Below is a simple table.
\begin{center}
\begin{tabular}{|c|c|}
\hline
Header 1 & Header 2 \\  % 테이블의 헤더
\hline
Row 1, Col 1 & Row 1, Col 2 \\  % 첫 번째 행
Row 2, Col 1 & Row 2, Col 2 \\  % 두 번째 행
\hline
\end{tabular}
\end{center}  % 테이블 종료

\section{Equation}  % "Equation"이라는 섹션 생성
Here is a simple equation:
\begin{equation}  % 수식 환경 시작
  f(x) = x^2  % 수식
\end{equation}  % 수식 환경 종료

\section{Diagram}  % "Diagram"이라는 섹션 생성
Here is a simple diagram:
\begin{center}
\begin{tikzpicture}  % tikz로 그림을 그리기 시작
  \draw[->] (0,0) -- (4,0);  % x축 그리기
  \draw[->] (0,0) -- (0,4);  % y축 그리기
  \draw (0,0) -- (3,3);  % 대각선 그리기
\end{tikzpicture}
\end{center}  % 그림 환경 종료

\end{document}  % 문서의 본문 종료
```

RStudio로 라텍을 이용해 PDF 문서를 생성할 때, 먼저 새로운 `.tex` 문서를
생성하고 표, 수식, 다이어그램, 주석이 포함된 라텍 코드를
복사-붙여넣는다. RStudio의 `Compile PDF` 버튼을 클릭하여 컴파하고,
완료되면 PDF 문서가 자동으로 열린다.

::: columns
::: {.column width="65%"}
![라텍 문서 컴파일](images/pdf_english_rstudio.jpg)
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![라텍 헬로월드 기본 문서](images/pdf_english.jpg){fig-align="center"
width="256"}
:::
:::

### 한글 PDF

영문 PDF를 한글로 번역하여 동일한 방식으로 PDF 파일을 만들기 위해
컴파일하게 되면 한글이 깨지거나 아무것도 없는 PDF 문서가 생성된다.

``` tex
\documentclass{article}

\usepackage{tikz}

\title{원자폭탄의 아버지들}
\author{오펜하이머}
\date{\today}

\begin{document}

\maketitle

\section{소개}

"오펜하이머"라는 이름\footnote{오펜하이머는 영어로 /ˈɒpənˌhaɪmər/ 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 "원자폭탄의 아버지"로 알려져 있다.

\section{표}
아래는 간단한 표이다.
\begin{center}
\begin{tabular}{|c|c|}
\hline
헤더 1 & 헤더 2 \\
\hline
행 1, 열 1 & 행 1, 열 2 \\
행 2, 열 1 & 행 2, 열 2 \\
\hline
\end{tabular}
\end{center}

\section{수식}
다음은 간단한 수식이다:
\begin{equation}
  f(x) = x^2
\end{equation}

\section{다이어그램}
아래는 간단한 다이어그램이다:
\begin{center}
\begin{tikzpicture}
  \draw[->] (0,0) -- (4,0);
  \draw[->] (0,0) -- (0,4);
  \draw (0,0) -- (3,3);
\end{tikzpicture}
\end{center}

\end{document}
```

![LaTeX에서 한글이 깨진 PDF
문서](images/pdf_korean.jpg){fig-align="center" width="244"}

한글이 PDF 문서에 표현되지 않는 문제는 글꼴을 `.tex` 파일에 지정함으로써
해결된다. 먼저 전제조건으로 한글 글꼴(예를 들어, 나눔고딕 글꼴)이
설치되어 있고 이를 라텍 에서 컴파일하는 방식으로 작업한다.

```{tex}
#| source-line-numbers: "4-5"
\documentclass{article}

\usepackage{tikz}
\usepackage{fontspec}
\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함
\usepackage{tipa} % 발음기호(IPA symbols)

\title{원자폭탄의 아버지들}
\author{오펜하이머}
\date{\today}

\begin{document}

\maketitle

\section{소개}

"오펜하이머"라는 이름\footnote{오펜하이머는 영어로 \textipa{/ˈɒpənˌhaɪmər/} , \textipa{/\'{O}p@n\"{h}aIm@r/} 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 "원자폭탄의 아버지"로 알려져 있다.

\section{표}
아래는 간단한 표이다.
\begin{center}
\begin{tabular}{|c|c|}
\hline
헤더 1 & 헤더 2 \\
\hline
행 1, 열 1 & 행 1, 열 2 \\
행 2, 열 1 & 행 2, 열 2 \\
\hline
\end{tabular}
\end{center}

\section{수식}
다음은 간단한 수식이다:
\begin{equation}
  f(x) = x^2
\end{equation}

\section{다이어그램}
아래는 간단한 다이어그램이다:
\begin{center}
\begin{tikzpicture}
  \draw[->] (0,0) -- (4,0);
  \draw[->] (0,0) -- (0,4);
  \draw (0,0) -- (3,3);
\end{tikzpicture}
\end{center}

\end{document}

```

![\LaTeX 에서 한글문제를 해결한 PDF
문서](images/pdf_korean_hangul.jpg){fig-align="center" width="246"}

### 쿼토 PDF

PDF 문서 저작을 위해 쿼토 `.qmd` 파일에서 라텍 편집사항을 기술하려는 경우, 앞서 동일한 문서를 라텍 편집기가 아닌 쿼토 마크다운 파일로 작성한다.

````bash
---
title: "원자폭탄의 아버지들"
author: "오펜하이머"
date: "`r Sys.Date()`"
format: 
  pdf:
    documentclass: article
    geometry:                                 
      - paperheight=257mm
      - paperwidth=188mm
      - top=25mm    
      - headsep=10mm  
      - bottom=30mm     
      - footskip=15mm           
      - left=25mm
      - right=25mm
      - centering       
    latex_engine: xelatex
    keep_tex: false
    include-in-header:
      text: |    
        \usepackage{tikz}
        \usepackage{fontspec}
        \usepackage{tipa}
        \usepackage{setspace}
        \onehalfspacing

mainfont: "MaruBuri-Regular"
sansfont: "NanumSquareR"
monofont: "D2Codingligature"
editor_options: 
  chunk_output_type: console
---

# 소개

"오펜하이머"라는 이름[^1]은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 "원자폭탄의 아버지"로 알려져 있다.

[^1]: 오펜하이머는 영어로 \textipa{/ˈɑpənˌhaɪmər}} 로 발음된다.



# 표

아래는 간단한 표이다.

```{r}
#| echo: false
knitr::kable(
  matrix(c("행 1, 열 1", "행 1, 열 2", "행 2, 열 1", "행 2, 열 2"), ncol = 2),
  col.names = c("헤더 1", "헤더 2")
)
```


# 수식

다음은 간단한 수식이다:

$$
  f(x) = x^2
$$

# 다이어그램

아래는 간단한 다이어그램이다:

```{r, engine = 'tikz'}
#| echo: false
#| fig-align: "center"
\begin{tikzpicture}  % tikz로 그림을 그리기 시작
  \draw[->] (0,0) -- (4,0);  % x축 그리기
  \draw[->] (0,0) -- (0,4);  % y축 그리기
  \draw (0,0) -- (3,3);  % 대각선 그리기
\end{tikzpicture}
```

이 `.qmd` 파일은 Quarto를 사용하여 PDF로 렌더링할 수 있다. LaTeX 패키지와 명령어는 YAML 메타데이터의 `header-includes` 섹션에 추가될 수 있다. 그러나 특별한 LaTeX 명령어나 환경이 필요한 경우, 이를 수동으로 `.qmd` 파일에 적용해야 할 수도 있다.

````


```{r}
#| echo: false
#| fig-cap: "쿼토 마크다운으로 PDF 파일 생성"
library(magick)
quarto_pdf <- magick::image_read_pdf("tutorial/pdf_quarto.pdf")

quarto_pdf |> 
  image_resize(geometry = "500x") |> 
  image_border("blue", "0.5x0.5") |>   
  image_append(stack=FALSE)
```






