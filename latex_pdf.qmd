
# [\LaTeX](http://example.org)과 PDF

[\LaTeX](http://example.org)을 간단히 정의하자면 **"논리적인 디자인"**이라고 할 수 있다. 작품이 생성되는 과정에서는 작가가 원고를 수기로 작성하거나 타자기로 입력한 뒤 이를 출판사에 제출한다. 그 후, 출판사의 편집 디자이너는 원고를 검토하여 세부적인 출력 형식을 결정하고 이를 인쇄소에 전달한다. 인쇄소에서는 이 정보를 바탕으로 과거에는 식자공이 식자판을 제작했으나, 현재는 컴퓨터가 파일을 생성한다. @fig-latex-structure 에 문서 디자인과 문서 논리 구조에 대해 이해를 위해 도식화했다. 

미국 스탠포트 대학 크누스(Donald Knuth) 교수가 1978년에 만든 문서조판 프로그램을 $TeX$("텍"이라고 읽음)이라고 하고, Leslie Lamport 교수가 만든 TeX 매크로 팩키지를 [\LaTeX](http://example.org)("레이텍"이라고 읽음)이라고 한다. [\TeX](http://example.org)과 [\LaTeX](http://example.org)의 탄생 역사를 살펴보면 문서 논리 구조와 디자인 분리가 갖는 문서 저작 장점을 잘 나타내고 있다. 저수준(low-level) 언어로, 사용자가 페이지 레이아웃이나 글꼴 설정 등을 직접 제어할 수 있지만, 복잡한 포맷을 만들기 위해 사용자가 직접 매크로를 작성해야 한다는 점에서 일반 저작자가 사용하기에는 한계도 분명히 존재했다.

[\LaTeX](http://example.org)은 1980년대에 레슬리 램포트(Leslie Lamport)에 의해 개발되었고, [\TeX](http://example.org)을 기반으로 개발된다. [\TeX](http://example.org) 복잡성을 단순화하여 더 사용자 친화적인 인터페이스를 제공한다. 따라서, 문서 구조와 내용에 더 집중할 수 있도록 고수준(high-level) 언어를 제공하며, 다양한 템플릿과 패키지가 제공되어 사용자가 쉽게 복잡한 레이아웃과 기능을 구현할 수 있다. [\LaTeX](http://example.org) 문서는 내부적으로 [\TeX](http://example.org) 엔진을 사용하여 조판된다. [@Kim2017]

- [\LaTeX](http://example.org): 편집 디자이너의 역할에 해당하는 작업을 수행
- [\TeX](http://example.org): 식자공의 역할에 해당하는 작업을 수행

![문서 디자인과 문서 논리 구조](images/document-logical-design.jpg){#fig-latex-structure}

[\LaTeX](http://example.org)에서 적용하는 논리적 디자인의 가장 큰 이점은 글쓰기 능력의 향상에 있다. [\LaTeX](http://example.org)으로 글을 작성하면서 점차 [\LaTeX](http://example.org)의 논리적 디자인 철학에 맞춰가게 되며, 이를 통해 글쓰기 실력이 개선된다.

컴퓨터를 이용한 전자조판의 주된 목적은 문서를 읽기 쉽게 구성하여 저자의 의도를 독자에게 명확하게 전달하는 것이다. 이를 위해선 문서의 디자인이 그 내용의 논리적 구조를 잘 반영해야 하며, 이를 달성하기 위해서는 디자이너가 문서의 논리적 구조를 충분히 이해해야 한다. [\LaTeX](http://example.org) 명령어 체계는 기본적으로 이러한 **문서의 논리적 구조를 명시**하는 데 중점을 둔다. 이렇게 설정된 명령어는 [\TeX](http://example.org) 엔진을 통해 조판되어 최종적으로 원하는 결과물을 생성한다.


[\LaTeX](http://example.org)의 가장 큰 장점 중 하나는 확실히 자동화 기능이다. 수식, 참고문헌, 표, 그래프의 번호를 자동으로 관리해주며, 복잡한 문서 구조도 쉽게 다룰 수 있다. 특히, 국내외 학술지에 논문을 제출할 때에는 템플릿만 변경하면 고품질의 논문을 쉽게 생성할 수 있다. 반면, 워드 프로세서를 사용할 경우 이러한 작업은 수동으로 해야 하며, 이로 인해 시간을 낭비하게 되고 결과물이 덜 정교하게 나올 수 있다. 결과적으로, [\LaTeX](http://example.org)을 사용하면 글쓰기 본질에 더 집중할 수 있으며, 이를 통해 저자의 생각과 의견을 더욱 솔직하고 명확하게 독자에게 전달할 수 있다.


## [\LaTeX](http://example.org) 엔진  {#latex-engine}

[\LaTeX](http://example.org)을 실제 문서 작성에 활용하기 위해서는 적절한 [\TeX](http://example.org) 배포판을 선택해야 한다. 
이에 대해 [KTUG 한국 TeX 사용자 그룹](http://www.ktug.org/)은 $ko.TeX$ Live를 추천하고 있으며, 그 이유는 다음과 같다. [@Lee2017]

- [\LaTeX](http://example.org) 엔진으로 `pdfLaTeX`, `XeLaTeX`, `LuaLaTeX` 세 가지가 있으나, `XeLaTeX`은 유니코드 [\TeX](http://example.org) 엔진으로 동아시아 언어(CJK)를 잘 지원하고, 트루타입 및 오픈타입 폰트를 자유롭게 선택할 수 있어 인기가 높다.
- 운영체제에 따라 차이는 있지만, 실제 문서 작업에 [\LaTeX](http://example.org)을 안정적으로 설치하고 사용하기 위해서는 `TeX Live`가 `MikTeX`보다 안정성과 사용자 지원 측면에서 우수하다.
- [\TeX](http://example.org) 소스파일과 PDF 파일 간의 탐색 기능은 TexStudio IDE를 활용하여 쉽게 이용할 수 있다.

과거에는 `latex+dvips+pspdf`를 사용한 전통적인 작업 흐름이 있었으며, 이 방식은 `pstricks`를 이용해 PDF 파일을 생성하는데 시간이 오래 걸리고, `eps` 파일만을 이미지로 사용할 수 있다는 한계가 있었다. 또 다른 방식인 `latex+dvipdfmx` 작업 흐름은 중간 단계로 `.dvi` 파일을 생성한 후 `dvipdfmx`를 이용해 PDF 파일을 만든다. 그러나 현재 가장 인기 있는 작업 흐름은 pdfLaTeX, XeLaTeX, LuaLaTeX를 활용한 방식으로, 이는 `.tex` 소스파일에서 바로 `.pdf` 파일을 생성할 수 있다는 장점이 있다.

논문 외의 문서를 작성할 경우에는 한 단계 더 나아가 `memoir` 또는 `oblivoir` 클래스를 활용하는 것이 효율적이다. 이 방법은 이미 검증된 문서 템플릿을 기반으로 빠르게 PDF 문서를 생성할 수 있는 방법이다.


![한글지원 [\LaTeX](http://example.org) 엔진과 작업흐름](images/tex-engines.png)


## [\LaTeX](http://example.org) 구성요소 {#latex-knuth}

수학과 교수였던 도널드 크누스는 문서 조판 시스템을 개발하면서 수식 처리를 간편하게 할 수 있도록 하면서, 메타폰트(METAFONT)라는 글꼴 시스템도 개발하여 고품질 글자체를 구현할 수 있도록 했다. 이러한 기초 위에 레슬리 램포트는 [\TeX](http://example.org)을 더욱 사용하기 쉽게 만들기 위해 다양한 매크로를 [\LaTeX](http://example.org)으로 묶어 공개했다. 그 결과 일반인도 [\LaTeX](http://example.org)을 이용해 고품질의 문서를 쉽게 작성할 수 있게 되었다. 버클리 대학 마이클 스피백 교수는 수식을 간편하게 문서에 적용할 수 있도록 AMS-TeX라는 매크로를 개발하고, 이에 대한 설명을 "The Joy of TeX"이라는 책에서도 공개했다. [@spivak1990joy]

`pdftex`와 `e-TeX`이 결합하여 사실상 [표준 TeX](http://wiki.ktug.org/wiki/wiki.php/TeX)이 되었고, 이를 기반으로 [XeTeX](http://wiki.ktug.org/wiki/wiki.php/XeTeX)과 `LuaTeX`이 발전하고 있다. 
특히, 한글 폰트 처리에 있어서 XeTeX(지텍으로 읽음)이 널리 사용되고 있다.

[\LaTeX](http://example.org) 동작 원리는 Salomon의 도식화에 영감을 받아 Kees van der Laan이 1994년에 정리한 논문에서 상세하게 설명되어 있다. [@van1994tex] 기본적으로 고품질의 전자 출판을 위해 글꼴과 [\TeX](http://example.org)이 필요하며, 이 두 요소가 결합하여 고품질의 출력물을 생성한다. 이러한 [\TeX](http://example.org) 엔진을 지원하는 다양한 패키지 중에서 `AMS-(La)TeX`, `LaTeX`, `manmac` 등이 주목을 받고 있다. 

문서의 다양한 구성 요소, 예를 들어 *목차*, *색인*, *참고문헌*, *그림과 표* 등은 모듈화되어 관리되며, 글꼴 및  구조적인 스타일과 관련된 부분도 별도로 관리되고 있다. [TeXWorks](https://www.tug.org/texworks/)와 같은 위지윅(WYSIWYG)을 지원하는 편집기는 구문 강조, 맞춤법 검사 등을 통해 고품질의 [\LaTeX](http://example.org) 문서 작성을 지원하고 있다.

[^10]: [표준 \LaTeX](http://wiki.ktug.org/wiki/wiki.php/ModernLaTeX)


![편집기, 엔진, 글꼴을 중심으로 본 \LaTeX 내부](images/latex_under_the_hood.jpg)

[\LaTeX](http://example.org) 문서 작성을 위해 기본적인 구성요소는 다음과 같다.

1.  **배포판:** 과거에는 다양한 배포판이 윈도우, 리눅스, 맥에서 사용되었지만, 현재는 [TeX Live](https://www.tug.org/texlive/)가 대표적인 LaTeX 작업 환경이다. [MikTeX](http://miktex.org/)도 있지만, 큰 차이는 없다.
  
2.  **글꼴:** 초기에는 글꼴로 폰트 메트릭(tfm)과 메타폰트(MetaFont)가 주로 사용되었으나, 현재는 트루타입과 오픈타입이 널리 쓰인다.
    - 폰트 선택은 밥처럼 기본적이면서도 안정적인 것이 좋다. 특별한 상황에서는 그에 맞는 폰트를 선택하는 것이 중요하다.
    - 일반적으로 Serif와 San Serif 폰트를 한 쌍으로 사용하는 것이 균형감이 있다. 예를 들어, 나눔고딕과 나눔명조, KoPub돋움과 KoPub바탕, 함초롬도움과 함초롬바탕 등이 있다.
    - 글자 크기는 10~12 포인트가 적절하며, 이는 장시간 동안의 읽기 피로를 줄이기 위함이다.

3.  **그래픽:** [\TeX](http://example.org)/[\LaTeX](http://example.org) 자체는 그래픽을 주요 영역으로 보지 않는다. 과거에는 `dvips`와 EPS 형식을 주로 사용했으나, 현재는 `.jpg`, `.png`, `.pdf` 등도 잘 처리한다.

4.  **문자와 입력:** 초기에는 ASCII 코드가 주를 이루었으나, 현재는 UTF-8을 권장하고 있다. 특히, `\usepackage[utf8x]{inputenc}`가 필요한 경우가 많다.

5.  **색인과 참고문헌:** `makeindex`와 `bibtex`는 색인과 참고문헌 처리의 표준이다. 그러나 유니코드 처리를 위해 `texindy`와 `biber`도 주목을 받고 있다.

6.  **수식:** 수학 표현과 관련해서는 미국 수학회가 발전시킨 **amsmath**가 표준이다.

7.  **출력:** 과거에는 `.dvi` 형식이 기본이었으나, 현재는 `.pdf`가 기본이다. 또한, 웹을 위한 다양한 `.html` 출력도 지원한다. 이에 따라, 웹이 책 형태의 문서보다 더 중요한 위치를 차지하게 될 것으로 예상된다.

```tex
% A flowchart of a TeX workflow
% Author: Stefan Kottwitz
% https://www.packtpub.com/hardware-and-creative/latex-cookbook
\documentclass[border=10pt]{standalone}
\begin{document}
\smartdiagram[flow diagram:horizontal]{Edit,
  \LaTeX, Bib\TeX/ biber, make\-index, \LaTeX}
\end{document}
```

[\LaTeX](http://example.org)을 통한 PDF 파일 제작 과정은 몇 가지 주요 단계로 이루어진다. 
[\LaTeX](http://example.org) 전용 TexStudio 같은 통합개발환경(IDE), RStudio 같은 데이터 과학 IDE, 
범용 소프트웨어 개발 VS코드 같은 IDE에서 텍스트 편집기를 열어 신규 [\LaTeX](http://example.org) 파일을 생성하는데 
파일 확장자는 `.tex`이다. 파일 시작 부분에 `\documentclass` 명령어를 사용하여 문서의 종류와 옵션을 설정하는데, 학술 논문을 작성한다면 `article` 클래스를, 책을 작성한다면 `book` 클래스 등을 선택한다.

`\usepackage` 명령어를 사용하여 필요한 패키지를 불러와서 특별한 기능이나 스타일을 추가한다. 예를 들어, 수식을 표현하기 위해 `amsmath` 패키지를, 그림을 삽입하기 위해 `graphicx` 패키지 등이 사용된다.

문서의 본문은 `\begin{document}`와 `\end{document}` 사이에 작성되고, 영역 안에서 텍스트, 표, 그림, 수식 등을 자유롭게 배치할 수 있다. 본문 작성 중에 참고문헌 서지관리를 위해 `BibTeX` `texindy`, `biber`를 사용하고, 색인 생성을 위해 `makeindex`를 사용한다.

본문 작성이 완료되면, [\LaTeX](http://example.org) 컴파일러를 실행하여 `.tex` 파일을 PDF로 변환한다. 영어는 `pdflatex`, 한글은 `xelatex` 을 [\LaTeX](http://example.org) 엔진으로 사용하고, 참고문헌과 색인이 포함된 경우 컴파일 과정이 수차례 이어진다.

![\LaTeX 작업흐름](images/latex_workflow.jpg)

