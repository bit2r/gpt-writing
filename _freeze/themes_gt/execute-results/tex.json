{
  "hash": "618ed3deaa4b120bcd5d7cd72e8471d9",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# 표 테마\n\n문서에 표를 삽입하면 정보를 효율적으로 요약하고 가독성을 높이는 데 큰\n역할을 한다. 표를 작성할 수 있는 도구로 마크다운(Markdown), `gt` 패키지,\n라텍 모두 각각의 특장점이 있다. 마크다운은 사용하기 쉬우며 복잡한 설치나\n추가 패키지 없이도 기본적인 표를 빠르게 작성할 수 있다. 라텍은 논문이나\n학술 자료에 적합하게 고품질의 표를 제작할 수 있는 전문적인 도구다.\n\n웹과 PDF 출력, 테마 지정 등에서 `gt` 패키지가 뛰어나고 `gt` 패키지는\n그래프 문법에 기초하여 고급 표제작도 수월히하게 작성가능하고, 특히,\n데이터 중심 표를 작성할 때 필요한 다양한 기능을 제공하기 때문에 탄탄한\n표문법에 기반한 `gt` 패키지가 여러가지 장점이 많다.\n\n![표제작 세가지 방식](images/table_three.jpg)\n\n## `gt` 표 작성하기\n\n`gt` 패키지는 R Tidyverse 생태계에 속한 표 제작 목적으로 특별히 제작된\n패키지로 그래프 문법에 기반한 `ggplot2` 패키지에 친숙하신 저자는 쉽게\n표도 `gt` 패키지를 사용해서 다양한 표 제작이 가능하다. 다음 예시에서는\n`palmerpenguins` 데이터 패키지 `penguins` 데이터셋을 활용하여 \"남극 펭귄\n서식섬과 종 빈도표\"를 제작한다.\n\n1.  라이브러리 가져오기: `tidyverse`, `palmerpenguins`, `gt`,\n    `gtExtras`, `magick`.\n2.  `penguins` 데이터를 사용하여 종(species)과 서식섬(island)에 따른\n    빈도를 집계하고 표제작에 맞춰 피벗 테이블을 생성한다.\n3.  `gt()` 함수를 이용하여 `gt` 표를 초기화하고, `rowname_col` 인자로\n    \"species\"를 지정하여 행 이름을 설정한다.\n4.  `tab_header()` 함수로 표 제목과 부제목을 지정한다.\n5.  `grand_summary_rows()` 함수를 사용하여 각 서식섬(Biscoe, Dream,\n    Torgersen) 합계를 계산한다.\n6.  `cols_align(\"center\")`을 통해 텍스트를 가운데 정렬한다.\n7.  `opt_row_striping()` 함수로 행에 스트라이핑을 추가하여 가독성을\n    높인다.\n8.  `tab_source_note()` 함수로 표 출처를 표기한다.\n\n`penguins_gt` 변수에 저장된 `gt` 표를 저장한다. `gt` 패키지의 다양한\n기능을 활용하여 복잡한 표도 손쉽게 작성할 수 있다는 것을 다시 확인할 수\n있다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(magick)\n\npenguins_gt <- penguins |> \n  count(species, island) |> \n  pivot_wider(names_from = island, values_from = n, values_fill = 0) |> \n  as_tibble() |> \n  gt(rowname_col = \"species\") |> \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |> \n    grand_summary_rows(\n      columns = c(Biscoe, Dream, Torgersen),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |> \n    cols_align(\"center\") |> \n    opt_row_striping() |> \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\npenguins_gt\n```\n\n::: {.cell-output-display}\n\\setlength{\\LTpost}{0mm}\n\\begin{longtable}{l|ccc}\n\\caption*{\n{\\large 남극 펭귄 \\textbf{서식섬과 종} 빈도표} \\\\ \n{\\small \\texttt{palmerpenguins} 데이터 패키지}\n} \\\\ \n\\toprule\n\\multicolumn{1}{l}{} & Biscoe & Dream & Torgersen \\\\ \n\\midrule\nAdelie & 44 & 56 & 52 \\\\ \nChinstrap & 0 & 68 & 0 \\\\ \nGentoo & 124 & 0 & 0 \\\\ \n\\midrule \n\\midrule \n합계 & $168$ & $124$ & $52$ \\\\ \n\\bottomrule\n\\end{longtable}\n\\begin{minipage}{\\linewidth}\n자료출처: \\texttt{penguins} 데이터셋\\\\\n\\end{minipage}\n\n:::\n:::\n\n\n\n### 기본 색상과 스타일\n\n웹 프로그램을 제작할 때 HTML로 콘텐츠를 제작하고 CSS/SCSS 파일로\n스타일을 적용하는 것처럼 유지보수성이 뛰어나고 가독성이 좋은 표를\n제작하기 위해 저자가 익혀야 되는 필수적인 기본기 중 하나다.\n`penguins_gt` 표는 핵심 정보가 잘 요약되어 있지만, 색상이나 다른 외양\n관련 설정은 기본설정값만 따르고 있다.\n\n`gt` 패키지 `opt_stylize()` 함수는 표 스타일링에 다양한 선택지를\n제공한다. 미리 정의된 배경색, 선 색상, 선 스타일 등을 다르게 적용할 수\n있어 스타일은 총 36개에 이른다. 표 테두리, 표 요약 부분과 스텁(stub)에\n더 어두운 색상을 적용, 수직선 반영여부가 포함된다.\n\nR 코드 `opt_colors` 벡터에 총 6가지 색상(파란색, 청록색, 분홍색, 녹색,\n붉은색, 회색) 중 5개 색상을 지정하고, `draw_color_gt` 함수를 이용하여 이\n색상들을 `penguins_gt` 표에 `opt_stylize` 함수를 호출하여 표 색상을\n적용한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopt_colors <- c(\"blue\", \"cyan\", \"green\", \"red\", \"gray\")\n\ndraw_color_gt <- function(gt_color = \"blue\") {\n  penguins_gt |> \n    opt_stylize(style = 1, color = gt_color)\n}                \n\ngt_colors_list <- map(opt_colors, draw_color_gt)\n\n\nfor(i in 1:length(opt_colors)) {\n  gtsave(gt_colors_list[[i]], str_glue(\"images/gt_theme_{opt_colors[i]}.png\"))\n}\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](themes_gt_files/figure-pdf/unnamed-chunk-3-1.png){width=4.9in}\n:::\n:::\n\n\n\n### 스타일\n\n`gt` 패키지는 `opt_stylize()` 함수를 통해서 색상뿐만 아니라 스타일도\n달리해서 표를 제작할 수 있다. `gt` 패키지 1 \\~ 6까지 번호 총6가지 스타일\n선택이 가능하고, 기본값은 1 로 설정되어 있고, 저자가 복잡한 설정 없이\n번호를 지정함으로써 표 디자인을 빠르게 변경할 수 있다. 번호로 스타일을\n선택하게 되면, 데이터 분석과정에서 다양한 표 스타일을 빠르게 시험하고\n가장 적절한 표를 신속히 제작하는데 도움이 된다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopt_styles <- 1:5\n\ndraw_style_gt <- function(opt_sytle, gt_color = \"blue\") {\n  penguins_gt |> \n    opt_stylize(style = opt_sytle, color = gt_color)\n}                \n\ngt_styles_list <- map(opt_sytles, draw_style_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_styles_list[[i]], str_glue(\"images/gt_theme_style_{opt_styles[i]}.png\"))\n}\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](themes_gt_files/figure-pdf/unnamed-chunk-5-1.png){width=4.89in}\n:::\n:::\n\n\n\n## `gtExtra`\n\n`gtExtras` 패키지는 `gt` 패키지를 보완하여 더 아름다운 표를 생성할 수\n있도록 도와주는 목적으로 개발되었다. `gt` 패키지에서 구현되지 않은\n기능을 추가하거나, 반복되는 코드를 줄이기 위한 래퍼(wrapper) 함수로\n작성되었다. `gt` 패키지를 확장한 다양한 기능이 있지만 테마와 관련된\n사항을 집중적으로 살펴보자.\n\n`ggplot2` 패키지를 활용하여 그래프 문법에 맞춰 그래프를 제작한 경험이\n있다면, 자주 `theme_*()` 함수를 사용했을 것이다. 마찬가지로 `ggplot2`\n그래프 테마 `theme_minimal()`, `theme_grey()`에 대응되는 테마가\n`gtExtras` 패키지에 `gt_theme_538()`, `gt_theme_espn()`,\n`gt_theme_nytimes()`, `gt_theme_guardian()`, `gt_theme_dot_matrix()`,\n`gt_theme_dark()`, `gt_theme_excel()`, `gt_theme_pff()` 포함되어 있다.\n주목할 점은 언론사와 단체에서 사용되는 스타일이 대거 포함되어 있다는\n점이다.\n\n`gt_theme_espn()` 함수는 `gt` 패키지로 생성된 표에 ESPN 테마를 적용한다.\n이 함수는 `gt` 테이블 객체(`gt_tbl` 클래스)를 인자로 받으며, 선택적으로\n`gt::table_options()`에 전달할 추가 인자를 받을 수 있다. 반환 값은\n`gt_tbl` 클래스의 객체이다.\n\n다음은 다른 테마 함수들에 대한 간략한 설명이다:\n\n| 테마명                  | 테마 설명                                                 |\n|-----------------------------------------|-------------------------------|\n| `gt_theme_538()`        | FiveThirtyEight 스타일 테마 적용                          |\n| `gt_theme_espn()`       | ESPN 스타일 테마 적용                                     |\n| `gt_theme_nytimes()`    | New York Times 스타일 테마 적용                           |\n| `gt_theme_guardian()`   | 가디언진(The Guardian) 스타일 테마 적용                   |\n| `gt_theme_dot_matrix()` | 도트 매트릭스 스타일 테마 적용                            |\n| `gt_theme_dark()`       | 어두운 배경 테마 적용                                     |\n| `gt_theme_excel()`      | 마이크로소프트 엑셀 스타일 테마 적용                      |\n| `gt_theme_pff()`        | PFF(Pro Football Focus, 스포츠 분석회사) 스타일 테마 적용 |\n\n언론사와 미국 풋볼 리그 스포츠 분석에 특화된 PFF 스타일을 표에\n적용해보자.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtExtra_themes <- c(gt_theme_538, gt_theme_espn, gt_theme_nytimes, gt_theme_guardian, gt_theme_pff)\n\ngtExtra_themes_names <- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\",\"gt_theme_pff\")\n\ndraw_gtExtras_theme <- function(gt_theme, gtExtra_themes_names) {\n  penguins_gt |> \n    gt_theme() |> \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = gtExtra_themes_names)\n}\n\n# draw_gtExtras_theme(gtExtra_themes[5][[1]])\n## gtExtras 테마적용 표 -------------------\n\ngtExtra_styles_list <- vector(mode =\"list\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtra_styles_list[[i]] <-  draw_gtExtras_theme(gtExtra_themes[i][[1]], gtExtra_themes_names[i])\n}\n\n## 테마 표 png 파일 저장 -------------------\n\ngtExtras_path_filenames <- vector(mode = \"character\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtras_path_filenames[i] <-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtsave(gtExtra_styles_list[[i]],\n         str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\"))\n}\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](themes_gt_files/figure-pdf/unnamed-chunk-7-1.png){width=4.99in}\n:::\n:::\n\n\n\n## 사용자 정의 테마\n\n사용자 정의 테마가 필요한 이유는 다양하지만, 보고서나 PPT 발표에서 동일한 스타일과 구성을 가진 표를 사용하면 데이터를 더 쉽고 빠르게 이해할 수 있고 동일한 일관성은 수작없이 반영할 수 있고 독자에게는 전문성을 각인시킬 수 있는 점이 크다.\n\n`gtExtras`와 같은 패키지에서 제공되는 테마는 코드 한 줄로 빠르고 깔끔한 표를 만들 수 있어 시간을 절약할 수 있다는 큰 장점이 있지만, 특정 요구사항이나 브랜딩 지침을 완전히 맞춤화하기 쉽지 않고, 복잡한 데이터 구조나 특별한 시각화 요구사항을 충족시키는 데에도 한계가 있다.\n\n사용자 정의 테마를 개발함으로써 `gtExtras`에서 제공하는 테마처럼 표 제작을 빠르고 편하게 지원할 수 있으면서도, 저자가 필요로 하는 브랜드나 스타일을 반영할 수 있다. 이렇게 하면 표가 더 전문적이면서도 개성있게 작성할 수 있다.\n\n### `gtExtras` 확장\n\n`penguins_gt`라는 기존 `gt` 표 객체에 `gt_theme_538()` 테마를 선택하고 \n글꼴, 색상, 정렬 등 세부적인 작업을 진행하고 그 결과를 `.png` 파일로 저장한다.\n`gt` 패키지는 `tidyverse` 생태계 일원으로 파이프 연산자를 통해 세부적인 기능을 \n긴밀히 조합하여 단순한 코드로 제작되지만 최종 결과물로 상당히 높은 난이도를 갖는 \n표를 제작할 수 있다.\n\n1. **gt_theme_538()**: FiveThirtyEight 스타일 테마 적용\n  \n2. **tab_options()**: 테이블의 글꼴, 제목 크기, 배경색 등 다양한 표 선택옵션 설정\n  \n3. **cols_align()**: 숫자형 열은 가운데 정렬하고, 문자형 열은 자동 정렬\n  \n4. **tab_style()**: \"MaruBuri\" 글꼴과 굵은 글씨체를 제목, 본문, 열에 적용\n  \n5. **gtsave()**: 최종적으로 작업한 표를 PNG 이미지로 저장\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_theme_gt <- penguins_gt |> \n  gt_theme_538() |> \n  tab_options(\n    # column_labels.background.color = '#1E61B0', # R logo 파란색\n    table.font.names =\"NanumSquare\",    \n    heading.title.font.size = px(26),\n    heading.subtitle.font.size = px(16),    \n    heading.background.color = \"transparent\", \n    column_labels.font.weight = 'bold',\n    table_body.hlines.width = px(0),\n    data_row.padding = px(6),\n    heading.align = 'center',\n    stub.background.color = \"#ffffff\",\n    stub.font.weight = \"bold\",\n    source_notes.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) |> \n  cols_align( align = \"center\", columns = where(is.numeric)) |> \n  cols_align( align = \"auto\", columns = where(is.character)) |> \n  ## 글꼴 달리 적용\n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_title(groups = 'subtitle')\n  ) |> \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_body()\n  ) |> \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_column_labels()\n  ) |> \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n    ),\n    locations = cells_source_notes()\n  )\n\npenguins_theme_gt |> \n  gtsave(filename = \"images/penguins_theme_gt.png\")\n```\n:::\n\n\n\n![`gt` 사용자 정의 테마 적용\n표](images/penguins_theme_gt.png){fig-align=\"center\" width=\"446\"}\n\n### `gt_theme_hangul()` 테마\n\n`gt_theme_538()` 함수처럼 사용자 정의 함수를 \n`gt_theme_hangul()` 테마명을 지정해 두면 모든 표에 \n통일성을 유지한 테마를 간편하게 적용시킬 수 있다.\n\n`gt_tbl` 데이터프레임을 입력받아 `gt_theme_538()`을 기본표 테마로 지정하고,\n`tab_options()` 함수를 통해 글꼴, 제목 크기, 배경색 등을 설정하고, 나눔스퀘어(NanumSquare), 마루부리(MaruBuri) 글꼴을 사용하여 한글 표에 더 적합한 스타일을 적용하고, \n`cols_align()`과 `tab_style()` 함수를 사용해서 숫자형 열(칼럼)은 가운데 정렬시키고, 문자형 열은 자동 정렬토록 하고, 특정 셀에 굵은 글씨체와 각기 다른 글꼴을 적용하여 좀더 독특하고 전문적인 느낌을 심는다. `tab_style()` 기능을 이용해 표 홀수 번째 행에만 회색 배경('grey90')을 적용하여 가독성을 높게 한다. 마지막으로 사용자 정의 테마 함수도 예를 들어 기억하기 좋게 `gt_theme_hangul()`으로 작명하여 문서에서 표가 필요한 부분에 별도 검색작업 없이 적용시킬 수 있도록 한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngt_theme_hangul <- function(gt_tbl) {\n  \n  # Grab number of rows of data from gt object\n  n_rows <- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |> \n    gt_theme_538() |> \n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",    \n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),    \n      heading.background.color = \"transparent\", \n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |> \n    cols_align( align = \"center\", columns = where(is.numeric)) |> \n    cols_align( align = \"auto\", columns = where(is.character)) |> \n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |> \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_body()\n    ) |> \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_column_labels()\n    ) |> \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n      ),\n      locations = cells_source_notes()\n    ) |> \n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )    \n}\n\npenguins_gt |> \n  gt_theme_hangul()\n```\n\n::: {.cell-output-display}\n\\setlength{\\LTpost}{0mm}\n\\begin{longtable}{l|ccc}\n\\caption*{\n{\\large 남극 펭귄 \\textbf{서식섬과 종} 빈도표} \\\\ \n{\\small \\texttt{palmerpenguins} 데이터 패키지}\n} \\\\ \n\\toprule\n\\multicolumn{1}{l}{} & Biscoe & Dream & Torgersen \\\\ \n\\midrule\nAdelie & 44 & 56 & 52 \\\\ \nChinstrap & 0 & 68 & 0 \\\\ \nGentoo & 124 & 0 & 0 \\\\ \n\\midrule \n\\midrule \n합계 & $168$ & $124$ & $52$ \\\\ \n\\bottomrule\n\\end{longtable}\n\\begin{minipage}{\\linewidth}\n자료출처: \\texttt{penguins} 데이터셋\\\\\n\\end{minipage}\n\n:::\n:::\n\n\n\n## `.Rprofile` 설정작업\n\n`.Rprofile` 파일에 테마 함수를 반영시키면 R 세션을 시작할 때마다 테마가 자동으로 로드되어 일일이 코드를 실행할 필요가 없어 작업 효율성을 크게 높여줌은 물론, 프로젝트 간 일관된 스타일과 브랜딩을 유지할 수 있다. 코드 작성 측면에서 테마 함수를 `.Rprofile`에 추가하여 코드 재사용성을 높이고, 테마 관련 설정을 한 곳에서 관리할 수 있게 함으로써 작업 일관성과 전문성이 높아져 시간과 노력을 크게 절약할 수 있다.\n\n\n\n```{mermaid}\n%%| eval: false\n%%| echo: false\n\ngraph LR;\n  classDef default fill:#ffff,stroke:#333,stroke-width:2px;\n  class A,B,C,D,E default;\n\n  A[테마 스크립트 <br>생성] --> B[테마 함수<br> 작성];\n  B --> C[.Rprofile <br> 파일 반영];\n  C --> D[테마 자동 <br> 로딩];\n  D --> E[프로젝트 <br> 테마 적용];\n```\n\n\n\n![`gt` 표 테마 적용 작업흐름](images/gt_theme_hangul_workflow.png)\n\n작성한 테마를 매번 코드를 \"복사하여 붙여넣기\" 하여 사용하는 대신\n`.Rprofile` 파일에 반영하여 매번 `gt` 표를 제작할 때마다 \n`gt_theme_hangul()` 테마를 적용하는 방법은 다음과 같다. \n먼저, `usethis` 패키지 `edit_r_profile()` 함수를 호출하여 앞서\n작성한 테마를 반영한다.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_profile()\n```\n:::\n\n\n\n`gt_theme_hangul()` 테마를 `gt` 표 객체에 반영한다.\n스크립트에서부터 시작하여 작성한 함수를 `.Rprofile` 파일에 복사하여 붙여넣는 것으로 \n작업은 완료된다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\nlibrary(gtExtras)\n\ngt_theme_hangul <- function(gt_tbl) {\n\n  # Grab number of rows of data from gt object\n  n_rows <- nrow(gt_tbl$`_data`)\n\n  gt_tbl |>\n    gt_theme_538() |>\n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),\n      heading.background.color = \"transparent\",\n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |>\n    cols_align( align = \"center\", columns = where(is.numeric)) |>\n    cols_align( align = \"auto\", columns = where(is.character)) |>\n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |>\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_body()\n    ) |>\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_column_labels()\n    ) |>\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n      ),\n      locations = cells_source_notes()\n    ) |>\n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )\n}\n```\n:::\n\n\n\n`.Rprofile` 파일에 `gt` 사용자 정의 테마가 지정되어 있기 때문에 새로 R\n세션을 시작하면 `gt_theme_hangul()` 테마를 프로젝트 어디에서든지 사용할 수 있다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginal_penguins_gt <- penguins |> \n  drop_na() |> \n  count(species, sex) |> \n  pivot_wider(names_from = sex, values_from = n, values_fill = 0) |> \n  janitor::adorn_totals(where = \"col\", name = \"합계\") |> \n  rename(펭귄종 = species, 암컷 = female, 수컷 = male) |> \n  as_tibble() |> \n  gt(rowname_col = \"펭귄종\") |> \n    tab_header(\n      title = md(\"남극 펭귄 **암수와 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |> \n    grand_summary_rows(\n      columns = c(펭귄종, 암컷, 수컷),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |> \n    cols_align(\"center\") |> \n    opt_row_striping() |> \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\noriginal_penguins_gt |> \n  gtsave(\"images/rprofile_original.png\")\n\ntheme_penguins_gt <- original_penguins_gt |> \n  gt_theme_hangul()\n\ntheme_penguins_gt |> \n  gtsave(\"images/rprofile_hangul_theme.png\")\n```\n:::\n\n\n\n\n:::{layout=\"[49.5, -1, 49.5]\"}\n\n![`gt_theme_hangul()` 테마 적용\n전](images/rprofile_original.png)\n\n![`gt_theme_hangul()` 테마 적용\n후](images/rprofile_hangul_theme.png)\n\n:::\n",
    "supporting": [
      "themes_gt_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{\"knit_meta_id\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"unnamed-chunk-1\",\"unnamed-chunk-1\",\"unnamed-chunk-1\",\"unnamed-chunk-9\",\"unnamed-chunk-9\",\"unnamed-chunk-9\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"caption\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"caption\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]}]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}