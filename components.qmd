---
output: html_document
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

# 문서 구성요소

![디지털 문서 구성요소](images/writing_document.jpg)

## 그래프

그래프(`ggplot`)에 사용되는 글꼴도 마찬가지로 `showtext` 패키지 웹폰트를
사용해서 다양한 한글도 사용할 수 있다. `showtext` 패키지는
`font_add_google()` 함수를 통해서 구글 한글폰트를 지정하여 이를 `ggplot`
에 적용시킬 수 있다.

```{r}
#| warning: false
#| message: false
#| echo: true
library(tidyverse)
library(showtext)
library(palmerpenguins)

font_add_google("Nanum Pen Script", "nanum_pen_script")
font_add_google("Jua", "Jua")
showtext_auto()

theme_quarto <- theme(
  text = element_text(family = 'Jua', size = 25),
  plot.title.position = 'plot',
  plot.title = element_text(
    family = 'nanum_pen_script', size = 55,
    face = 'bold', 
    colour = thematic::okabe_ito(8)[3],
    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = "mm")
  ),
  plot.subtitle = element_text(
    family = 'Jua', size = 25,
    face = 'bold', 
    colour = thematic::okabe_ito(8)[5],
    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "mm")
  )
  
)

theme_set(theme_minimal() + theme_quarto)

mass_flipper <- ggplot(data = penguins,
                       aes(x = flipper_length_mm,
                           y = body_mass_g,
                           color = species)) +
  geom_point(size = 3,
             alpha = 0.8) +
  labs(title = "팔머 관측소 LTER 서식 펭귄 크기",
       subtitle = "Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량",
       x = "물갈퀴 길이(Flipper length) (mm)",
       y = "체질량(Body mass) (g)")

mass_flipper
```

## 표

문서에 표를 넣게 되면 정보를 효과적으로 요약할 뿐만 아니라 가독성을
높이는 중요한 커뮤니케이션 도구 중 하나다. 마크다운(Markdown), `gt`
패키지, 라텍는 자료를 표 형식으로 표현할 때 각각의 장점이 있다.
마크다운은 기본적이며 간단한 방법으로, 복잡한 설치나 추가 패키지 없이도
빠르게 내용에 충실한 기본표를 작성할 수 있다. `gt` 패키지는 그래프
문법을 참고하여 표문법을 충실히 준수하며 데이터에 기반한 표제작에 필요한
거의 모든 기능을 제공한다. 라텍는 가장 전문적인 표를 만들 수 있는
도구로, 논문이나 학술 자료에 적합한 고품질의 표를 제작하는데 유용하다.

![표제작 세가지 방식](images/table_three.jpg)

### 마크다운 표 {#rmarkdown-kable-table}

`mtcars` 데이터프레임에서 시연목적으로 관측점 5개와 열 4개를 뽑아내서
`kable()`함수에 넣고 출력형식을 `markdown`으로 지정한다.
`markdown`외에도 `html`, `pandoc`, `latex`, `rst`등으로 출력형식을
지정할 수 있다.

::: columns
::: {.column width="45%"}
```{r}
#| label: knitr-kable-table
#| eval: false
library(tidyverse)
library(knitr)

mtcars %>% 
  sample_n(5) %>% 
  select(mpg, cyl, disp) %>% 
  kable("markdown")
```
:::

::: {.column width="5%"}
:::

::: column
```{r}
#| echo: false
library(tidyverse)
library(knitr)

mtcars %>% 
  sample_n(5) %>% 
  select(mpg, cyl, disp) %>% 
  kable("markdown")
```
:::
:::

### `gt` {#rmd-gt}

그래프 문법(grammar of graphics)처럼 표 문법(grammar of table)
[`gt`](https://github.com/rstudio/gt/) 팩키지가 등장했다. 표를 분해하면
다음과 같고 이를 `tibble` 혹은 데이터프레임을 입력받아 GT 객체로
변환시킨 후에 GT 표를 HTML로 출력하는 작업흐름을 갖는다.

```{r}
#| label: gt-image
#| eval: false
#| echo: false
webshot2::webshot("https://gt.rstudio.com/", selector = "#main > div:nth-child(3) > p > img", "images/gt-concept.png")
```

![표 해부도](images/gt_parts_of_a_table.svg)

`gt` 팩키지에 내장된 `exibble` 데이터셋은 $8 \times 9$ 구조를 갖는
단순한 데이터셋이지만 표와 관련된 다양한 형태를 개발에 사용할 주요한
정보를 담고 있다. [^components-1]

[^components-1]: [Richard Iannone (2020-04-08), "Great Looking Tables:
    gt
    (v0.2)"](https://blog.rstudio.com/2020/04/08/great-looking-tables-gt-0-2/)

::: columns
::: {.column width="45%"}
```{r}
#| label: rmd-gt-taste-dataset
#| eval: false
library(gt)

mtcars %>% 
  sample_n(5) %>% 
  select(mpg, cyl, disp) %>% 
  gt() |> 
  tab_header(
    title = md("**mtcars** 데이터셋 표"),
    subtitle = md("디지털 글쓰기 `gt` 패키지")
  ) %>%
  tab_source_note("표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자")
```
:::

::: {.column width="5%"}
:::

::: column
```{r}
#| echo: false
library(gt)

mtcars %>% 
  sample_n(5) %>% 
  select(mpg, cyl, disp) %>% 
  gt() |> 
  tab_header(
    title = md("**mtcars** 데이터셋 표"),
    subtitle = md("디지털 글쓰기 `gt` 패키지")
  ) %>%
  tab_source_note("표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자")
```
:::
:::

### 라텍 표

라텍은 수식 뿐만 아니라 복잡하고 미려한 표도 코드를 통해 제작할 수
있다. 쿼토에서 라텍 표를 제작하기 위해서는 먼저 표제작을 위한
라텍 표코드를 준비하고, GitHub에서 팬독-필터
[tarleb/parse-latex](https://github.com/tarleb/parse-latex)를 다음
명령어로 설치한다.

``` bash
$ quarto install extension tarleb/parse-latex
```

쿼토 확장팩이 설치되면 YAML에 다음과 같이 `parse-latex`을 등록하여
사용한다.

``` yaml
---
filters:
  - parse-latex
---
```

::: columns
::: {.column width="45%"}
```{latex}
\begin{table}[h]
\centering
\begin{tabular}{|l|c|c|c|}
\hline
Car Model & mpg & cyl & disp \\
\hline
Lotus Europa & 30.4 & 4 & 95.1 \\
Merc 230 & 22.8 & 4 & 140.8 \\
Fiat 128 & 32.4 & 4 & 78.7 \\
Pontiac Firebird & 19.2 & 8 & 400.0 \\
Merc 450SL & 17.3 & 8 & 275.8 \\
\hline
\end{tabular}
\caption{mtcars 데이터셋}
\end{table}
```
:::

::: {.column width="5%"}
:::

::: column
```{=latex}
\begin{table}[h]
\centering
\begin{tabular}{|l|c|c|c|}
\hline
Car Model & mpg & cyl & disp \\
\hline
Lotus Europa & 30.4 & 4 & 95.1 \\
Merc 230 & 22.8 & 4 & 140.8 \\
Fiat 128 & 32.4 & 4 & 78.7 \\
Pontiac Firebird & 19.2 & 8 & 400.0 \\
Merc 450SL & 17.3 & 8 & 275.8 \\
\hline
\end{tabular}
\caption{mtcars 데이터셋}
\end{table}
```
:::
:::

### 표 제작 사례

펭귄 데이터를 기반으로 `gt` 패키지를 사용하여 표 제목, 칼럼명, 셀값에
다양한 글꼴, 크기, 색상, 굵기를 적용한 사례가 @tbl-gt-penguins 에 코드로
나와 있다. 미국 웨스 앤더슨 영화 색상(`Darjeeling1`)을 표에 적용하고,
글꼴로 웹글꼴 구글 글꼴을 활용하여 `gt` 패키지로 다양한 글꼴을 적용하고,
`fmt_integer()` 함수를 사용해서 숫자 가독성을 높이기 위해 천단위
구분자를 넣고 부가적인 디자인도 표에 적용한다.

```{r}
#| label: tbl-gt-penguins
#| tbl-cap: "글꼴, 색상, 서식을 반영한 표 제작 사례"
library(gt)

basic_theme <- function(data, ...){
  data %>% 
    tab_options(
      column_labels.background.color = "#F98400",
      table.font.size = px(12),
      column_labels.font.size = px(20),
      row.striping.background_color = "#F2AD00",
      heading.align = "left",
      heading.title.font.size = px(30)
  )
}

palmerpenguins::penguins %>% 
  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %>% 
  slice_sample(n = 10) %>% 
  gt() %>% 
    tab_header(title = md("팔머 펭귄 표본 **10 마리** 측정 정보")) %>% 
    tab_source_note(source_note = "데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집") %>% 
    cols_label(bill_length_mm = "부리 길이 (mm)",
               body_mass_g    = "체질량 (g)") %>% 
  tab_style(
    style = cell_text(
      font = c(
        google_font(name = "Nanum Pen Script"),
        default_fonts()
      ),
      size = "xx-large",
      color = "gray35",
      weight = "bolder"
    ),
    locations = cells_body(columns = bill_length_mm)
  ) %>% 
  # 체질량 칼럼  ---------------
  tab_style(
    style = cell_text(
      font = c(
        google_font(name = "Black Han Sans"),
        default_fonts()
      ),
      size = "large",
      color = "#00A08A",
      weight = "bolder"
    ),
    locations = cells_body(columns = body_mass_g)
  ) %>% 
  fmt_integer(body_mass_g) |> 
  # 표 Header 와 첫번째 칼럼  ---------------
  tab_style(
    style = cell_text(
      font = google_font("Do Hyeon"), 
      size = "large"
    ),
    locations = list(
      cells_column_labels(everything()), 
      cells_body(columns = 1)
    )
  ) %>%   
  # 표 제목 ---------------
  tab_style(
    style = cell_text(
      font = google_font("Dokdo"), 
      align = "left", 
      size = "xx-large",
      color = "#FF0000"
    ),
    locations = cells_title("title")
  ) %>%   
  basic_theme() 

```

## 다이어그램

```{mermaid}
graph LR

    chatGPT["챗GPT"] --> Contents

    subgraph Contents["디지털 글쓰기"]
        direction LR
        Writing["글감"] --> Table["표"]
        Writing --> Graph["그래프"]
        Writing --> Code["파이썬/R/SQL<br>코드"]
        Writing --> Figure["그림"]
        Writing --> Diagram["도형"]        
    end

    chatGPT --> Format
    Contents --> Format

    subgraph Format["구조와 외양"]
        direction LR
        Theme["구조와 외양"] --> Title["문서 구조"]
        Theme               --> Formatting["문서 서식"]
        Theme               --> Layout["문서 레이아웃"]
        Theme               --> reference["문서 참조"]
    end

    chatGPT --> Deployment
    Format --> Deployment

    subgraph Deployment["배포와 공유"]
        direction LR
        Deploy --> Reader["독자(사람)"]
        Deploy --> Author["독자(저작자)"]
        Deploy --> Machine["독자(기계)"]
    end


    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px
    style Contents fill:#059fff,stroke:#333,stroke-width:1px
    style Format fill:#fc0303,stroke:#333,stroke-width:1px
    style Deployment fill:#03fc30,stroke:#333,stroke-width:1px
```

## 보고서

데이터 사이언스 한글 출판 문서 제작을 위해서 다음 글꼴을 선택한다.
제목으로 산스 세리프 폰트로 구글 폰트에서 "노토 산스 세리프"를 선정하고,
본문은 눈누 웹사이트에서 "마루부리"를 선정하고 코딩 글꼴 폰트로 눈누에서
`D2Coding` 폰트를 지정한다.

-   산스 세리프(제목): Noto Sans Serif
-   세리프(본문): 마루부리
-   등간격(코딩): D2Coding

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false

library(tidyverse)

mass_flipper <- ggplot(data = penguins,
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(size = 3,
             alpha = 0.8) +
  theme_minimal() +
  labs(title = "팔머 관측소 LTER 서식 펭귄 크기",
       subtitle = "Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량",
       x = "물갈퀴 길이(Flipper length) (mm)",
       y = "체질량(Body mass) (g)") +
  theme_minimal()

```

### css 파일

출판문서 제작에 사용된 글꼴 관련 사항을 `css/quarto-fonts.css` 파일에
지정해둔다.

```{css}
/* 글꼴 */
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');

@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR');

@import url('https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap');

@font-face {
    font-family: 'MaruBuri-Regular';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'D2Coding';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_three@1.0/D2Coding.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

/* HTML */

h1, h2, h3, h4, h5, h6 {
  font-family: "Noto Sans KR", sans-serif;
}

body {
  font-family: "Nanum Myeongjo", "MaruBuri-Regular", "Noto Serif KR", serif;
  font-size: 15px;
}

tt, code, pre {
  font-family: "D2Coding", Consolas, monospace;
  font-size: 15px;
}
```

## 수식

### LaTeX를 이용한 수학적 표현

수학은 공학, 물리학, 컴퓨터 과학, 경제학 등 다양한 분야에서 중심 역할을
하는 학문으로 정확하고 명료한 수학적 표기는 매우 중요하다. 라텍은
수학적 표현을 깔끔하고 정확하게 표현할 수 있는 도구 중 하나로 라텍를
이용해 다양한 수학적 표현법을 살펴보자.

라텍은 기본적인 사칙연산에서부터 지수, 삼각함수, 적분, 행렬, 그리스
문자, 무한대 등 광범위한 수학적 표현이 가능하여 전문가 느낌의 문서나
논문, 프레젠테이션에 즉시 적용할 수 있는 고급스럽고 미련한 수식표현이
가능하다.

기본적인 덧셈과 뺄셈은 `\begin{equation} a + b = c \end{equation}`처럼
표현할 수 있고, 복잡한 적분도
`\begin{equation} \int_{0}^{\infty} e^{-x^2} dx = \frac{\sqrt{\pi}}{2} \end{equation}`와
같이 명료하게 표현할 수 있을 뿐만 아니라, 행렬이나 그리스 문자도
`\begin{pmatrix} a & b \\ c & d \end{pmatrix}`와
`\alpha, \beta, \gamma, \Gamma, \pi, \Pi, \phi, \Phi, \mu` 등의 명령어를
통해 표현할 수 있다.

<!-- ### 기본 연산자와 수 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- a + b = c -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- a + b = c -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 제곱근과 지수 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \sqrt{a^2 + b^2} = c -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \sqrt{a^2 + b^2} = c -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 삼각함수 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \sin^2 \theta + \cos^2 \theta = 1 -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \sin^2 \theta + \cos^2 \theta = 1 -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 적분 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \int_{0}^{\infty} e^{-x^2} dx = \frac{\sqrt{\pi}}{2} -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \int_{0}^{\infty} e^{-x^2} dx = \frac{\sqrt{\pi}}{2} -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 행렬 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \begin{pmatrix} -->
<!-- a & b \\ -->
<!-- c & d -->
<!-- \end{pmatrix} -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \begin{pmatrix} -->
<!-- a & b \\ -->
<!-- c & d -->
<!-- \end{pmatrix} -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 그리스 문자 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \alpha, \beta, \gamma, \Gamma, \pi, \Pi, \phi, \Phi, \mu -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \alpha, \beta, \gamma, \Gamma, \pi, \Pi, \phi, \Phi, \mu -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 무한대 -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \lim_{{n \to \infty}} \frac{1}{n} = 0 -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \lim_{{n \to \infty}} \frac{1}{n} = 0 -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

<!-- ### 합과 곱 -->

<!-- `MathJax`에서 줄바꿈(`\\`)이 반영되지 않아 `aligned`를 사용했지만, -->
<!-- `MathJax` v4 에서 기능이 구현되어 구문이 훨씬 간결해질 것으로 보인다. -->

<!-- ::: columns -->
<!-- ::: column -->
<!-- ``` tex -->
<!-- \begin{equation} -->
<!-- \begin{aligned}[t] -->
<!-- \sum_{n=1}^{\infty} \frac{1}{n^2} = \frac{\pi^2}{6} \\ -->
<!-- \prod_{i=1}^{n} a_i = a_1 \times a_2 \times \cdots \times a_n -->
<!-- \end{aligned}  -->
<!-- \end{equation} -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: column -->
<!-- $$ -->
<!-- \begin{equation} -->
<!-- \begin{aligned}[t] -->
<!-- \sum_{n=1}^{\infty} \frac{1}{n^2} = \frac{\pi^2}{6} \\ -->
<!-- \prod_{i=1}^{n} a_i = a_1 \times a_2 \times \cdots \times a_n -->
<!-- \end{aligned}  -->
<!-- \end{equation} -->
<!-- $$ -->
<!-- ::: -->
<!-- ::: -->

이 외에도 라텍로 더 복잡한 수식표현도 얼마든지 가능하다.

## 참고문헌

라텍 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 `xelatex`
명령을 사용하여 원본 라텍 코드를 컴파일하면 `.aux`와 `.log` 파일이
생성되고, `biber` 또는 `bibtex` 명령을 실행하여 참고문헌 정보를
처리하면서 `.bbl` 및 `.blg` 파일이 생성된다. 그 다음 다시 `xelatex`을 두
번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이
생성된다.

```{mermaid}
graph LR;
    style A fill:#f9d71c,stroke:#333,stroke-width:2px;
    style B fill:#42f5e6,stroke:#333,stroke-width:2px;
    style C fill:#f542e9,stroke:#333,stroke-width:2px;
    style D fill:#42f54b,stroke:#333,stroke-width:2px;
    style E fill:#f54242,stroke:#333,stroke-width:2px;

    A[LaTeX<br>소스코드] -->|xelatex| B{.aux,<br> .log}
    B -->|biber <br> bibtex| C{.bbl,<br> .blg}
    C -->|xelatex| D{.aux,<br> .log,<br>.pdf}
    D -->|xelatex| E[PDF]

```

### `.bib` 파일

`.bib` 파일은 BibTeX "서지 데이터베이스"로 쿼토, R마크다운, 주피터
노트북, 라텍 문서에서 참고문헌을 관리하는 데 사용된다. `.bib` 파일은
다양한 참고문헌(예: 논문, 책, 인터넷 자료 등)에 대한 메타데이터를 담고
있는데 제목, 저자, 출판일 등의 정보가 담겨있다.

라텍으로 작성한 `.tex` 소스파일을 `references.bib` 서지 파일과
연결시켜 컴파일하여 `.pdf` 파일로 작업한다. 한가지 여기서 다루지 않는
사항으로 `.csl` 파일이 있다. `.cls`는 인용 스타일 언어(Citation Style
Language) 파일로 XML 형식으로 작성되며, 참고문헌 서식규칙을 정의한다.
학술지, 출판사마다 각기 다른 참고문헌 스타일을 요구하기 때문에, `.csl`
파일에 다양한 스타일을 표현하다. 따라서, 참고문헌 콘텐츠가 담긴 `.bib`
파일과 참고문헌 스타일이 담긴 `.cls` 두파일이 멋진 참고문헌 출력을 위해
짝꿍처럼 함께 다닌다.

다음 라텍 저작 파일은 서지 데이터가 담긴 `references.bib` 파일에
`Kim2017`과 `xie2020r` 두 개의 참고문헌이 들어있다.

라텍 문서는 `biblatex` 패키지를 사용하여 이 `references.bib` 파일을
불러오고, `\cite` 명령어로 특정된 참고문헌을 인용한다. 참고문헌 목록은
`\printbibliography[title=참고문헌]` 명령어 출력되는데 `title` 옵션으로
참고문헌목록 제목을 "References"에서 "참고문헌"으로 변경하고 라텍
문서에서 인용된 참고문헌을 기본설정 `.csl`에 맞춰 출력한다. 만약, 특정
참고문헌 스타일을 반영하고자 한다면 라텍 파일에 `.csl` 파일을
지정하면 된다.

::: columns
::: {.column width="45%"}
#### `.tex` 소스파일

``` tex
\documentclass{oblivoir}

% 한글 글꼴 적용 ---------------------------
\usepackage{fontspec}
\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함

% 참고문헌 설정 ----------------------------
\usepackage[backend=biber, style=numeric]{biblatex} % bibtex을 백엔드로 설정
\addbibresource{references.bib}

\begin{document}
    
    \section{서론}
    텍과 관련된 교육 현장에서의 활용에 대한 연구가 있습니다~\cite{Kim2017}. 
    또한, R markdown에 대한 다양한 정보와 사용법이 소개된 책도 있습니다~\cite{xie2020r}.
    
    \printbibliography[title=참고문헌]
    
\end{document}
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
#### `.bib` 서지 파일

``` bibtex
@article{Kim2017,  
    author = {김영록},  
    title = {교육 현장에서의 텍의 활용},  
    journal = {TeX: 조판, 그 이상의 가능성},  
    year = {2017}
}

@book{xie2020r,  
    title={R markdown cookbook},  
    author={Xie, Yihui and Dervieux, Christophe and Riederer, Emily},  
    year={2020},  
    publisher={CRC Press}
}
```
:::
:::

![서식파일 참고문헌](images/bibtex_reference.jpg){fig-align="center"
width="635"}

### 영문 참고문헌

한글이 포함된 PDF 문서를 작성할 때 디버깅은 생각보다 복잡할 수 있다.
따라서 대개는 문서 기본 구조를 영어로 먼저 정확히 작동하는지 확인한 후,
한글로 전환하여 개발을 진행한다. 아래 라텍 문서 예시에서 전체적인
내용을 파악하기 쉽도록 `lipsum` 패키지로 텍스트를 채웠으며, 2단 편집과
참고문헌 관리 기능을 구현했다. `biblatex` 패키지와
`\addbibresource{references.bib}` 명령어를 사용하여 참고문헌파일을
지정하고, 본문에서 `\cite` 명령어를 통해 참고문헌을 인용했다. 마지막으로
`\printbibliography` 명령어로 참고문헌 목록을 출력했다.

::: columns
::: {.column width="55%"}
``` tex
\documentclass[twocolumn]{article}
\usepackage{lipsum} % lipsum 패키지 불러오기

% 참고문헌
\usepackage[backend=biber]{biblatex}
\addbibresource{references.bib}

% 문서 전문
\title{Two-Sided Lipsum Example}
\author{John Lee}
\date{\today}


\begin{document}    
    
    \maketitle
    
    \section{Introduction}
    
    This is a citation~\cite{dummy2023}.
    \lipsum[11] % 첫 번째 로렘 입숨 문단 생성  
    
    \section{Main Body}
    \lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성
    
    \section{Conclusion}
    This is a book citation~\cite{ipsum2021}.
    \lipsum[4] % 4번째 로렘 입숨 문단 생성

\printbibliography
    
\end{document}
```
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
![영문 참고문헌 사례](images/pdf_english_reference.jpg)
:::
:::

### 국문 참고문헌

영문으로 작성한 작업 흐름을 그대로 이용할 수 있지만, 몇 가지 수정이
필요하다. 첫째, 영문 채우기 텍스트 패키지 `ipsum`을 `jiwonlipsum`으로
변경하여 한글 텍스트로 국문 문서임을 명확히 구성한다. 둘째, 라텍에서
한글 글꼴을 적용하지 않으면 한글 표현이 깨지거나 전혀 출력되지 않을 수
있으므로, 한글 글꼴 적용 절차를 포함한다. 참고문헌 부제목이 영문
'Reference'에서 '참고문헌'으로 변경하여 기본적인 한글문서 외양을
확인한다.

::: columns
::: {.column width="55%"}
``` tex
\documentclass[twocolumn]{oblivoir}

% 한글 글꼴 적용 ---------------------------
\usepackage{fontspec}
\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함

% 채우기 텍스트 입숨 적용 ------------------
\usepackage{jiwonlipsum}

% 참고문헌 설정 ----------------------------
\usepackage[backend=biber, style=numeric]{biblatex} % biber 백엔드로 설정
\addbibresource{references.bib}


% 문서의 제목, 저자, 날짜 설정
\title{한글 입숨 예제}
\author{홍길동}
\date{\today}

\begin{document}    
    
    \maketitle
    
    \section{서론}
    
    참고문헌을 연구를 했습니다.~\cite{kim2023}
    \jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.
    
    \section{본문}
    또 영문 참고문헌 보고서를 연구했습니다.~\cite{ipsum2021}
    \jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.
    
    \section{결론}
    마지막 연구했습니다.~\cite{lee2021}
    \jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.
    
    \printbibliography[title=참고문헌]
    
\end{document}
```
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
![한글 참고문헌 사례](images/pdf_korean_reference.jpg)
:::
:::

## 판형

종이 크기는 다양한데 우리나라는 국제 표준인 ISO A형(A4 등 A 계열)을
채택하고 있는데 제조 효율에서는 표준으로 설계된 크기인 ISO A형이
활용성과 효율이 가장 좋은 것으로 알려져 있다. A형 전지는 A0로 표기하며
이를 접어서 절단할 때마다 숫자를 늘려 표기한다. A1은 한번 접어서 자른
크기이며, 흔히 사용하는 A4는 A0를 네 번 접어서 자른 종이 크기다.

A계열로 일명 A0판이라고 부르는 841`*`1189mm 종이를 가로 세로로
접어가면서 자르는 방식으로 A4는 A1을 8조각으로 자른 것이다. '국배판'으로
불리는 A4판(210`*`297mm)은 학습지 등 문제풀이나 필기가 필요한 서적에
주로 사용되고, 신국판으로 불리는 A5판의 변형본은 148`*`210mm인 A5보다
약간 큰 152`*`225mm 으로 한국 출판계에서 가장 흔한 사이즈다.

B계열은 JIS B규격으로써 4`*`6전지나 B0이라고 부르는 1030`*`1456mm 종이를
가로 세로로 접어가면서 자르는 방식으로 A4와 마찬가지로 B4는 B1을
8조각으로 자른 것이다. 소설, 자서전, 전문서적에는 신국판(152`*`225mm)을
많이 사용하고, 46배판은 B5(16절) 182 x 257(4x6배판)과 같은 크기로 대학
전공서적 등에 주로 사용된다.

::: {#fig-paper-size layout="[[45,-5,45]]"}
![](images/paper_A0.png)

![](images/paper_B0.png)

종이크기(A0, B0)
:::

