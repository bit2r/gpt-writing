[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 디지털 글쓰기",
    "section": "",
    "text": "1 글쓰기\n글쓰기는 언어와 문자(Writing System) 언어와 문자 체계를 활용해 생각, 지식, 감정을 표현하는 창의적 과정이다. 글쓰기는 시각적 형태로 기록되어 말하기와 달리 시간과 공간의 제약을 받지 않는다. 과거 물리적 매체에 담겨 후대에 전달됨에 따라 일부 손상과 유실을 피할 수 없었다. 하지만, 현재는 다양한 디지털 문서 형태로 손실 없이 전달할 수 있게 되었다.\n글쓰기는 단순한 문장 구성을 넘어서 사회, 문화, 과학, 기술까지 다양한 분야에서 중추적 역할을 수행한다. 법률 문서와 계약서를 작성하여 사회적 규칙과 약속을 명확히 하고, 과학기술 지식을 문서화하여 현대 문명 발전을 촉진하고, 글쓰기는 교육과 학문에서 지식과 정보의 전달 및 공유 수단으로 세대 간 지식 전승했다. 문화와 예술 분야에서는 창의적 글쓰기가 감정과 생각을 표현하는 동시에 사람들을 연결하는 다리 역할을 했고 심리와 정신 건강 분야에서는 자기 반성과 성찰을 통한 개인의 성장과 치유에도 글쓰기가 활용되고 있다.\n이러한 다양한 역할을 넘어서, 글쓰기 목적과 형태도 지속적으로 발전하고 있다. 정보 전달, 감정 표현, 이야기 전달 등 기존 목적을 넘어서, 글쓰기는 수학과 과학 저작을 위한 TeX / LaTeX 같은 수식 표현도 포함되고, 더 나아가, 최근에 기계와 의사소통을 위한 프로그래밍 언어도 글쓰기의 범주에 포함되고 있다. 교육용 파이썬이나 통계와 데이터 과학, 그리고 과학기술 저작을 위한 R 언어와 같은 프로그래밍 언어들이 글쓰기의 새로운 영역으로 빠르게 편입되고 있다.\n현대 글쓰기의 특징 중 하나로 디지털 전환과 연결성을 꼽을 수 있고 그 중심에 인터넷과 웹의 출현이 있다. 인터넷이 전 세계 컴퓨터를 거대한 하나의 네트워크로 연결시켰다면, 웹은 인터넷 위에서 작동하는 정보 공간을 열었다. 인터넷과 웹은 글쓰기를 통한 커뮤니케이션을 글로벌 수준으로 확장시킴으로써 저자와 독자 사이 시공간적 제약을 크게 줄여, 다양한 문화와 언어 뿐만 아니라 그 이전 세대에서 경험하지 못한 정보와 지식의 융합을 가져왔으며, 실시간으로 정보를 주고받을 수 있어 신속한 글쓰기 측면도 크게 부각됐다.\n과거 글쓰기 매체가 주로 종이에 기반했다면, 웹의 출현은 웹사이트, 블로그, 소셜 미디어(SNS) 등 다양한 플랫폼에서 글을 작성하고 공유할 수 있게 되면서 독자가 저자에게 직접 피드백을 줄 수 있는 인터랙티브한 환경도 제공함에 따라 글쓰기는 단방향적인 정보 전달에서 양방향적인 대화로 빠르게 진화했다. 텍스트가 종이 매체에서 주류를 형성했다면, 웹이 바꾼 글쓰기 생산과 소비환경은 이미지, 비디오, 오디오, 데이터, 그래프, 다이어그램, 표, 코드 등 다양한 요소를 통합하여 글을 작성하는 새로운 방식이 가능해졌다.\n과거 글쓰기가 주로 물리적 매체, 즉 종이와 펜으로 대표되는 인쇄기술에 크게 의존해서 시간과 공간의 제약을 받았지만, 디지털 글쓰기 등장으로 이러한 제약과 위험은 크게 줄어들었다. 디지털 글쓰기는 웹사이트, 블로그, 소셜 미디어 등 다양한 플랫폼에서 텍스트, 이미지, 비디오, 오디오, 데이터 등 다양한 형태의 정보를 통합적으로 전달할 수 있고, 인터넷을 통해 전 세계 어디서든 접근하고 수정하고 공동저작할 수 있게 되었다.\n디지털 글쓰기 발전은 인공지능 기술의 급속한 성장과도 밀접하게 연결되어 있다. 프로그래밍 언어를 통한 코딩은 이제 기계와의 상호 커뮤니케이션을 위한 새로운 형태의 글쓰기로 간주되고 있다. 글쓰기는 단순한 정보 전달이나 감정 표현을 넘어, 고도화된 현대 사회의 기술적, 사회적, 제도적 인프라를 구축하고 유지하는 데에 필수적인 역할을 하고 있기 때문에 글쓰기 없이는 현대 사회의 복잡한 시스템과 그것을 지탱하는 기술이 존재할 수 없으며, 따라서 글쓰기는 현대 사회 생존에 있어서 불가결한 요소라고 할 수 있다."
  },
  {
    "objectID": "index.html#문서로-보는-민주주의",
    "href": "index.html#문서로-보는-민주주의",
    "title": "챗GPT 디지털 글쓰기",
    "section": "\n1.1 문서로 보는 민주주의",
    "text": "1.1 문서로 보는 민주주의\n글쓰기는 권력분립와 민주주의 체계에서 중요한 역할을 하고 있으며, 인공지능의 부상이 현체계를 더욱 복잡하게 만들지만 동시에 새로운 가능성도 열고 있다. 따라서, 챗GPT로 촉발된 인공지능 사회에서 글쓰기 중요성은 더욱 강조될 수 빡에 없다.\n삼권분립 원리는 국가의 권력을 입법, 사법, 행정으로 나누어 각기 다른 역할을 수행하게 함으로써 권력의 독점과 남용을 방지한다. 이 원리는 국민의 권리와 자유를 보장하는 국가 조직의 핵심 원칙으로, 인류 사회가 발전하면서 다양한 형태로 구현되어 왔다. 삼권분립 원리에서 글쓰기는 중추적인 역할을 차지하고 있다. 입법권은 법률을 ’작성’하고, 행정권은 법률을 ’실행’하며, 사법권은 법률을 ’해석’한다. 이 모든 과정은 문서와 글쓰기에 근간을 두고 있어, 글쓰기는 삼권분립 체계를 원활하게 작동시키는 뼈대라고 할 수 있다.\n최근 인공지능(AI)의 급속한 발전은 삼권분립 체계에 깊은 영향을 미치고 있다. 입법 분야에서 인공지능이 복잡한 법률 문서의 작성과 데이터 분석을 통한 새로운 법률의 필요성을 예측하고 있으며, 사법 분야에서는 판례 분석과 법률 문서 해석에 있어 뛰어난 능력을 보여, 판사와 변호사의 의사결정 과정을 적극적으로 지원하고 있다. 행정 분야에서는 인공지능이 정책 결정에 필요한 데이터 분석을 통해 통찰력을 제공하고, 코딩은 기계와 상호 커뮤니케이션 촉진함으로써 행정 서비스 효율성을 높이고, 국민에게 더 나은 서비스를 제공하도록 기여하고 있다.\n인공지능의 부상은 삼권분립 체계에서 각 분야의 작동 방식을 혁신적으로 변화시키며, 민주주의와 국가 운영에 새로운 가능성을 제시하고 있으나 항상 기술 발전은 윤리적, 사회적 측면에서도 신중한 검토가 필요하다. 인공지능의 결정 과정이 투명하지 않거나 데이터에 편향이 있을 경우, 민주주의 원칙에 위배되는 결과를 초래할 수 있어 문제점을 신중하게 검토하고 해결책을 마련하고 도입을 추진해야 된다.\n\n\n글쓰기와 삼권분립"
  },
  {
    "objectID": "index.html#글쓰기-역사",
    "href": "index.html#글쓰기-역사",
    "title": "챗GPT 디지털 글쓰기",
    "section": "\n1.2 글쓰기 역사",
    "text": "1.2 글쓰기 역사\n점토판과 쐐기를 이용한 문자 작성에서 시작하여 중세시대에는 동양에서는 붓과 머루를, 서양에서는 잉크와 새깃털펜을 사용해 저작을 했다. 타자기의 발명은 개인 저작을 가능하게 만들었고, 전동타자기의 등장은 문서 작성의 비용을 절감하고 품질을 향상시키며 출판 과정을 신속화했다. 제2차 세계대전 이후에는 군용 애니악(ENIAC) 컴퓨터가 민간에 보급되어 IBM이 1964년에 워드 프로세서를, 1969년에 저장 장치를 시장에 출시했다. 이로써 기계식 저작 방식에서 디지털 저작 방식으로 전환의 기반이 마련되었다. 1980년대 전후로 마이크로소프트 워드 1.0, 워드 퍼펙트, 아래한글과 같은 위지윅(WYSIWYG) 방식이 일반인에게 큰 인기를 끌었다면, 문서를 구조적으로 작성하여 컴파일하는 위지윔(WYSIWYM) 방식의 TeX / LaTeX 이 비슷한 시기에 과학기술 전문가들 사이에 자리를 잡아갔다.\n\n\n글쓰기 저작도구 진화과정\n\n\n1.2.1 문서 저작 패러다임\n아래한글이나 MS 워드 같은 워드 프로세서는 위지위그(WYSIWYG: What You See Is What You Get) 방식을 기반으로 한다. 이 방식은 화면에 보이는 서식이 입혀진 텍스트가 최종 출력물과 동일하게 나오는 직관적인 특성을 가진다. 이러한 장점 덕분에 타자기나 컴파일을 필요로 하는 다른 문서 저작 방식에 비해 경쟁력을 보이며 문서 저작의 주류 소프트웨어로 자리잡았다.\n반면, 위지윔(WYSIWYM: What You See Is What You Mean) 방식의 대표적인 예는 LaTeX(레이텍)이다. 이 방식은 구조화된 형태로 문서를 작성한 후 컴파일을 통해 출판 가능한 PDF 파일을 생성한다. LaTeX의 주요 장점은 수식, 그래프, 표 등 다양한 구성요소를 미려하게 표현할 수 있다는 것이다. 또한, “문학적 프로그래밍(literate programming)” 패러다임을 통해 텍스트와 코드를 함께 담을 수 있고 위지위그 방식 워드프로세서 보다 문서가 복잡할수록 진가를 보여준다.\n\n\n문서 저작 패러다임\n\n최근 문서저작 도구의 패러다임은 눈에 띄는 변화를 겪고 있다. 과거에는 일반 사용자를 위한 위지위그(WYSIWYG)와 과학기술 전문가를 위한 위지윔(WYSIWYM)이라는 두 가지 주요 패러다임으로 문서저작 도구가 명확하게 구분되었다. 그러나 최근에는 챗GPT가 촉발한 생성형 AI 기술이 위지위그 패러다임에 본격적으로 도입되어, 워드프로세서부터 엑셀, 파워포인트, 데이터베이스, 프로그래밍, 그리고 멀티미디어 저작까지 다양한 분야에서 발전이 가속화되고 있다. 위지윔 패러다임도 마크다운, 팬독(pandoc), R/Python, LaTeX 엔진 등 단위기술 발전과 함께 생성형 AI기술이 적극 반영된 RStudio, 주피터, VS코드와 같은 통합개발환경(IDE)의 발전을 통해 두 패러다임 경계가 점차 흐릿해지고 있다.\n문서저작의 복잡성이 증가함에 따라 재현성, 추적성, 협업, 코딩, 버전 제어, 자동화, 생산성이 중요한 저작 요소로 부상하고 있다. 이러한 복잡한 문서저작 문제에 대한 해결책으로 문학적 프로그래밍 패러다임이 주목받고 있다.\n\n1.2.2 문서 도구 역사\n사람과 의사소통하는 텍스트와 기계와 의사소통하는 프로그래밍 언어를 작성하는 방식은 서로 다르다. 텍스트는 문서를 작성하고, 프로그래밍 언어는 코드를 작성한다는 점에서 차이가 있지만, 모두 문서를 작성한다는 점에서 공통점이 있다. 문서 작성과 코드 통합은 오래 전부터 컴퓨터 과학과 데이터 과학에서 중요한 주제였다. 그 결과 다양한 해법이 제시되고 도구도 개발되었다.\n도널드 크누쓰 교수가 1978년 수식이 포함된 과학문서 작성에 특화되어 TeX를 개발하였고, 1984년 문학적 프로그래밍 개념을 제안하면서 텍스트와 코드를 섞어 문서와 프로그램을 동시에 작성할 수 있다는 것을 최초로 선보였다. 1985년에 레슬리 램포트가 TeX을 기반으로 LaTeX을 개발하여 수학과 과학 분야에서 널리 사용되는 문서저작 도구로 자리잡았다. (Knuth, 1984; Spivak, 1990) \n1988년에 울프람 박사가 매쓰매티카 노트북(Mathematica Notebooks)을 개발하여 수학과 과학 연구를 위한 고급 작업 환경을 제공했지만 한동안 특별한 도구나 개념의 진전은 없었지만 2000년대 들어서면서 2001년에 페르난도 페레즈가 파이썬 대화하여 IPython을 개발했고, 2003년에 이맥스(Emacs) 텍스트 편집기에서 동작하는 작업 관리 및 문서 작성 도구인 이맥스 Org-mode를 개발했다. 2004년에 존 그루버가 웹 문서를 쉽게 작성하고 표현할 수 있는 경량 마크업 언어 마크다운(Markdown)을 공개했다. 2006년부터 본격적으로 팬독(Pandoc) 개발이 시작되면서 다양한 마크업 언어 간 자유로운 변환이 가능하게 되었다. \n페르난도 페레즈는 2011년 파이썬 기반 iPython Notebook을 개발했고, 곧 이어 2012년 R 기반 knitr 개발이 본격화되었다. 2014년에 페르난도 페레즈가 다시 한번 다양한 프로그래밍 언어를 지원하는 주피터 프로젝트(Project Jupyter)를 주도하고 있으며, 2020년 RStudio로 잘 알려진 포짓(Posit) J.J. 알레어 대표가 과학기술 문서 작성과 데이터 과학에 특화된 쿼토(Quarto)를 개발하여 지속적으로 새로운 기능을 선보이고 있다.\n\n\n\n\n\n\n\n\nKnuth, D. E. (1984). Literate Programming. Comput. J., 27(2), 97–111. https://doi.org/10.1093/comjnl/27.2.97\n\n\nSpivak, M. (1990). The Joy of TeX, a Gourmet Guide to Typesetting with the AmSTeX Macro Package: A Gourmet Guide to Typesetting with the AMS-TEX Macro Package. American Mathematical Soc."
  },
  {
    "objectID": "dw_website.html#project-setup",
    "href": "dw_website.html#project-setup",
    "title": "21  웹사이트와 블로그",
    "section": "21.1 프로젝트 생성",
    "text": "21.1 프로젝트 생성\n쿼토(quarto) 설치하고 정적 웹사이트 제작을 위한 프로젝트를 준비한다. 문서로 웹사이트 개발을 위한 RStudio IDE를 통합개발환경으로 선택한 경우 File → New Project ... → Project Type 에서 Quarto Website를 선택한다.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 21.1: (정적) 웹사이트 프로젝트 선택과정\n\n\n다음 단계로 웹사이트가 담길 디렉토리를 지정하고 웹사이트 디렉토리를 생성하고 Create Project 버튼을 를 클릭한다. 쿼토 웹사이트 프로젝트가 생성되면 웹사이트 제작을 위한 기본 골격이 제시된다. _quarto.yml 파일에 웹사이트 기본 정보가 담겨지고 각 웹페이지는 index.qmd, about.qmd 파일로 저작한다.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 21.2: 쿼토 웹사이트 프로젝트 생성"
  },
  {
    "objectID": "dw_website.html#project-writing",
    "href": "dw_website.html#project-writing",
    "title": "21  웹사이트와 블로그",
    "section": "21.2 웹사이트 저작",
    "text": "21.2 웹사이트 저작\n문서의 구조를 정의하는 _quarto.yml 파일에 웹사이트 문법을 적용하여 웹페이지는 .qmd 파일, 외양은 .css 혹은 .scss 파일에 정리한다. 관련하여 웹사이트를 구성하는 이미지, 동영상, 소리를 비롯한 각종 자산(assets)도 웹페이지에 잘 담기도록 저작한다.\n쿼토 웹사이트 프로젝트는 웹사이트 기본골격을 다음 파일과 디렉토리를 통해 제공된다. _site/ 디렉토리는 쿼토 웹사이트를 컴파일하게 되면 자동 생성된다. _site/ 디렉토리에 index.qmd 파일을 컴파일한 index.html 파일을 비롯한 정적 웹사이트 저작을 위한 각종 파일과 디렉토리로 채워진다.\n쿼토 웹사이트를 컴파일하는 방식은 Ctrl + Shift + K 단축키를 누르거나, 상단 Render 버튼을 클릭하거나, CTRL + SHIFT + B 단축키를 누르거나, Build에 Render Website를 클릭한다.\n\n_quarto.yml\nindex.rmd\nabout.rmd\n_site/\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 21.3: 로컬 웹사이트 컴파일\n\n\n_site/ 디렉토리는 정적 웹사이트가 배포되는 디렉토리로,\n기본적으로 http://netlify.com/를 상정한 경우 _site/를 사용하지만, docs/로 바꿔주게 되면 GitHub Pages 웹호스팅으로 사용하여 배포할 수 있게 된다. GitHub Pages 배포를 위해 _quarto.yaml 파일에 output-dir: docs을 추가하게 되면 정적 웹사이트가 _docs 폴더에 담기게 된다.\n요약하면 _quarto.yml 파일을 열어 output_dir: 설정이 없는 경우 output_dir: docs로 지정하고, 이미 존재하는 경우 output_dir: 값을 _site → docs으로 변경한다. 그리고 나서 쿼토 웹사이트를 빌드시키면 웹사이트 전체가 docs/ 디렉토리에 저장된다. 이것을 GitHub 저장소에 업로드하거나 push 해서 올리게 되면 블로그 웹사이트가 https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html을 통해 배포된다.\n\n\nproject:\n  type: website\n\n\n\nproject:\n  type: website\n  output-dir: docs"
  },
  {
    "objectID": "dw_website.html#theme-distill",
    "href": "dw_website.html#theme-distill",
    "title": "21  웹사이트와 블로그",
    "section": "21.3 외양 - 폰트, 색상 등",
    "text": "21.3 외양 - 폰트, 색상 등\n지금까지 전반적인 웹사이트 생성과 웹페이지 콘텐츠 작성과 관련된 전반적인 작업흐름에 집중했다면 글꼴, 색상 등 외양을 바꾸면 근사한 웹사이트로 탈바꿈시킬 수 있다. 특히 쿼토는 부츠트랩 5(Bootstrap 5)를 지원하기 때문에 SCSS 변수 설정을 통해 멋진 웹사이트를 꾸밀 수 있다.\n글꼴만 한글로 바꿔 tidyverse.css를 저장한다. 기본 아이디어는 구글 글꼴 웹사이트 https://fonts.google.com/ 에서 한글 글꼴을 가져와서 웹사이트 제목과 텍스트에 글꼴을 저작자의 선택에 맞춰 반영한다. 수정한 tidyverse.css 파일 일부는 다음과 같다.\n@import url('https://fonts.googleapis.com/css2?family=Sunflower');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n@import url('https://fonts.googleapis.com/css2?family=Gaegu');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Sunflower', sans-serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       'Noto Sans KR', sans-serif;\n  --navbar-font:     'Gaegu', cursive;\n}"
  },
  {
    "objectID": "dw_website.html#deployment-setup",
    "href": "dw_website.html#deployment-setup",
    "title": "21  웹사이트와 블로그",
    "section": "21.4 웹사이트 배포",
    "text": "21.4 웹사이트 배포\n\n21.4.1 GitHub Pages 출판\nhttps://&lt;사용자명&gt;.github.io/ 저장소는 매우 특별한 GitHub 저장소다. 따라서, GitHub 저장소 명칭을 &lt;사용자명&gt;.github.io 으로 생성해야 한다. 예를 들어, statkclee.github.io 와 같이 사용자계정을 github.io와 붙여 먼저 판다. 그리고 나서, 상단 Settings로 들어간 다음 GitHub Pages 설정을 한다. 이때 GitHub 저장소의 특정 디렉토리 docs/ 디렉토리에 담긴 내용 전부가 정적 웹사이트에 게시되는 내용이 된다. 즉, docs/index.html → https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html로 바뀌어 웹사이트 생성 및 배포가 완료된다.\n\n\n\n정적 웹사이트 GitHub Pages 연결\n\n\n\n\n21.4.2 Quarto Pub 출판\nQuarto Pub 출판과정은 Quarto CLI를 통해 이뤄진다. RStudio의 내부 터미널을 사용하는 것을 권장하는데, 이유는 RStudio와 Quarto가 잘 통합되어 있어, 간편하게 출판 작업을 진행할 수 있기 때문이다. 1\n#| eval: false\n$ quarto publish quarto-pub\n? Authorize (Y/n) › \n❯ In order to publish to Quarto Pub you need to\n  authorize your account. Please be sure you are\n  logged into the correct Quarto Pub account in \n  your default web browser, then press Enter or \n  'Y' to authorize.\n첫번째 출판하게 되면 인증작업을 수행하고 나면 _publish.yml 파일이 하나 생성된다.\n#| eval: false\n- source: project\n  quarto-pub:\n    - id: 1fa3ab1f-c010-453a-aaf2-f462bd074a66\n      url: 'https://quartopub.com/sites/statkclee/quarto-ds'\n이제 모든 준비가 되었기 때문에 다음 명령어로 작성한 출판 문서를 포함한 웹사이트를 로컬에서 미리 확인 한 후에 Quarto Pub으로 전자출판한다. 윈도우에서는 RStudio 내부 Terminal CLI를 사용하는 것을 권장한다.\n#| eval: false\n$ quarto preview\n$ quarto publish quarto-pub"
  },
  {
    "objectID": "dw_website.html#블로그",
    "href": "dw_website.html#블로그",
    "title": "21  웹사이트와 블로그",
    "section": "21.5 블로그",
    "text": "21.5 블로그"
  },
  {
    "objectID": "chatGPT.html#생성형-ai",
    "href": "chatGPT.html#생성형-ai",
    "title": "\n24  챗GPT\n",
    "section": "\n24.1 생성형 AI",
    "text": "24.1 생성형 AI\n\n24.1.1 JPEG 압축\n챗GPT는 웹의 무수한 데이터를 학습한 하나의 압축저장소로 볼 수 있다. 압축을 풀게되면 원본을 정확히 복원할 수 있는 경우도 있지만, 그렇지 않은 경우도 불가피하게 존재한다(Chiang, 2023) .\n챗GPT는 “웹의 흐릿한 JPEG”라는 비유로 설명된다. JPEG 기술은 손실 압축 기술로, 무손실 압축 기술인 PNG와 대조된다. 흐릿한 이미지가 선명하지 않거나 정확하지 않은 것처럼, 챗GPT 역시 항상 완벽한 답변을 제공하거나 모든 질문을 정확히 이해하는 것은 아니다. 그러나 사용자와의 상호작용을 통해 지속적인 학습을 통해 개선되고 있다. 더 많은 사람들이 챗GPT를 사용하면 할수록, 그만큼 더 정교하게 사람의 언어를 이해하고 대화할 수 있는 기술로 발전하게 된다.\n챗GPT를 비롯한 유사 인공지능(AI)이 너무 강력해져 인간을 대체할 것이라는 우려도 있지만, 챗GPT는 결국 인간의 작업을 더 쉽고 효율적으로 수행할 수 있는 강력한 도구에 불과하기 때문에, 인간을 능가하거나 지배할 가능성은 거의 없다. 챗GPT 즉, 인공지능을 책임감 있고 윤리적으로 사용하는 것은 결국 가계, 기업, 정부, 우리 모두의 책임이다.\n챗GPT가 간단한 사칙연산 계산에서 어려움을 겪는 것은 웹에 퍼져 있는 숫자 계산 데이터를 기반으로 학습하여 계산을 모방할 뿐이기 때문이다. 만약 사칙연산에 대한 일반적 원칙을 제대로 이해한다면, 웹에서 발견되는 사칙연산 문제뿐만 아니라 다른 계산 문제도 정확히 해결할 수 있지만 현재로는 그렇지 못하기 때문에 플러그인(Plugin)을 통해 해결하고 있다.\n\n\nJPEG와 PNG 비교\n\n자료출처: WHAT’S THE DIFFERENCE BETWEEN JPEG AND PNG: BEGINNER GUIDE\n\n24.1.2 기초모형\n기초모형(Foundation Model)이라는 새로운 패러다임은 인공지능(AI) 시스템 구축에 혁신적인 변화를 가져왔다. 이러한 모델은 광범위한 데이터에 대해 사전에 학습되어 있어, 다양한 실무하위 작업에 적용할 수 있는 범용성을 가지고 있다. BERT, GPT-3, CLIP 등이 대표적인 예로, 이들 모델은 텍스트, 이미지, 음성 등 다양한 형태의 데이터에 대한 처리가 가능하다.\n기초모형의 등장은 기존의 특정 작업에 특화된 모델을 개발하는 방식을 넘어, 하나의 모델로 여러 작업을 수행할 수 있는 새로운 접근법을 제시한다. 이로 인해, 모델 개발과 학습에 드는 비용과 시간이 크게 절감되며, 더 빠르고 효율적인 AI 시스템 구축이 가능해진다.\n또한, 기초모형은 미세조정(fine-tuning)을 통해 특정 작업에 적합하게 만들 수 있다. 이는 기초모형이 가진 범용성을 더욱 강화하며, 실무하위 작업에 대한 성능도 향상시킨다. 예를 들어, BERT 모델은 자연어 처리 작업에, CLIP 모델은 이미지와 텍스트를 연결하는 작업에 미세조정을 통해 효과적으로 활용될 수 있다.\n이러한 기초모형의 패러다임은 AI의 미래를 크게 밝혀준다. 다양한 분야와 작업에서 활용될 수 있는 이러한 모델은 AI 기술의 적용 범위를 더욱 확장시키며, 그 가능성을 무궁무진하게 만든다. 이는 결국 AI가 사회와 산업의 다양한 분야에서 더욱 깊게 활용될 수 있음을 의미한다.\n\n\n기초 모형"
  },
  {
    "objectID": "chatGPT.html#거대언어모형-데이터",
    "href": "chatGPT.html#거대언어모형-데이터",
    "title": "\n24  챗GPT\n",
    "section": "\n24.2 거대언어모형 데이터",
    "text": "24.2 거대언어모형 데이터\n\n24.2.1 인터넷 데이터\nGPT 모델 개발에 있어 언어 데이터는 중요한 자원으로 위키백과 Languages used on the Internet 페이지에서 웹사이트 제작에 사용된 언어 비중을 살펴보는 것은 챗GPT를 이해하는데 도움이 된다. 2023년 9월 16일 기준 위키백과에 따르면, 영어(English)가 웹사이트 제작에 가장 많이 사용되는 언어로, 비중이 53.3%에 달한다. 이는 영어 중심으로 GPT 모델이 개발된 이유를 잘 설명한다. 그 다음으로 스페인어(Spanish)가 5.3%, 러시아어(Russian)가 4.7%, 독일어(German)가 4.5%, 프랑스어(French)가 4.3%로 이어진다. 아시아 언어 중에서 일본어(Japanese)가 4.0%로 가장 높은 비중을 차지하며, 중국어(Chinese)는 1.4%, 한국어(Korean)는 0.7%로 나타난다\n\n\n인터넷 콘텐츠 상위 언어별 통계\n\n\n24.2.2 GPT-3 훈련 데이터\nGPT-3 언어모형 데이터셋 구성을 살펴보면, 영어 문서수가 약 2억 3천만개로 전체의 93.7% 압도적으로 높은 비중을 차지하여 GPT-3 언어모형 학습 데이터가 주로 영어로 구성되어 있음을 의미하며, 이로 인해 영어에 대한 처리 능력이 뛰어날 가능성이 높다. 다음으로 많은 언어는 독일어와 프랑스어로, 각각 전체의 1.2%와 1.02%를 차지하지만 영어와 언어적 유사성이 다른 문화권 언어보다 높아 처리 능력이 높을 것으로 기대할 수 있다.\n아시아 언어로 일본어와 중국어가 상위에 랭크되어 있다. 일본어는 약 61만 9천 5백 82개의 문서로 전체의 0.246%를, 중국어는 약 29만 2천 9백 76개의 문서로 0.116%를 차지한다. 한국어는 48,852개의 문서로 전체의 0.0194%를 차지해 GPT-3가 한국어에 대한 처리 능력이 다른 언어와 비교하여 상대적으로 떨어질 수 있음을 시사한다.\n\n\nGPT-3 언어모형 개발에 사용된 언어별 문서 통계"
  },
  {
    "objectID": "chatGPT.html#거대언어모형",
    "href": "chatGPT.html#거대언어모형",
    "title": "\n24  챗GPT\n",
    "section": "\n24.3 거대언어모형",
    "text": "24.3 거대언어모형\n언어모형이 시간이 지남에 따라 크기가 커져 거대언어모형(Large Language Models, LLMs)이 언어모형을 지칭하는 용어로 자리를 잡아가고 있다. 특히 트랜스포머(Transformer) 기반 사전 훈련된 언어 모형(Pre-trained Language Models, PLMs)은 모형 크기를 확장하면 성능이 향상되고, 특정 규모를 초과하면 거대언어모형에서는 작은 언어모형에서 볼 수 없는 특별한 능력을 발현함을 증명했다. (Zhao 기타, 2023)\n\n\n거대언어모형(LLM)\n\n2023년 3월에 발표된 조사에서 10억 이상 패러미터를 가진 거대언어모형이 공개형(Open Source), 폐쇄형(Closed Source)으로 나눠진다. 공개형 거대언어모형은 연구자나 개발자가 자유롭게 접근하여 모형 내부 구조를 이해하거나 수정할 수 있어, 커뮤니티 발전을 촉진하고 다양한 응용 분야에서 활용될 수 있지만 폐쇄형 거대언어모형에 비해 성능이 떨어진다. 반면에 폐쇄형 거대언어모형은 상업적 이익을 목적으로 개발되어 내부 알고리즘에 대한 접근이 제한되지만, 공개형 거대언어모형에 비해 더 뛰어난 성능을 보인다.\n학술연구 목적으로 거대언어모형을 사용하려는 경우 공개형 모형이 더 유용할 수 있지만 상업적 활용에서는 폐쇄형 모형이 더 뛰어난 성능을 보이기 더 적합할 수 있다. 거대언어모형이 사회, 정치, 경제, 문화 등 다양한 분야에 영향을 미칠 수 있기 때문에, 거대언어모형 공개여부는 윤리적, 정치적, 사회적 영향을 평가하는 데도 중요한 잣대가 된다.\n\n24.3.1 NLP 활용\n거대언어모형은 자연어처리 분야에서 다양한 응용을 가능하게 한다. 특히 텍스트 생성, 기계번역, 질의응답, 요약, 감정분석, 텍스트 분류, 텍스트 유사도 측정 등의 응용이 가능하다.\n자연어 처리(NLP)는 텍스트 데이터를 통해 가치를 창출하는 분야에서 중요한 역할을 수행한다. 과거 감정 분석, 텍스트 분류, 개체명 인식(NER) 등 다양한 자연어 처리 작업을 각각 독립적으로 수행하면서 중복되고 파편화된 작업 흐름이 발생했다. 예를 들어, 텍스트 분류 작업을 수행한 후에 감정 분석을 별도 작업으로 수행해야 할 경우, 공통으로 필요한 텍스트 전처리나 피처 추출 과정이 중복된다.\n이러한 문제를 해결하기 위해 자연어 처리 작업들을 통합적으로 설계하고 연결하는 것이 중요했다. 텍스트 분류 모형이 특정 주제(예: 스포츠, 정치)에 대한 텍스트를 분류한 후, 해당 주제에 맞는 감정 분석을 적용하거나, 개체명 인식(NER)을 통해 특정 인물이나 조직의 이름을 식별한 후, 이를 기반으로 텍스트 요약이나 질의 응답 시스템을 구축하는 방식이 거대언어모형 출현 이전 많이 사용된 방식이다.\n감정 분석, 텍스트 분류, 개체명 인식(NER), 품사(POS) 태깅, 의존성 구문 분석, 기계 번역, 질의 응답, 텍스트 요약, 상호참조해결(Coreference Resolution), 텍스트 생성 등 자연어 처리 작업은 거대언어모형 등장과 함께 한차원 높은 성능 향상을 경험하고 있다. 또한, 기초모형을 활용한 파인튜닝과 프롬프트 공학의 결합으로, 과거 각각의 작업에 특화된 모델을 따로 개발하고 훈련해야 했던 방식과는 대비되고 있다.\n\n감정 분석: 긍정, 부정, 중립 등 주어진 텍스트에 표현된 감정을 파악.\n텍스트 분류: 텍스트 데이터를 미리 정의된 클래스 또는 주제(예: 스포츠, 정치, 연예 등)로 분류.\n개체명 인식(NER): 텍스트 내에서 사람, 조직, 위치, 날짜 등의 명명된 개체(entity)를 식별하고 분류.\n품사(POS) 태깅: 주어진 텍스트의 단어에 문법적 레이블(예: 명사, 동사, 형용사)을 할당.\n의존성 구문 분석: 문장 내 단어 간의 문법 구조와 관계를 식별.\n기계 번역: 영어에서 스페인어로 또는 중국어에서 프랑스어로와 같이 한 언어에서 다른 언어로 텍스트를 번역.\n질의 응답: 자연어로 제기된 질문을 이해하고 답변할 수 있는 시스템을 개발.\n텍스트 요약: 주요 아이디어와 정보를 보존하면서 주어진 텍스트에 대한 간결한 요약을 생성.\n상호참조해결(Coreference Resolution): 텍스트에서 두 개 이상의 단어나 구가 동일한 개체 또는 개념을 지칭하는 경우 식별.\n텍스트 생성: 주어진 입력, 컨텍스트 또는 일련의 조건에 따라 일관되고 의미 있는 텍스트를 생성.\n\n24.3.2 NLP 기계학습\n자연어처리(NLP) 기계학습은 통계모형과 거의 비슷한 작업흐름을 갖는다. 차이점이 있다면 데이터 관계의 설명보다 예측에 더 중점을 둔다는 점이라고 볼 수 있다. 감성 분석 및 텍스트 분류 등 텍스트를 데이터로 하는 전통적인 자연어 처리 작업은 다음과 같은 작업흐름을 갖게 된다.\n먼저, 데이터 수집 단계에서 분석할 텍스트 데이터를 수집한다. 소셜 미디어, 웹사이트, 뉴스 기사 등 다양한 출처에서 데이터를 가져온다. 데이터 전처리 단계에서는 텍스트를 정제하고 필요한 형태로 변환하는데 불필요한 문자나 단어를 제거하고, 텍스트를 토큰화한다.\n특성(Feature) 추출 단계에서는 텍스트 데이터에서 기계학습에 사용될 유용한 특성을 추출한다. 단어 빈도수, TF-IDF 값, 단어 임베딩 등을 예로 들 수 있으며 이렇게 추출된 특성은 기계학습에 사용된다.\n기계학습 단계에서는 추출된 특성을 기반으로 분류나 회귀예측 모형을 학습한다. 기계학습모형은 텍스트가 어떤 범주에 속하는지, 어떤 감정을 표현하는지 등을 예측하는 데 사용된다. 기계학습모형 평가 단계에서는 시험 데이터를 사용해 모형성능을 평가한다.\n거대언어모형의 등장은 앞선 기계학습 작업흐름에 큰 변화를 가져왔다. 특성 추출과 기계학습 단계를 통합함으로써 자연어 처리 작업 복잡성이 크게 줄어 단순해졌지만 성능은 오히려 향상되는 결과를 가져왔다.\n\n\n\n\n\n\ngraph TD\n    A[데이터 수집] --&gt; B[데이터 전처리]\n    B --&gt; C[피쳐 추출]\n    C --&gt; D[훈련-테스트 데이터셋 분할]\n    D --&gt; E[모형 선택]\n    E --&gt; F[모형 학습]\n    F --&gt; G[모형 평가]\n    G --&gt; H[하이퍼파라미터 튜닝]\n    H --&gt; I[모형 배포]\n    I --&gt; J[모니터링 및 유지보수]\n\n\n\n\n\n\n\n데이터 수집: 텍스트 데이터와 해당 레이블이 포함된 데이터셋을 수집한다. 감성 분석의 경우, 라벨은 ‘긍정’, ‘부정’ 또는 ’중립’이 되고, 텍스트 분류의 경우 레이블은 다양한 주제나 카테고리를 나타낼 수 있다. 즉, 자연어 처리 목적에 맞춰 라벨을 특정하고 연관 데이터를 수집한다.\n데이터 전처리: 텍스트 데이터를 정리하고 전처리하여 추가 분석에 적합하도록 작업하는데 소문자화, 토큰화, 불용어 제거, 특수문자 제거, 어간 단어 기본형으로 줄이기 등이 포함된다.\n피쳐 추출:사전 처리된 텍스트를 기계 학습 알고리즘에 적합한 숫자 형식으로 변환하는 과정으로 BoW, TF-IDF, 단어 임베딩 등이 흔히 사용되는 기법이다.\n훈련-시험 데이터셋 분할: 일반적으로 70-30, 80-20 또는 기타 원하는 분할 비율을 사용하여 데이터셋을 훈련과 시험 데이터셋으로 구분한다.\n모형 선택: 적합한 통계, 머신 러닝, 딥러닝 모델을 선정한다.\n모형 학습: 적절한 최적화 알고리즘과 손실 함수를 사용하여 훈련 데이터셋에서 선택한 모델을 학습시킨다.\n모형 평가: 정확도, 정밀도, 리콜, F1 점수 또는 ROC 곡선 아래 영역과 같은 관련 메트릭을 사용하여 시험 데이터셋에서 학습 모형의 성능을 평가한다.\n하이퍼파라미터 튜닝: 격자 검색 또는 무작위 검색과 같은 기술을 사용하여 모형의 하이퍼파라미터를 최적화하여 성능을 개선한다.\n모형 배포: 모형을 학습하고 최적화한 후에는 실제 환경에서 사용할 수 있도록 실제 운영 환경에 배포하여 가치를 창출한다.\n모니터링 및 유지 관리: 배포된 모형의 성능을 지속적으로 모니터링하고 필요에 따라 새로운 학습데이터로 업데이트하여 정확성과 효율성을 유지한다."
  },
  {
    "objectID": "chatGPT.html#gpt-4-성능과-가격",
    "href": "chatGPT.html#gpt-4-성능과-가격",
    "title": "\n24  챗GPT\n",
    "section": "\n24.4 GPT-4 성능과 가격",
    "text": "24.4 GPT-4 성능과 가격\nGPT-4는 대규모 멀티 모달(Multi Modal) 언어모형으로 트랜스포머(Transformer) 기반 사전훈련되어 텍스트에서 다음 토큰을 생성하는 생성형 AI다. 이전 버전 GPT-3.5와 비교하여 더 뛰어난 성능을 보이며 멀티 모달을 지원하여 컴퓨터와 여러가지 형태(텍스트, 이미지 등)로 의사소통하는 채널을 통해 상호작용할 수 있다.\n\n24.4.1 GPT-4 성능\nGPT-4는 인공지능 성장과 능력을 객관적으로 평가하기 위해 다양한 시험과 평가를 수행한다. 모형의 언어 이해, 문제 해결 능력, 논리적 추론 등 다양한 능력을 측정하여 결과를 반영한다. Advanced Placement (AP), AMC 10, AMC 12와 같은 시험들은 원래 학생들의 지식과 능력을 측정하기 위해 만들어졌지만, 인공지능이 시험을 풀게함으로써 GPT-4 능력을 객관적으로 평가할 수도 있다. 시험을 통해, 인공지능이 어려운 문제를 얼마나 효과적으로 해결할 수 있는지, 또 다양한 주제와 문맥에서 어떻게 작동하는지 평가 결과를 통해 객관적으로 확인할 수 있다.\nAdvanced Placement (AP)는 미국 College Board에 의해 운영되는 프로그램으로 고등학생에게 대학 수준의 교육 과정과 평가를 제공한다. 높은 점수를 얻은 학생은 미국의 다양한 대학에서 학점 인정을 받을 수 있다. 고등학생은 AP를 통해 고등학교 재학기간 동안 대학 수준의 학업을 경험하고, 학점을 얻을 수 있는 기회가 제공된다.\nAMC 10은 미국 수학 협회가 주관하는 수학 대회이며, 미국기준 10학년 이하의 학생을 대상으로 한다. 고등학교 교육 과정 중 10학년까지 수학문제를 다루며, 미국에서 국제 수학 올림피아드 (IMO)에 참가하는 팀을 선발하는 일련의 시험 중 첫번째 시험이다.\nAMC 12도 마찬가지로 미국 수학 협회가 주관하는 수학 대회로 12학년 이하 학생들을 대상으로 하며, 고등학교 전체 교육 과정을 다루지만, 미적분학은 제외된다. AMC 12는 AMC 10과 함께 국제 수학 올림피아드 (IMO) 참가 팀을 선발하기 위한 시험 중 하나이다.\nGPT-4는 다양한 시험에서 이전 GPT-3.5보다 전반적으로 높은 성능을 보였다. 법률, 대학 입학 시험, 과학 시험 등에서 특히 뛰어난 결과를 보였지만 코딩 능력에 대한 시험에서는 상대적으로 낮은 성능을 보였다.\n특히 미국 변호사 시험(Uniform Bar Exam)에서 상위 10% 점수를 얻어 GPT-3.5보다 훨씬 나아졌고, LSAT과 SAT 같은 대학 입학 시험에서도 상위 20% 이상 점수를 기록했다. 대학원 입학 시험인 GRE에서 수리영역(Quantitative)과 언어영역(Verbal) 부분에서 상위를 차지했고, 과학 관련 시험인 USABO와 USNCO에서도 높은 백분위를 기록했다. 의학 지식을 평가하는 자가 평가 프로그램(Medical Knowledge Self-Assessment Program, MK-SAP)에서는 75% 점수를 얻었다.\n코딩 능력을 평가하는 코드포스(Codeforces)와 리트 코드(Leetcode)에서 상대적으로 낮은 점수를 보였지만, 대부분의 AP 시험에서 상위 20% 이상의 높은 점수를 얻었고 소믈리에 관련 시험에서도 이론 지식 부분에서 77% ~ 92% 사이 점수를 얻었다. (OpenAI, 2023)\n\n\n\n\n\n\n\nGPT-4 성능\n    \n\nOpenAI GPT-4 Technical Report\n    \n\n\n      gpt_4\n      gpt_3_5\n    \n\n\n\n법\n    \n\nUniform Bar Exam (MBE+MEE+MPT)\n298 / 400 (~90th)\n213 / 400 (~10th)\n\n\nLSAT\n163 (~88th)\n149 (~40th)\n\n\n수능\n    \n\nSAT Evidence-Based Reading & Writing\n710 / 800 (~93rd)\n670 / 800 (~87th)\n\n\nSAT Math\n700 / 800 (~89th)\n590 / 800 (~70th)\n\n\n대학원\n    \n\nGraduate Record Examination (GRE) Quantitative\n163 / 170 (~80th)\n147 / 170 (~25th)\n\n\nGraduate Record Examination (GRE) Verbal\n169 / 170 (~99th)\n154 / 170 (~63rd)\n\n\nGraduate Record Examination (GRE) Writing\n4 / 6 (~54th)\n4 / 6 (~54th)\n\n\n고등 경진대회\n    \n\nUSABO Semifinal Exam 2020\n87 / 150 (99th - 100th)\n43 / 150 (31st - 33rd)\n\n\nUSNCO Local Section Exam 2022\n36 / 60\n24 / 60\n\n\n헬스케어\n    \n\nMedical Knowledge Self-Assessment Program\n75 %\n53 %\n\n\n코딩\n    \n\nCodeforces Rating\n392 (below 5th)\n260 (below 5th)\n\n\nLeetcode (easy)\n31 / 41\n12 / 41\n\n\nLeetcode (medium)\n21 / 80\n8 / 80\n\n\nLeetcode (hard)\n3 / 45\n0 / 45\n\n\nAP 시험\n    \n\nAP Art History\n5 (86th - 100th)\n5 (86th - 100th)\n\n\nAP Biology\n5 (85th - 100th)\n4 (62nd - 85th)\n\n\nAP Calculus BC\n4 (43rd - 59th)\n1 (0th - 7th)\n\n\nAP Chemistry\n4 (71st - 88th)\n2 (22nd - 46th)\n\n\nAP English Language and Composition\n2 (14th - 44th)\n2 (14th - 44th)\n\n\nAP English Literature and Composition\n2 (8th - 22nd)\n2 (8th - 22nd)\n\n\nAP Environmental Science\n5 (91st - 100th)\n5 (91st - 100th)\n\n\nAP Macroeconomics\n5 (84th - 100th)\n2 (33rd - 48th)\n\n\nAP Microeconomics\n5 (82nd - 100th)\n4 (60th - 82nd)\n\n\nAP Physics 2\n4 (66th - 84th)\n3 (30th - 66th)\n\n\nAP Psychology\n5 (83rd - 100th)\n5 (83rd - 100th)\n\n\nAP Statistics\n5 (85th - 100th)\n3 (40th - 63rd)\n\n\nAP US Government\n5 (88th - 100th)\n4 (77th - 88th)\n\n\nAP US History\n5 (89th - 100th)\n4 (74th - 89th)\n\n\nAP World History\n4 (65th - 87th)\n4 (65th - 87th)\n\n\n수학시험\n    \n\nAMC 103\n30 / 150 (6th - 12th)\n36 / 150 (10th - 19th)\n\n\nAMC 123\n60 / 150 (45th - 66th)\n30 / 150 (4th - 8th)\n\n\n소믈리에\n    \n\nIntroductory Sommelier (theory knowledge)\n92 %\n80 %\n\n\nCertified Sommelier (theory knowledge)\n86 %\n58 %\n\n\nAdvanced Sommelier (theory knowledge)\n77 %\n46 %\n\n\n\n\n\n\n\n24.4.2 로스쿨 입학시험\nGPT-4 LSAT(미국 로스쿨 입학 시험) 성적은 163으로, 대략 88번째 백분위에 해당되어 미국 로스쿨 대학별 입학점수1와 비교하면, 상위 10개 대학을 제외하고는 대부분의 로스쿨에 입학하는 데 큰 문제가 없을 것으로 보이기 때문에 GPT-4가 로스쿨 입학 시험을 잘 풀고 있다는 반증이다.\n반면에, GPT-3.5 LSAT 성적은 149로, 대략 40번째 백분위에 해당하여 GPT-4와 비교하면 상대적으로 낮아 대부분의 미국 로스쿨에 입학하기에는 충분한 실력을 갖췄다고 보기 어렵다.\nUniform Bar Exam(미국 변호사 자격증 시험)의 경우, GPT-4는 298/400으로 약 90번째 백분위 성적을 보이고 있어 변호사 자격증을 얻기 위한 충분한 실력을 보여주고 있지만, GPT-3.5는 213/400으로 GPT-4에 훨씬 미치지 못하고 있다.\n\n\n미국 변호사 입학시험 GPT-4 성능\n\n\n24.4.3 GPT-4 가격\n2023년 7월 기준으로 OpenAI API의 가격을 원화(1,300원)로 환산해 보면 여러 특징을 파악할 수 있다. GPT-4는 8K와 32K 컨텍스트(context)에서 1K 토큰당 각각 39원과 78원의 가격을 가지며, 이는 높은 성능과 대용량 처리 능력을 반영한 고가의 언어 모델이다. 반면에 GPT-3.5 터보는 4K와 16K 컨텍스트에서 1K 토큰당 3.9원과 5.2원의 비교적 저렴한 가격을 가지고 있으며, 이는 중간 수준의 성능을 가성비 좋게 제공한다.\n세부 튜닝 모형(Fine-tuning models)에는 Ada, Babbage, Curie, Davinci 등이 있으며, 이들은 특정 작업에 최적화되어 성능별로 다양한 가격대를 보인다. 특히 텍스트 임베딩에 특화된 Ada v2 모형은 1K 토큰당 0.13원으로 매우 저렴한 가격으로 제공된다.\n이미지 모형 DALL·E 시리즈는 이미지 크기에 따라 20.8원에서 26원 사이의 가격을 가지며, 텍스트 프롬프트에 따른 이미지 생성 작업에 사용된다. 오디오 모형 위스퍼(Whisper)는 분당 7.8원의 가격을 가지고 있으며, 다양한 언어 음성 오디오 처리 작업에 특화되어 있다.\n\n\nOpenAI API별 가격"
  },
  {
    "objectID": "chatGPT.html#가자-프롬프트-공학",
    "href": "chatGPT.html#가자-프롬프트-공학",
    "title": "\n24  챗GPT\n",
    "section": "\n24.5 가자 프롬프트 공학",
    "text": "24.5 가자 프롬프트 공학\n기계학습과 자연어 처리 분야에서는 시간이 지남에 따라 다양한 공학 기법이 등장하고 발전해왔다. 이러한 공학 기법들은 대체로 피처 공학, 아키텍처 공학, 목적 공학, 그리고 프롬프트 공학으로 구분할 수 있다. 각 기법은 특정 시기에 주목받았으며, 그에 따라 다양한 모델과 알고리즘이 개발되었다. 이러한 공학 기법들의 진화 과정을 살펴보면, 기계학습과 자연어 처리가 어떻게 발전해왔는지 이해할 수 있다.\n첫 번째로, 피처 공학의 시대는 대략 2015년까지 이어졌으며, 이 기간 동안 비신경망 지도학습이 주로 사용되었다. 이 단계에서는 수작업으로 특징(Feature)을 추출하고, 그 특징을 기반으로 SVM(Support Vector Machine)이나 CRF(Conditional Random Fields) 같은 비신경망 기계학습 모델을 학습시켰다. 이 방법은 당시에는 효과적이었지만, 수작업으로 특징을 추출하는 과정이 복잡하고 시간이 많이 소요되었다.\n두 번째로, 2013년부터 2018년까지는 아키텍처 공학이 주목받았다. 이 시기에는 신경망 지도학습이 대두되면서, 수작업으로 특징을 추출할 필요가 줄었다. 대신, 신경망 아키텍처를 설계하고 수정하는 작업이 중요해졌다. 예를 들어, 텍스트 분류 작업에는 CNN(Convolutional Neural Networks)이 주로 사용되었다. 이 단계에서는 아키텍처의 중요성이 강조되었으며, 사전학습된 언어 모델이나 임베딩 같은 얕은 특징도 사용되기 시작했다.\n마지막으로, 2017년부터 현재까지는 목적 공학과 프롬프트 공학이 주를 이루고 있다. 사전학습된 언어 모델을 사용하여 초기 모델을 설정하고, 목적함수를 엔지니어링하는 것이 이 단계의 특징이다. BERT와 같은 모델이 미세조정을 통해 다양한 작업에 적용되고 있다. 또한, 2019년부터는 프롬프트 공학이 두각을 나타내고 있으며, GPT-3와 같은 모델은 프롬프트를 통해 다양한 NLP 작업을 수행할 수 있다. 이 단계에서는 언어 모델에 대한 의존도가 높아져, 아키텍처나 특징 추출에 대한 부담이 줄어들었다. (Amatriain, 2023)\n\n\n\n\ngraph LR;\n    %% Styling\n    style A fill:#f9d79c,stroke:#f39c12,stroke-width:2px;\n    style B fill:#aed6f1,stroke:#3498db,stroke-width:2px;\n    style C fill:#d5f5e3,stroke:#27ae60,stroke-width:2px;\n    style D fill:#f5b7b1,stroke:#e74c3c,stroke-width:2px;\n\n    %% Subgraph for Feature Engineering\n    subgraph A[\"피처(Feature) 공학\"]\n        A1[\"패러다임: 비신경망 지도학습 &lt;br&gt;전성기: ~2015 &lt;br&gt;특징: 수작업 Feature, 비신경망 사용 &lt;br&gt;대표작: SVM, CRF\"]\n    end\n\n    %% Subgraph for Architecture Engineering\n    subgraph B[\"아키텍처 공학\"]\n        B1[\"패러다임: 신경망 지도학습 &lt;br&gt;전성기: 2013~2018 &lt;br&gt;특징: 신경망 의존, 네트워크 수정 필요 &lt;br&gt;대표작: 텍스트 분류에 CNN\"]\n    end\n\n    %% Subgraph for Objective Engineering\n    subgraph C[\"목적(Objective) 공학\"]\n        C1[\"패러다임: 사전학습, 미세조정 &lt;br&gt;전성기: 2017~현재 &lt;br&gt;특징: 사전학습 LLM 사용, 목적함수 공학 필요 &lt;br&gt;대표작: BERT → Fine Tuning\"]\n    end\n\n    %% Subgraph for Prompt Engineering\n    subgraph D[\"프롬프트 공학\"]\n        D1[\"패러다임: 사전학습, 프롬프트, 예측 &lt;br&gt;전성기: 2019~현재 &lt;br&gt;특징: LLM 전적 의존, 프롬프트 공학 필요 &lt;br&gt;대표작: GPT3\"]\n    end\n\n    %% Connections\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n\n\n\n\n\n\n\n\n\nAmatriain, X. (Xavi). (2023). Prompt Engineering 101 - Introduction and resources. Linkedin. https://www.linkedin.com/pulse/prompt-engineering-101-introduction-resources-amatriain/\n\n\nChiang, T. (2023). ChatGPT Is a Blurry JPEG of the Web - OpenAI’s chatbot offers paraphrases, whereas Google offers quotes. Which do we prefer? The New Yorker. https://www.newyorker.com/tech/annals-of-technology/chatgpt-is-a-blurry-jpeg-of-the-web\n\n\nMcGrath, R. (2013). The Pace of Technology Adoption is Speeding Up. Harvard Business Review. https://hbr.org/2013/11/the-pace-of-technology-adoption-is-speeding-up\n\n\nOpenAI. (2023). GPT-4 Technical Report. https://arxiv.org/abs/2303.08774\n\n\nZhao, W. X., Zhou, K., Li, J., Tang, T., Wang, X., Hou, Y., Min, Y., Zhang, B., Zhang, J., Dong, Z., Du, Y., Yang, C., Chen, Y., Chen, Z., Jiang, J., Ren, R., Li, Y., Tang, X., Liu, Z., … Wen, J.-R. (2023). A Survey of Large Language Models. https://arxiv.org/abs/2303.18223"
  },
  {
    "objectID": "prompt.html#채팅-인터페이스",
    "href": "prompt.html#채팅-인터페이스",
    "title": "25  프롬프트 공학",
    "section": "25.1 채팅 인터페이스",
    "text": "25.1 채팅 인터페이스\n챗GPT는 거대언어모형(GPT-3.5/GPT-4) AI 채팅 인터페이스를 통해 제공한다. 사용자는 좌측편에 나타나는 프롬프트 채팅 이력을 통해 이전 채팅 대화기록을 확인할 수 있다. 좌측 상단 ‘+ New Chat’ 버튼을 클릭하면 하단에 위치한 채팅 박스에서 ’Send a message …’라는 화면이 나타나고, 이곳에 새로운 메시지를 입력하여 거대언어모형과 프롬프트를 통해 대화를 시작할 수 있다. 채팅 인터페이스는 다른 인터페이스보다 사용자가 AI 언어모형과 의사소통을 원활하게 할 수 있다는 장점이 있다.\n\n\n\n\n\n\n프롬프트 명령 대기 상태\n\n\n\n \n\n\n\n\n명령 실행 결과\n\n\n\n그림 25.1: ?(caption)"
  },
  {
    "objectID": "prompt.html#프롬프트-안내지침",
    "href": "prompt.html#프롬프트-안내지침",
    "title": "25  프롬프트 공학",
    "section": "25.2 프롬프트 안내지침",
    "text": "25.2 프롬프트 안내지침\n프롬프트 공학은 AI 언어 모형과 효과적인 상호작용을 위한 중요한 과정으로 프롬프트를 설계할 때 고려해야 할 여러 구성 요소가 있는데, 프롬프트를 다음 지침을 준수하여 신중하게 선택하고 적용하면, AI 언어 모형을 통해 사용자 요구에 더 부합하는 답변을 받을 수 있다.\n\n명확성: 프롬프트는 명확하고 이해하기 쉬워야 한다. 즉, AI 언어모델이 혼동할 수 있는 전문 용어, 은어 또는 모호한 언어는 사용하지 않는다.\n맥락(Context): AI 언어모델이 해결해야 할 주제나 지시 업무를 파악하는 데 도움이 되는 충분한 맥락(Context)를 제공한다. 질문 혹은 요청과 관련된 배경 정보, 구체적인 세부 정보 또는 예시가 포함된다.\n구체성: AI 언어모델이 원하는 답변으로 안내할 수 있도록 프롬프트를 최대한 구체적으로 작성한다. 답변의 형식, 정보의 범위 또는 집중적으로 다루고 싶은 주제의 특정 측면을 지정하는 행위가 포함된다.\n모호성 제거: AI 언어모델이 질문을 오해하거나 관련 없는 답변을 제공할 가능성을 줄이려면 프롬프트에 모호성이 있는지 확인한다. 프롬프트가 여러 가지 의미로 해석될 수 있는 경우, 모호함이 없도록 프롬프트를 다시 작성한다.\n제약 조건: 단어 수 제한이나 주제의 특정 측면과 같은 제약 조건을 포함하면 AI 언어모델이 보다 집중적이고 관련성 높은 답변을 제공하도록 유도할 수 있다. 특히, 광범위한 주제에 대한 정보를 찾거나 간결한 답변을 찾을 때 유용하다.\n지시사항: AI 언어모델이 특정 작업을 수행하거나 특정 방식으로 동작하도록 하려면 프롬프트에 명시적인 지침을 포함한다. 예를 들어, AI에게 장단점을 나열하거나, 두 항목을 비교하거나, 특정 관점을 고려하도록 요청한다.\n문법과 철자: AI 언어모형이 수행 작업을 해석할 때 문법 정보를 사용하기 때문에 올바른 문법과 철자법을 맞게 작성하는 것은 중요하다."
  },
  {
    "objectID": "prompt.html#프롬프트-구성요소",
    "href": "prompt.html#프롬프트-구성요소",
    "title": "25  프롬프트 공학",
    "section": "25.3 프롬프트 구성요소",
    "text": "25.3 프롬프트 구성요소\n프롬프트 공학은 프롬프트를 매개로하여 사용자와 AI 언어모형과 효과적인 상호작용을 위한 중요한 역할을 수행한다. 잘 구성된 프롬프트는 언어모형이 정확하고 유용한 응답을 생성하는 데 큰 도움을 준다. 일반적으로 효과적인 프롬프트는 다음과 같은 구성요소를 포함한다.\n\n도입부: 프롬프트 시작 부분에서는 AI 언어모형에게 수행해야 할 작업에 대한 전반적인 맥락을 제공하여 언어모형이 작업을 정확하게 이해하고 적절한 응답을 생성하는 데 도움을 준다.\n작업(Task): AI 언어모형이 수행해야 할 작업을 명확하고 간결하게 지시한다. “텍스트를 요약하라” 또는 “텍스트 감정을 분석하라”와 같은 지시가 이에 해당한다.\n안내지침(Instruction): AI 언어모형이 텍스트를 생성할 때 따라야 할 지침을 하달한다. “요약할 때 중요한 핵심만 포함하라” 또는 “감정 분석 시 긍정과 부정을 명확하게 구분하라”와 같은 안내지침이 이에 해당한다.\n역할(Role): AI 언어모형이 수행해야 하는 역할을 명시한다. 언어모형이 데이터 과학자, 고객 서비스 대표, 심리상담사, 광고 마케터 역할을 수행해야 함을 역학을 부여하여 명확하게 전달한다.\n출력결과: 프롬프트는 원하는 출력 결과 형식을 명시한다. “답변은 목록 형태로 제공하라” 또는 “결과를 단락으로 구분하라”, “마크다운 표 형식으로 작성해라”와 같은 지침이 이에 해당한다.\n출력방식: 언어모형이 정보를 어떻게 전달할지에 대한 지침을 제공한다. 예를 들어, “숨을 깊이 들이쉬고 차분히 단계적으로 답변을 간결하게 작성해줘” 또는 “필요한 경우 예시를 들어 설명해줘” 등이 있다.\n\n\n\n\n프롬프트 구성요소\n\n\nAI 언어모형을 프롬프트 구성요소들을 적절히 조합하여 프롬프트를 작성하면 사용자 요구에 맞는 정확하고 유용한 텍스트를 생성할 수 있다.\n\n\n\n\n\n\n프롬프트: 다음 텍스트는 인공지능의 역사와 발전에 대한 내용을 담고 있다. 정보 분석가로서 중요한 포인트만을 포함하여 2~3문장으로 간결하게 요약하라.\n\n\n\n챗GPT 응답: 인공지능은 1950년대부터 시작되어 현재까지 다양한 분야에서 활용되고 있다. 최근에는 딥러닝 기술의 발전으로 더욱 빠른 성장을 이루고 있다라고 응답했다."
  },
  {
    "objectID": "prompt.html#프롬프트-작성사례",
    "href": "prompt.html#프롬프트-작성사례",
    "title": "25  프롬프트 공학",
    "section": "25.4 프롬프트 작성사례",
    "text": "25.4 프롬프트 작성사례\n좋은 프롬프트와 나쁜(?) 프롬프트를 사용하여 생성된 AI 응답을 통해 프롬프트 공학의 중요성을 파악할 수 있다. 응답은 GPT AI 모형과 학습 데이터, 사용자에 따라 달라질 수 있다. 다음 사례를 통해서 잘 작성된 프롬프트는 보다 구체적이고 관련성 있는 응답을 유도하는 반면, 잘못된 프롬프트는 ’밥을 먹으면 배부르다’와 같은 일반적인 답변을 주기 때문에 이에 대해 한두번 손이 더가는 문제가 있다. 반복적인 프롬프트 테스트 및 개선: 다양한 프롬프트 변형을 테스트하고 응답을 분석하면 주어진 목적에 가장 효과적인 프롬프트를 식별하는 데 도움이 될 수 있다.\n\n맥락 특정: 명확한 문맥(context)을 제공하면 ChatGPT와 같은 AI 언어 모형이 적절한 응답을 생성하도록 안내하는 데 도움이 된다. 예를 들어 “유럽 국가의 수도”가 아닌 “프랑스의 수도는 어디인가요?”라고 묻는다면 더 정확한 결과를 얻을 수 있다.\n모호성 제거: 프롬프트가 명확해야 모델이 질문을 잘못 이해하거나 관련 없는 답변을 제공할 가능성을 줄일 수 있다.\n단계별 설명 요청: 단계별 또는 자세한 설명을 요청하면 AI 모델이 보다 유익한 답변을 생성하는 데 도움이 된다.\n명시적 제약 조건: 단어 수 제한이나 주제의 특정 측면을 고려하도록 AI에 요청하는 것같은 제약 조건을 지정하면 보다 집중적인 답변을 얻을 수 있다.\n\n\n25.4.1 식물 광합성\n다음 잘못된 프롬프트는 너무 모호해서 AI가 무작위 또는 관련 없는 응답을 생성할 가능성이 높다. 좋은 프롬프트는 보다 구체적이고 집중적이므로 AI가 관련성 있는 답변을 제공하도록 유도한다.\n\n\n\n잘못된 프롬프트: “뭐라도 말해줘.”\nAI 응답: “바나나는 동남아시아가 원산지인 인기 과일이지만 지금은 세계 여러 곳에서 재배되고 있습니다.”\n\n\n\n\n\n좋은 프롬프트: “식물의 광합성 과정을 설명하세요.”\nAI 응답: “광합성은 식물, 조류 및 일부 박테리아가 빛 에너지를 포도당 형태의 화학 에너지로 변환하는 과정입니다. 광합성에는 빛에 의존하는 반응과 빛에 독립적인 반응(캘빈 주기)의 두 가지 주요 단계가 포함됩니다. 빛에 의존하는 반응 동안 엽록소와 다른 색소는 빛 에너지를 흡수하여 ATP와 NADPH를 생성하는 데 사용됩니다. 광 독립 반응에서 CO2는 광 의존성 단계에서 생성된 ATP와 NADPH를 사용하여 일련의 효소 촉매 반응을 통해 유기 분자로 고정됩니다. 광합성의 최종 생성물은 포도당으로, 식물이 성장, 번식 및 기타 과정에 사용할 수 있습니다.”\n\n\n\n\n\n25.4.2 국가 수도\n잘못 작성된 프롬프트는 어느 국가의 수도를 요청하는지 명시하지 않아 모호하다. 좋은 프롬프트는 국가를 명확하게 명시하여 AI가 정확한 정보를 제공할 수 있다.\n\n\n\n잘못된 프롬프트: “수도를 말해줘”\nAI 응답: “세계에는 많은 수도가 있습니다. 질문하는 국가를 지정해 주세요.”\n\n\n\n\n\n좋은 프롬프트: “독일의 수도는 어디인가요?”\nAI 응답: “독일의 수도는 베를린입니다.”\n\n\n\n\n\n25.4.3 과학자\n잘못 작성된 프롬프트는 사용자가 어떤 과학자를 언급하고 있는지 불분명하므로 관련성이 없거나 잘못된 응답으로 이어질 수 있다. 잘 작성된 프롬프트는 과학자의 이름을 명시하고 간략한 개요와 요청사항을 명확히 하여 AI가 원하는 정보를 제공하도록 안내한다.\n\n\n\n잘못된 프롬프트: “유명한 과학자에 대해 말해줘.”\nAI 응답: “아이작 뉴턴, 알버트 아인슈타인, 마리 퀴리 등 역사상 유명한 과학자가 많이 있습니다. 관심 있는 과학자에 대한 자세한 정보를 제공하세요.”\n\n\n\n\n\n좋은 프롬프트: “알버트 아인슈타인의 생애와 과학에 대한 공헌에 대한 간략한 개요를 제공하세요.”\nAI 응답: “알버트 아인슈타인(1879-1955)은 독일 태생의 이론 물리학자로 역사상 가장 영향력 있는 과학자 중 한 명으로 널리 알려져 있습니다. 그는 공간, 시간, 중력에 대한 우리의 이해에 혁명을 일으킨 상대성 이론으로 가장 잘 알려져 있습니다. 아인슈타인의 유명한 방정식 E=mc^2는 질량과 에너지의 등가성을 증명합니다. 1921년에는 양자 이론의 발전에 기여한 광전 효과의 발견으로 노벨 물리학상을 수상했습니다. 아인슈타인의 연구는 천문학, 핵물리학에서 재료 과학, 우주론에 이르기까지 다양한 분야에 지대한 영향을 미쳤습니다.”\n\n\n\n\n\n25.4.4 요리법\n잘못 작성된 프롬프트는 너무 일반적이어서 AI가 너무 많은 해석을 가능하게 하여 응답의 경우의 수가 많아지게 된다. 잘 작성된 프롬프트는 주제를 특정 요리로 좁히고, 단계별 설명을 요청하므로 AI의 응답이 더 유용하고 관련성이 높게 유도할 수 있다.\n\n\n\n잘못된 프롬프트: “음식을 요리하는 방법?”\nAI 응답: “음식 요리에는 다양한 기술, 재료, 레시피가 필요합니다. 관심 있는 요리 유형이나 요리 방법에 대해 더 구체적인 정보를 제공하세요.”\n\n\n\n\n\n좋은 프롬프트: “기본적인 파스타 요리를 준비하는 단계를 설명해 주세요.”\nAI 응답: “기본적인 파스타 요리를 준비하려면 다음 단계를 따르세요:\n\n큰 냄비에 소금물을 넣고 끓입니다.  스파게티, 펜네, 페투치니 등 원하는 파스타를 끓는 물에 넣고 포장지 지침에 따라 알 덴테 식감이 될 때까지 약 8~12분간 조리합니다. 파스타가 익는 동안 간단한 소스를 준비합니다. 기본 토마토 소스는 팬에 올리브 오일을 두르고 다진 마늘을 향이 날 때까지 볶습니다. 으깬 토마토, 소금, 후추, 말린 바질 또는 오레가노를 넣고 10~15분간 끓입니다. 익힌 파스타의 물기를 빼고 파스타 물 한 컵을 남겨둡니다. 파스타를 소스에 넣고 골고루 섞이도록 버무립니다. 소스가 너무 걸쭉하면 남은 파스타 물을 약간 추가하여 묽게 만듭니다. 원하는 경우 파마산 치즈와 신선한 바질로 장식하여 파스타 요리를 뜨겁게 제공합니다.”"
  },
  {
    "objectID": "prompt.html#프롬프트-작업흐름",
    "href": "prompt.html#프롬프트-작업흐름",
    "title": "25  프롬프트 공학",
    "section": "25.5 프롬프트 작업흐름",
    "text": "25.5 프롬프트 작업흐름\n프롬프트를 잘 작성하기 위해서는 목표 정의부터 시작하여 초기 프롬프트 초안 작성, 제약 조건 추가, 프롬프트 테스트, 만족스러운 응답을 얻을 때까지 반복적으로 프롬프트를 평가 및 개선하는 프로세스가 일반적이다. 만족스러운 응답을 GPT AI 모델로부터 얻은 후에는 나중에 참조할 수 있도록 최종 프롬프트를 문서화하는 것을 잊으면 안 된다.\n\n\n\n\n\n\ngraph TB\nA[목표 정의] --&gt; B[프롬프트 초안 작성]\nB --&gt; C[제약 조건 또는 사양 추가]\nC --&gt; D[프롬프트 테스트]\nD --&gt; E[평가 및 개선]\nE --&gt; F{응답이 만족스러운가?}\nF -- Yes --&gt; G[성공한 프롬프트를 문서화]\nF -- No --&gt; E\n\n\n\n\n\n\nAI 언어 모델로부터 정확하고 적절한 응답을 유도하는 프롬프트를 설계하고 개선하는 프롬프트 엔지니어링 작업흐름을 다음 같이 단계별로 구성할 수 있다:\n\n목표 정의: AI 모델에서 얻고자 하는 정보 또는 출력을 명확하게 정의하는 것이 시작점이 된다. 원하는 응답의 범위와 구체성을 결정한다.\n프롬프트 초안 작성: 목표에 직접적으로 도달할 수 있는 명확하고 간결한 프롬프트를 작성한다. 모호하지 않게 AI 언어모델(LLM)이 질문이나 작업을 충분히 이해할 수 있도록 맥락(Context)을 충분히 제공한다.\n제약 조건 또는 사양 추가: 필요한 경우 단어 수 제한이나 AI 언어모델이 집중해야 되는 주제의 특정 측면을 부각하는 제약 조건을 추가한다. 이렇게 하면 모델이 상대적으로 집중적으로 관련성 높은 응답을 뽑아낼 확률이 높다.\n프롬프트 테스트: AI 언어모델에 프롬프트를 입력하고 생성된 응답을 분석한다. 출력의 정확성, 관련성 및 구체성에 특히 주의를 기울인다.\n평가 및 개선: AI의 응답을 바탕으로 프롬프트에 추가 개선이 필요한지 평가한다. 응답이 만족스럽지 않은 경우 모호하거나 명확성이 부족한 부분을 파악하고 그에 따라 프롬프트를 수정 보완한다. 더 많은 맥락을 추가하거나, 질문을 더 구체적으로 만들거나, 단계별 설명을 요청하는 등 추가작업이 수반된다.\n반복: 필요에 따라 4단계와 5단계를 반복하여 원하는 결과를 얻을 때까지 프롬프트를 테스트하고 가다듬는다. 이러한 반복 프로세스는 사용자와 AI 언어모델 간 커뮤니케이션을 최적화하는데 꼭 필요하다.\n성공한 프롬프트를 문서화: 성공적으로 작성한 프롬프트와 프롬프트를 만드는 데 사용된 기술을 기록으로 남겨 문서화시킨다. 이를 통해 모범 사례를 수립하고 향후 프롬프트 엔지니어링 프로세스를 간소화하여 생산성을 높일 수 있다."
  },
  {
    "objectID": "prompt.html#프롬프트-템플릿",
    "href": "prompt.html#프롬프트-템플릿",
    "title": "25  프롬프트 공학",
    "section": "25.6 프롬프트 템플릿",
    "text": "25.6 프롬프트 템플릿\n가장 기본적인 프롬프트는 언어모형이 수행할 “[작업]”을 지정하고 다음과 같이 생성하라고 지시명령문을 작성한다.\n\n프롬프트: “[작업]을 생성하라”  예: 다음 뉴스기사를 한 문장으로 요약해 주세요!\n\n챗GPT 플러그인 확장기능을 사용하지 않는 경우 외부 URL을 인식하지 못하기 때문에 프롬프트에 해당 기사를 복사하여 붙여넣기해야한다. 농민신문 버젓이 수입·재배된 LMO 종자…검역당국 뭐했나에 실린 오피니언 사설을 요약해보자.\n\n\n\n\n\n\n프롬프트: 다음 뉴스기사를 한 문장으로 요약해 주세요!\n\n\n\n\n\n미국의 유전자변형생물체(LMO) 종자가 버젓이 수입돼 8년이나 재배돼온 사실이 드러났다. 품목은 주키니호박이다. 제조·가공하면 유전자변형 DNA가 안 남아 식품가공용으로 승인받은 원료 작물에 대해서도 유전자변형농산물(GMO) 표시를 하라고 할 정도로 국민적 반감이 거센데, 재배를 통해 얼마든지 증식할 수 있는 LMO 종자가 해외 직구라는 어엿한 경로를 통해 들어와 장기간 재배됐으니 검역망 허술하기가 한심하기 짝이 없다.\n종자가 함부로 국경을 넘나들어서는 안되는 이유는 국내법은 물론 국제 규약에도 명시됐다. 우리나라 ‘종자산업법’은 생태계 보호 및 자원 보존에 지장을 줄 우려가 있는 종자는 수입을 제한할 수 있다고 했으며, ’LMO의 국가간 이동 등에 관한 법률’(LMO법)은 생물다양성의 보전 및 지속적 이용에 부정적 영향을 끼칠 수 있는 LMO의 위해를 방지하기 위한 국가의 책무를 적시하고 있다. LMO법은 LMO의 국가간 이동을 규제하는 국제협약인 ’바이오안전성에 관한 카르타헤나 의정서’를 기반으로 하는 만큼 LMO에 대한 우려는 세계 각국이 공히 인정하는 바이기도 하다. 이런데도 LMO 종자가 무사 통관했다는 건 검역당국의 방임이나 능력 부족으로밖에 보이지 않는다.\nLMO 주키니호박 재배·판매 사실이 알려진 후 농림축산식품부가 해당 종자 회수에 나서고 교육부가 학교급식에 주키니호박 사용을 중단한 것은 그만큼 사태가 위중해서다. GMO에 대한 국민적 불신이 반영된 조치다. 양심을 속이고 수입 규정을 어긴 업자를 우선 탓해야 하겠지만, 이런 상황을 막기 위해 검역당국이 존재하는 것 아닌가. 종자는 낱알 크기가 작은 데다 속이려고 작정하면 걸러내기 어렵다는 점을 모르지 않으나 그런 해명이 국민의 공감을 얻기는 어렵다.\n현행 제도상 빈틈이나 구멍을 완벽히 메우기 어렵다면 응당 검역·통관 시스템을 개선하고 위법자에 대한 처벌도 크게 강화하는 것이 마땅하다. 카르타헤나 의정서에도 나와 있듯 LMO의 국가간 이동이 향후 해당국의 생물다양성은 물론 인체 건강에 어떤 부정적 영향을 줄지 알 수 없기 때문이다. 더구나 지금 상태라면 GMO 관련 장벽을 대폭 완화해야 할 것으로 예상되는 인도·태평양 경제프레임워크(IPEF) 시대에 대한 전망도 암울하다. 문턱이 낮아질수록 넘나듦이 쉬운 건 불문가지다.\n\nAI 응답:\n\n미국 유전자변형생물체(LMO) 종자인 주키니호박이 무사통관돼 국내에서 8년간 재배되어 왔는데, 이는 국내법과 국제 규약을 위반한 것으로 검역망의 부족과 능력 부족으로 보인다는 것과 GMO에 대한 국민적 불신이 반영된 사태이며, 검역·통관 시스템 개선과 위법자에 대한 강화된 처벌이 필요하다는 것이 지적되고 있다.\n\n\n\n\n\n표준 프롬프트 작성 기법에 역할을 추가하면 좀더 의미있는 기사를 작성하게 된다.\n\n작업: 삼성 갤럭시 23 핸드폰 후기 작성\n작성지침: 후기는 객관적이며 유익한 정보를 담고 있어야 하며 전작과 비교하여 특별히 추가된 기능을 강조해야 된다.\n역할: 구매 소비자\n\n\n\n\n\n\n\n프롬프트: “휴대폰을 구매하는 소비자로서 이전 모델과 비교하여 새로운 삼성 갤럭시 23 휴대폰의 고유한 기능을 강조하는 객관적이고 유익한 정보를 담고 있는 휴대폰 리뷰를 작성하세요.”\n\n\n\n\n\nAI 응답:\n\n최근에 새로운 삼성 갤럭시 23 휴대폰을 구매한 소비자로서, 이전 모델과 비교해 보았을 때 큰 업그레이드가 이루어졌다는 것을 확신할 수 있습니다. 그 중에서 가장 눈에 띄는 특징은 향상된 저조도 성능과 개선된 광학 줌이 있는 강력한 트리플 렌즈 카메라 시스템입니다. 또한, 최신 스냅드래곤 프로세서를 장착해 처리 속도가 향상되어 반응성과 사용자 경험이 더욱 빠르고 더욱 원활해졌습니다.\n\n\n갤럭시 23에는 이전 삼성 모델과 구별되는 여러 가지 고유한 기능이 있습니다. 그 중 하나는 다이나믹 AMOLED 120Hz 디스플레이인데, 화려한 색상과 선명한 대비로 눈에 띄는 시각적 효과를 제공합니다. 또한, 휴대폰의 배터리 크기가 커졌으며 빠른 충전 기능을 갖추고 있어 항상 바쁘게 사용하는 사용자에게 적합합니다.\n\n\n종합적으로, 새로운 삼성 갤럭시 23은 최첨단 기능을 갖춘 최고급 휴대폰을 찾고 있는 분들에게 추천할 만한 가치가 있습니다. 강력한 카메라 시스템, 빠른 처리 속도 및 디스플레이 품질로 인해 경쟁이 치열한 시장에서 뛰어난 장치로 떠오르고 있습니다.\n\n\n\n\n\n25.6.1 역할 프롬프트\nAI 언어모델에 특정 역할을 부여해서 원하는 챗GPT 결과를 도출하도록 지시명령문을 작성한다.\n\n프롬프트: “[역할]로서 [작업]을 생성하라”  예: “통신회사 콜센터 상담원으로 고객문의에 대해 응답을 생성하시오”\n\n\n\n\n\n\n\n프롬프트: 너는 지금부터 케이블 TV 회사의 고객 서비스 담당자로 역할을 수행할 것입니다. 고객이 콜센터로 삼성 갤럭시 23 핸드폰에 문제가 있다고 전화를 걸어왔습니다. 고객에게 응대를 해야하는데 어떻게 응대할지 작성해보세요.\n\n\n\n\n\nAI 응답:\n\n네, 고객 서비스 담당자로 역할을 수행하겠습니다.\n\n\n고객: 삼성 갤럭시 23 핸드폰을 사용하고 있는데, 전화를 걸거나 문자를 보내려고 할 때마다 화면이 꺼져요.\n\n\n고객 서비스 담당자: 안녕하세요, 삼성 갤럭시 23 핸드폰 고객 서비스입니다. 불편을 드려 죄송합니다. 해당 문제를 해결하기 위해서 몇 가지 질문을 드릴게요. 먼저, 핸드폰을 재부팅해보셨나요? 그리고 핸드폰이 충전이 잘 되고 있는지 확인해 보세요. 만약 이러한 조치가 문제를 해결하지 못한다면, 화면이 자주 꺼지는 경우에는 배터리 절약 모드를 사용하고 있는지 확인해 보세요. 그리고 설정에서 화면 시간을 더 길게 조정해보세요. 만약에 이러한 조치가 문제를 해결하지 못한다면, 저희는 펌웨어 업데이트나 고장 신고 등 추가적인 조치를 취할 수 있도록 도와드리겠습니다. 어떤 조치를 취해 드릴까요?\n\n\n\n\n\n\n25.6.2 감성 분류\n텍스트에 내재된 감성도 긍부정 혹은 긍정, 부정, 중립으로 나눠 분류하는 작업도 가능하다.\n\n프롬프트: “[텍스트]의 감성을 긍정과 부정 둘 중 하나로 분류하라”  예: “다음 텍스트의 감성을 긍정과 부정 둘 중 하나로 분류합니다. ‘1%라도 기대했던 내가 죄인입니다 죄인입니다….’”\n\n네이버 영화 감성 말뭉치에서 영화 후기 긍정과 부정을 각각 하나씩 뽑아내서 감성분류 작업을 수행한다.\n\n\n\n\n\n\n\n\nid\ndocument\nlabel\n\n\n\n\n5912145\n왜케 평점이 낮은건데? 꽤 볼만한데.. 헐리우드식 화려함에만 너무 길들여져 있나?\n1\n\n\n9671124\n1%라도 기대했던 내가 죄인입니다 죄인입니다….\n0\n\n\n\n\n\n\n\n\n\n프롬프트: 다음 텍스트의 감성을 긍정과 부정 둘 중 하나로 분류합니다. 답변은 긍정, 부정 중 하나입니다.\n\n\n\n\n\n“왜케 평점이 낮은건데? 꽤 볼만한데.. 헐리우드식 화려함에만 너무 길들여져 있나?”\n\nAI 응답:\n\n답변: 긍정\n\n\n\n\n\n\n\n\n\n\n\n프롬프트: 다음 텍스트의 감성을 긍정과 부정 둘 중 하나로 분류합니다. 그리고 이유도 제시하여 주세요.\n\n\n\n\n\n“1%라도 기대했던 내가 죄인입니다 죄인입니다….”\n\nAI 응답:\n\n이 텍스트는 부정적인 감성을 나타냅니다. 이유는 “죄인입니다”라는 문구가 있어서 입니다. 이 문구는 자신에 대한 부정적인 평가를 나타내고 있으며, “1%라도 기대했던”이라는 표현은 자신이 어떤 일을 할 때 기대와 다르게 결과가 나온 것으로 추정됩니다. 이러한 표현들은 부정적인 감정을 나타내고 있으며, 따라서 이 텍스트는 부정적인 감성을 가지고 있습니다.\n\n\n\n\n\n\n\n25.6.3 텍스트 분류\n네이버 뉴스기사를 각 뉴스 범주별로 나눠 분류하는 것도 가능하다.\n\n프롬프트: “[텍스트]를 다음 중 하나의 범주로 분류하라; A, B, C”  예: “뉴스기사를 다음 중 하나 범주로 분류해야 합니다; 정치, 경제, 사회, 생활/문화, 세계, 기술/IT, 연예, 스포츠. ‘뉴스 기사’”\n\n다음 사례는 네이버 뉴스 카테고리 데이터셋에서 정치뉴스기사 하나를 가져왔다. 압축파일을 풀면 정치(0), 경제(1), 사회(2), 생활/문화(3), 세계(4), 기술/IT(5), 연예(6), 스포츠(7) 총 8개 범주로 나눠 디렉토리에 텍스트 뉴스기사가 포함되어 있다.\n\n\n\n\n\n\n프롬프트: 뉴스기사를 다음 중 하나 범주로 분류해야 합니다; 정치, 경제, 사회, 생활/문화, 세계, 기술/IT, 연예, 스포츠.\n\n\n\n\n\n동남아 담당’ 北 최희철 부상 베이징 도착…싱가포르행 주목 최 부상, 행선지·방문 목적 질문에는 ‘묵묵부답’\n(베이징=연합뉴스) 김진방 특파원 = 북한이 북미 정상회담 무산 가능성까지 거론하며 강경한 태도를 보이는 가운데 동남아시아 외교를 담당하는 최희철 북한 외무성 부상이 19일 중국 베이징 서우두(首都) 공항에 모습을 드러냈다.\n최 부상은 이날 오전 평양발 고려항공 JS151편을 이용해 베이징 서우두 공항에 도착했다.\n최 부상은 최종 목적지를 묻는 취재진의 질문에 아무런 답변을 하지 않고, 북한 대사관 관계자들과 함께 공항을 빠져나갔다.\n북미 정상회담을 20여 일 앞둔 상황에서 동남아 외교통인 최 부상이 정상회담 준비 등을 위해 회담 개최 예정지인 싱가포르를 방문할 가능성도 제기되고 있다.\n최 부상은 지난 3월에도 아세안(ASEAN·동남아시아국가연합) 의장국이기도 한 싱가포르를 방문해 양국관계와 올해 8월 열리는 아세안지역안보포럼(ARF) 의제 등을 논의한 바 있다.\n또 지난해 북핵 문제를 두고 북미 간 긴장관계가 형성됐을 때도 ARF에 참석해 아세안을 상대로 여론전을 펼쳤다. 북한의 초청으로 비자이 쿠마르 싱 인도 외교부 국무장관이 방북했을 때도 최 부상은 싱 국무장관을 직접 영접하고, 한반도 문제를 논의하기도 했다.\n베이징 소식통은 “최 부상이 대(對)미 외교담당이 아니기 때문에 싱가포르로 갈 가능성이 큰 것은 아니다”며 “만약 싱가포르에 간다면 정상회담과 관련한 지원 작업 준비 등을 위한 것일 가능성이 크다”고 말했다.\n\nAI 응답:\n\n해당 뉴스는 북한의 외교 정책과 관련된 내용이 있어 정치 범주에 속합니다.\n\n\n\n\n\n\n\n25.6.4 개체명 추출\n텍스트에서 사람, 지명, 브랜드 등 기계가 인식해서 추출하는 작업을 통상 개체명인식(NER, Named Entity Recognition) 이라고 한다. GPT-3.5, GPT-4에 따라 성능차이가 다소 있지만 기존 접근법과 비교하여 손색이 없다고 할 수 있다.\n\n프롬프트: “다음 [텍스트]에 대해서 개체명 인식 작업을 수행하고 인물, 조직, 장소로 구분하라.”  예: “다음 뉴스기사에서 개체명을 추출해 주세요. 출력 형식: 인물: &lt;출력결과를 콤마 구분자로 구분&gt; 조직: &lt;출력결과를 콤마 구분자로 구분&gt; 장소: &lt;출력결과를 콤마 구분자로 구분&gt;”\n\n네이버 뉴스 카테고리 데이터셋에서 정치뉴스기사 하나를 가져왔다.\n\n\n\n\n\n\n프롬프트: 다음 뉴스기사에서 개체명을 추출해 주세요.\n\n\n\n\n\n출력 형식: 인물: &lt;출력결과를 콤마 구분자로 구분&gt;  조직: &lt;출력결과를 콤마 구분자로 구분&gt;  장소: &lt;출력결과를 콤마 구분자로 구분&gt;  날짜: &lt;출력결과를 콤마 구분자로 구분&gt;\n동남아 담당’ 北 최희철 부상 베이징 도착…싱가포르행 주목 최 부상, 행선지·방문 목적 질문에는 ‘묵묵부답’\n(베이징=연합뉴스) 김진방 특파원 = 북한이 북미 정상회담 무산 가능성까지 거론하며 강경한 태도를 보이는 가운데 동남아시아 외교를 담당하는 최희철 북한 외무성 부상이 19일 중국 베이징 서우두(首都) 공항에 모습을 드러냈다.\n최 부상은 이날 오전 평양발 고려항공 JS151편을 이용해 베이징 서우두 공항에 도착했다.\n최 부상은 최종 목적지를 묻는 취재진의 질문에 아무런 답변을 하지 않고, 북한 대사관 관계자들과 함께 공항을 빠져나갔다.\n북미 정상회담을 20여 일 앞둔 상황에서 동남아 외교통인 최 부상이 정상회담 준비 등을 위해 회담 개최 예정지인 싱가포르를 방문할 가능성도 제기되고 있다.\n최 부상은 지난 3월에도 아세안(ASEAN·동남아시아국가연합) 의장국이기도 한 싱가포르를 방문해 양국관계와 올해 8월 열리는 아세안지역안보포럼(ARF) 의제 등을 논의한 바 있다.\n또 지난해 북핵 문제를 두고 북미 간 긴장관계가 형성됐을 때도 ARF에 참석해 아세안을 상대로 여론전을 펼쳤다. 북한의 초청으로 비자이 쿠마르 싱 인도 외교부 국무장관이 방북했을 때도 최 부상은 싱 국무장관을 직접 영접하고, 한반도 문제를 논의하기도 했다.\n베이징 소식통은 “최 부상이 대(對)미 외교담당이 아니기 때문에 싱가포르로 갈 가능성이 큰 것은 아니다”며 “만약 싱가포르에 간다면 정상회담과 관련한 지원 작업 준비 등을 위한 것일 가능성이 크다”고 말했다.\n\nAI 응답:\n\n인물: 최희철, 김진방, 비자이 쿠마르 싱  조직: 연합뉴스, 북한 외무성, 고려항공, 아세안(ASEAN·동남아시아국가연합), 아세안지역안보포럼(ARF), 인도 외교부  장소: 베이징, 서우두(首都) 공항, 평양, 싱가포르, 북한 대사관  날짜: 19일, 20여 일, 지난 3월, 올해 8월, 지난해\n\n\n\n\n\n\n\n25.6.5 질의응답\n지문이 주어진 상태에서 사람이 질문을 하면 기계가 답을 하는 상황이다. 전문적이고 매우 긴 지문에서 원하는 답을 찾기 위해 질문을 하는 상황에서 유용하다.\n\n프롬프트: “다음 [지문]에서 [질문]에 답하시오”  예: “다음 지문을 읽고 답을 찾으세요. 질문: 김현웅은 서울고등검찰청 검사장 재직 중에 몇대 법무부 장관에 임용되었나?\n지문: 김현웅(金賢雄, 1959년 5월 4일 ~ , 전남 고흥)은 … ”\n\nKorQuAD 2.0는 KorQuAD 1.0에서 질문답변 20,000+ 쌍을 포함하여 총 100,000+ 쌍으로 구성된 한국어 Machine Reading Comprehension 데이터셋으로, KorQuAD 1.0과는 다르게 1~2 문단이 아닌 Wikipedia article 전체에서 답을 찾아야 한다. KorQuAD 데이터셋에서 사례를 하나 가져와서 질의응답을 풀어본다.\n\n실제 정답 라벨: [{'text': '제64대', 'answer_start': 209}]\n\n\n\n\n\n\n\n프롬프트: 다음 지문을 읽고 답을 찾으세요.\n\n\n\n\n\n질문: 김현웅은 서울고등검찰청 검사장 재직 중에 몇대 법무부 장관에 임용되었나?\n지문: 김현웅(金賢雄, 1959년 5월 4일 ~ , 전남 고흥)은 대한민국의 법률가이다. 사법연수원 16기 수료 후 검사 생활을 했으며 특히 서울중앙지검 특수1부 부장검사로 재직할 때는 법조브로커 김홍수씨(58·구속)로부터 금품을 받은 혐의(알선수재)로 사상 최초로 전직 고등 법원 부장판사급 법관 A씨에 대해 사전 구속영장을 청구했다. 이후 제46대 서울고등검찰청 검사장 재직 중 제64대 법무부 장관에 임용되었다. 대한변호사협회(회장 김현)가 김현웅(58·사법연수원 16기) 전 법무부 장관에게 변호사 개업을 자제할 것을 권고했다. 변협은 보 도자료를 통해 “김현웅 전 장관은 지난 4월27일 변호사 등록을 신청했고, 현행 변호사법상 등록 거부 사유가 없다”라며 “변호사법은 등록 신청일로부터 3개월간 등록을 하지 않을 경우 등록이 간주된다고 규정하고 있다”라고 설명했다.\n\nAI 응답:\n\n김현웅은 서울고등검찰청 검사장 재직 중에 제64대 법무부 장관에 임용되었다.\n\n\n\n\n\n\n\n25.6.6 객관식 문제\n주어진 4개 중에서 정답을 하나 고르는 문제를 사지선다(四枝選多)형 시험문제로 학창시절부터 접해 친숙하다. 사지선다 문제를 풀고 문제도 생성하는 프롬프트를 제작해보자.\n\n프롬프트: “다음 [선택지] 중에서 정답을 하나 고르세요.”  예: “다음 문제에서 정답을 하나 고르세요. 문제: 통계에서 모든 경우의 수를 포함하는 집합을 일컷는 용어는?\n\n표본 공간(Sample Space)\n포함집합(Super Set)\n포함공간(Super Space)\n표본집합(Sample Set) ”\n\n\n\n정답과 이유도 추가하고 유사한 사지선다형 문제를 몇개 만들어 지시한다.\n\n\n\n\n\n\n\n프롬프트: 통계에서 두 변수 간의 상관 관계를 나타내는 지수는?\n\n\n\n\n\n\n중앙값(Median)\n평균(Average)\n분산(Variance)\n상관계수(Correlation Coefficient)\n\n\nAI 응답:\n\n정답: 4. 상관계수(Correlation Coefficient) 이유: 통계에서 두 변수 간의 관련성을 측정하는 방법 중 하나가 상관계수입니다. 상관계수는 -1에서 1 사이의 값을 가지며, 1에 가까울수록 양의 상관관계, -1에 가까울수록 음의 상관관계, 0에 가까울수록 상관관계가 없다는 것을 의미합니다."
  },
  {
    "objectID": "text_to_X.html",
    "href": "text_to_X.html",
    "title": "26  생성형 AI",
    "section": "",
    "text": "27 프롬프트\n생성형 이미지 제작을 위한 프롬프트에서 중요한 것은 텍스트 프롬프트 제작과 다소 차이가 있다."
  },
  {
    "objectID": "text_to_X.html#논문-초록",
    "href": "text_to_X.html#논문-초록",
    "title": "26  생성형 AI",
    "section": "26.1 논문 초록",
    "text": "26.1 논문 초록\n제주대 안도현 교수가 페이스북에 공개한 챗GPT를 활용한 논문 초록 작성 비법은 영문초록을 효과적으로 빠른 시간내에 방법하는 방법을 제시하고 있다. 작업흐름과 지시명령어(Prompt)를 포함한 비법은 해외 학술지 작성에 영어초록이 필요하신 분들께 큰 도움이 될 것이다. 특히, 영문초록 작성은 국문 학술지에 논문을 제출할 때 중요한 요소 중 하나로, 논문의 국제적 가시성을 높이는 데도 기여할 것이다.\n딥엘(DeepL)과 챗GPT를 이용하면 학술지 영문초록 작성 과정에서 영문 교정을 크게 줄일 수 있다. 딥엘과 챗GPT를 활용하여 문법적으로 정확하고 의미론적으로 일관된 텍스트를 생성할 수 있어 전문 영문 교정 서비스를 이용하지 않아도 높은 품질의 영문초록을 작성할 수 있어 시간과 비용을 크게 줄일 것으로 기대된다.\n\n26.1.1 작업흐름\n딥엘과 챗GPT를 활용한 학술지 영문초록 작성의 작업흐름은 다음과 같다. 먼저 국문초록을 작성한다. 이후 딥엘을 사용하여 국문초록을 영문으로 번역한다. 번역된 영문초록은 ChatGPT로 윤문을 진행한다. 이때, 프롬프트에 “Revise the abstract to follow APA style guidelines and ensure that it falls within the word count range of 400 to 500 words.”라고 입력하여, APA 스타일 가이드라인을 따르고 단어 수가 400에서 500 단어 사이가 되도록 수정한다. 이렇게 하면 품질 높은 영문초록을 효율적으로 작성할 수 있다.\n\n\n\n\n\n\n딥엘과 챗GPT 학술지 영문초록 작성 작업흐름\n\n\n\n\n국문초록 작성\n딥엘로 국문을 영문으로 번역.\n번역한 영문을 ChatGPT로 윤문.\n\n\n프롬프트에 다음과 같이 입력:\n\n\nRevise the abstract to follow APA style guidelines and ensure that it falls within the word count range of 400 to 500 words.\n\n\n\n\n\n26.1.2 사례\n한글 초록 작성 후 딥엘을 사용하여 국문초록을 영어로 번역한다. 딥엘은 자연어 처리 기술을 활용하여 높은 정확도의 번역을 제공하므로, 이 단계에서 얻은 영어 초록은 대체로 문법적으로 정확하고 의미도 잘 전달된다. 다음으로, 챗GPT에 앞서 준비한 프롬프트에 딥엘로 번역한 영문초록을 더 자연스럽고 전문적으로 다듬도록 지시한다. “Revise the abstract below to follow APA style guidelines and ensure that it falls within the word count range of 400 to 500 words.”\n챗GPT는 프롬프트에 따라 영문초록을 윤문하는데 챗GPT 언어모형(GPT-3.5/GPT-4)은 문장 구조를 개선하고, 필요한 경우 전문 용어를 추가하며, 전반적으로 더 자연스럽고 전문적인 표현을 사용하여 초록을 다듬는다. 완성된 영문초록은 원래의 한글초록이 가진 의미를 정확하게 전달하면서도, 국제 학술지에 제출하기에 적합한 수준의 언어와 구조를 갖추게 된다. 이 과정을 2020년에 출간된 논문(이광춘, 2020)의 한글 초록에 적용하여 실제 저자가 작성한 영문 초록과 비교해보자. 1\n\n\n\n\n\n\n1. 한글 초록 원문\n\n\n\n알파고가 2016년 바둑 인간 챔피언 이세돌 9단을 현격한 기량차이로 격파하면서 인공지능에 대한 관심이 급격히 증가하였다. 그와 동시에 기계가 인간의 일자리 잠식을 가속화하면서 막연한 불안감이 삽시간에 전파되었다. 기계와의 일자리 경쟁은 컴퓨터의 출현이전부터 시작되었지만 인간만의 고유한 영역으로 알고 있던 인지, 창작 등 다양한 분야에서 오히려 인간보다 더 우수한 성능과 저렴한 가격 경쟁력을 보여주면서 기존 인간의 일자리가 기계에 대체되는 것이 가시권에 들었다. 이번 문헌조사와 실증 데이터 분석을 통해서 기계가 인간의 일자리를 대체하는 자동화의 본질에 대해서 살펴보고, 인간과 기계의 업무 분장을 통해 더 생산성을 높일 수 있는 방안을 제시하고자 한다.\n\n\n\n\n\n\n\n\n2. 딥엘 영문초록 번역\n\n\n\nInterest in artificial intelligence skyrocketed in 2016 when AlphaGo defeated human Go champion Lee Sedol 9 by a stunning margin. At the same time, a vague sense of anxiety was quickly spread as machines accelerated the erosion of human jobs. Although the competition for jobs with machines began before the advent of computers, the replacement of existing human jobs by machines became visible as machines showed better performance and lower price competitiveness than humans in various fields such as cognition and creation, which were thought to be unique to humans. Through this literature review and empirical data analysis, we examine the nature of automation in which machines replace human jobs. and suggest ways to increase productivity through the division of labor between humans and machines.\nTranslated with www.DeepL.com/Translator (free version)\n\n\n\n\n\n\n\n\n3. 챗GPT 프롬프트\n\n\n\nRevise the abstract to follow APA style guidelines and ensure that it falls within the word count range of 400 to 500 words.\nInterest in artificial intelligence skyrocketed in 2016 when AlphaGo defeated human Go champion Lee Sedol 9 by a stunning margin. At the same time, a vague sense of anxiety was quickly spread as machines accelerated the erosion of human jobs. Although the competition for jobs with machines began before the advent of computers, the replacement of existing human jobs by machines became visible as machines showed better performance and lower price competitiveness than humans in various fields such as cognition and creation, which were thought to be unique to humans. Through this literature review and empirical data analysis, we examine the nature of automation in which machines replace human jobs. and suggest ways to increase productivity through the division of labor between humans and machines.\n\n\n\n\n챗GPT 윤문한 영문초록\nThe rise of artificial intelligence (AI) has garnered significant attention since 2016 when AlphaGo, an AI program, defeated the human Go champion Lee Sedol. However, the growing use of machines in various fields has also fueled concerns about the displacement of human jobs. This paper presents a literature review and empirical data analysis to explore the nature of automation and suggest ways to enhance productivity by optimizing the division of labor between humans and machines.\nWhile machines have been replacing human jobs for centuries, the rapid development of AI has made it possible for machines to outperform humans in fields previously considered uniquely human, such as cognition and creation. As a result, there is a growing awareness of the impact of automation on employment opportunities. This paper aims to provide insights into this issue through a comprehensive review of relevant literature and analysis of empirical data.\nOur analysis indicates that automation can lead to the displacement of jobs that require low-level skills, but it can also create new opportunities that require higher-level skills. Furthermore, automation can enhance productivity and lower costs, thus benefiting both consumers and firms. Therefore, there is a need to strike a balance between the potential benefits and challenges of automation.\nTo maximize the advantages of automation, we propose an optimal division of labor between humans and machines. In this approach, humans are responsible for tasks that require creativity, emotional intelligence, and social skills, while machines are responsible for tasks that require precision and efficiency. This approach can lead to better job quality and increased productivity.\nIn conclusion, this paper highlights the potential impact of automation on employment and the need to optimize the division of labor between humans and machines. While automation can lead to job displacement, it can also create new opportunities and improve job quality. Therefore, policymakers and firms must consider ways to optimize the use of automation to benefit both society and the economy.\n\n\n\n영문초록 원문\nMachines have been used simply for arithmetic operations and documentation. However, with the development of technology, a new generation of artificial intelligence has begun. Machines are not just tools that can be calculated, but they have been commercialized in various fields, such as natural language processing technology that can understand and communicate human language, or video fields, where human dependence was high. Since 2016, the AI game, “Alphago,” has defeated Lee Se-dol with a significant difference in skill, interest in AI has increased sharply. Machines have started to replace human jobs because of their excellent performance, low cost and competitive edge. In this paper, I would like to present a plan on how to use artificial intelligence to affect human jobs and how to improve productivity effectively by cooperating with machines and humans in the future.\n\n\n영문초록을 비교하면, 챗GPT로 윤문한 영문초록이 원문보다 더 구조적이고 상세하다는 것을 알 수 있다. 챗GPT 초록은 문제 정의부터 해결 방안까지 체계적으로 다루고 있으며, 인공지능과 인간 노동 간의 최적의 역할 분배에 대한 구체적인 제안까지 포함하고 있지만, 원문 초록은 비교적 간단하고 일반적인 내용만을 다루고 있다. 원문은 인공지능이 인간의 일자리에 어떤 영향을 미칠 수 있는지와 미래에 어떻게 협력할 수 있는지에 대한 개요를 제공하지만, 구체적인 분석이나 제안은 부족하다."
  },
  {
    "objectID": "text_to_X.html#계산기-프로그램",
    "href": "text_to_X.html#계산기-프로그램",
    "title": "26  생성형 AI",
    "section": "26.2 계산기 프로그램",
    "text": "26.2 계산기 프로그램\n계산기 프로그램은 사용자가 입력한 사칙연산을 수행하고 결과를 출력하는 프로그램이지만, 간단한 계산기 프로그램을 각 언어로 작성하는 것은 프로그래밍 학습 첫 걸음으로 시간이 많이 걸리고 어려운 작업이었다. 하지만, 챗GPT를 활용하면 간단한 계산기 프로그램을 다양한 환경에서 손쉽게 작성할 수 있다.\n\n\n\n계산기 프로그램\n\n\n가장 기본적인 형태는 명령줄 인터페이스(Command Line Interface, CLI)를 사용하는 것으로 CLI 계산기는 텍스트 기반의 인터페이스를 제공하며, 사용자가 키보드를 통해 연산자와 피연산자를 입력하기 때문에 간단하고 빠르게 프로토타입을 만들 수 있는 장점이 있다.\n그래픽 사용자 인터페이스(Graphical User Interface, GUI)를 활용한 계산기를 고려할 수 있다. GUI 계산기는 사용자에게 더 직관적인 경험을 제공하며, 버튼과 메뉴를 통해 다양한 연산을 쉽게 수행하기 때문에 사용자 친화적이지만, 디자인과 이벤트 처리 로직을 구현해야 하므로 개발이 복잡할 수 있다.\n웹 기반 계산기는 인터넷 브라우저를 통해 접근할 수 있으며, HTML, CSS, JavaScript를 사용하여 구현되기 때문에 운영체제에 구애받지 않아 한번 개발하면 어디서든 활용이 가능하다.\n모바일 앱 계산기는 다른 모바일 앱처럼 스마트폰과 태블릿 등의 휴대용 기기에서 실행되며, 사용자가 언제 어디서든 계산 작업을 수행할 수 있는 편리함을 제공한다.\n언어 사용자 인터페이스(Language User Interface, LUI) 계산기는 음성 인식 기술을 활용하여 사용자가 음성 명령으로 계산을 수행할 수 있어 운전 중이거나 손이 자유롭지 않은 상황에서도 유용하다.\n\n26.2.1 CLI 계산기\nCLI 계산기는 사용자가 키보드를 통해 연산자와 피연산자를 입력하고, 결과를 텍스트로 출력하는 계산기로 프롬프트를 write python code of calculator와 같이 작성하면 계산기 파이썬 코드를 작성해준다. 사용자가 할 일은 파이썬 언어를 컴퓨터에 설치한 다음 프롬프트에 입력한 코드를 복사하여 파일로 저장한 후 실행하면 된다.\n\n프롬프트 작성\n평소 사용하는 프로그래밍 언어가 있다면 해당 언어를 선택하고, 처음 프로그래밍을 접하는 사람이라면 파이썬을 선택하는 것이 좋다. 파이썬은 배우기 쉽고, 다양한 분야에서 활용되는 인기있는 언어이다. 프롬프트는 write python code of calculator와 같이 작성하면 된다.\n\n\n\n\n\n\n프롬프트: write python code of calculator\n\n\n\n\n# Simple calculator program\n\n# Function to add two numbers\ndef add(x, y):\n    return x + y\n\n# Function to subtract two numbers\ndef subtract(x, y):\n    return x - y\n\n# Function to multiply two numbers\ndef multiply(x, y):\n    return x * y\n\n# Function to divide two numbers\ndef divide(x, y):\n    return x / y\n\n# Display menu\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Perform operation based on user's choice\nif choice == '1':\n    print(num1, \"+\", num2, \"=\", add(num1, num2))\n\nelif choice == '2':\n    print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\nelif choice == '3':\n    print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\nelif choice == '4':\n    print(num1, \"/\", num2, \"=\", divide(num1, num2))\n\nelse:\n    print(\"Invalid input\")\n\n\n\n\n\n실행 프롬프트\n프롬프트를 작성한 후에는 프로그램을 실행할 수 있는 프롬프트를 작성해야 한다. 프롬프트는 run python code of calculator와 같이 작성하면 된다. 챗GPT가 작성한 파이썬 계산기 프로그램을 실행하는 방법을 상세히 알려주어 사용자가 따라하면 된다.\n\n\n\n\n\n\nhow to run this python code\n\n\n\nPython 코드를 실행하려면 시스템에 Python이 설치되어 있어야 합니다. 다음 단계에 따라 간단한 계산기를 위한 Python 코드를 실행할 수 있습니다:\n\n메모장이나 서브라인 텍스트와 같은 텍스트 편집기를 열고 Python 코드를 새 파일에 붙여넣습니다.\n파일 확장명을 .py로 지정하여 저장합니다(예: calculator.py).\n터미널 또는 명령 프롬프트 창을 엽니다.\ncd 명령을 사용하여 파일이 저장된 디렉토리로 이동합니다(예: cd Documents\\Python).\npython calculator.py를 입력하고 Enter 키를 눌러 프로그램을 실행합니다.\n\n그러면 프로그램이 실행되고 메뉴가 표시되며 사용자에게 원하는 연산과 숫자 두 개를 입력하라는 메시지가 표시됩니다. 사용자가 필요한 입력을 입력하면 프로그램이 해당 산술 연산을 수행하고 결과를 표시합니다.\n\n\n\n\n계산기 실행\n터미널 또는 명령 프롬프트 창을 열고, cd 명령을 사용하여 파일이 저장된 디렉토리로 이동한다. 파일이 D:\\tcs\\chatGPT\\code 폴더에 저장되어 있다면 cd D:\\tcs\\chatGPT\\code을 입력한다. 디렉토리로 이동한 후에는 python calculator.py를 입력하고 엔터(Enter) 키를 눌르게 되면 파이썬으로 작성된 계산기 프로그램이 실행된다.\n\n\n\nCLI 파이썬 프로그램\n\n\n\n\n\n26.2.2 GUI 계산기\n계산기에 그래픽 사용자 인터페이스(GUI)를 추가하여 사용자가 더욱 편리하게 이용할 수 있도록 개선한다. 다양한 GUI 라이브러리가 존재하지만, 여기서는 tkinter 패키지를 선택하여 개발을 진행한다.\n\n프롬프트 작성\n챗GPT에 파이썬 언어로 계산기 프로그램을 작성하라는 지시명령어를 내린다. 지시명령어는 please add gui with tkinter와 같이 작성하면 된다. CLI 계산기 프로그램보다 GUI 계산기는 사용자에게는 편리하지만 개발해야 되는 코드는 더욱 복잡해진다.\n::: {.callout-note collapse=“true”} ### please add gui with tkinter\nSure, here is an example of the same calculator program using the Tkinter library to create a graphical user interface (GUI):\n…\nIn this code, we first import the Tkinter library using the alias tk. Then we define four functions add(), subtract(), multiply(), and divide() that perform the corresponding arithmetic operations on the numbers entered by the user. Each function retrieves the input values from the Entry widgets using the get() method, performs the arithmetic operation, and updates the text of the Label widget to display the result.\nWe then create the main window using the Tk() constructor and set its title using the title() method. Next, we create two Label widgets and two Entry widgets to allow the user to enter the two numbers.\nWe also create four Button widgets, one for each arithmetic operation, and set their text and width. The command parameter is used to specify the function that should be called when the button is clicked.\nFinally, we create a Label widget to display the result of the arithmetic operation, and call the mainloop() method to start the event loop and display the GUI.\n\nimport tkinter as tk\n\n# Function to perform addition\ndef add():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 + num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform subtraction\ndef subtract():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 - num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform multiplication\ndef multiply():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 * num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform division\ndef divide():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 / num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n    except ZeroDivisionError:\n        label_result.config(text=\"Cannot divide by zero\")\n\n# Create the main window\nwindow = tk.Tk()\nwindow.title(\"Simple Calculator\")\n\n# Create the number input fields\nlabel_num1 = tk.Label(window, text=\"Number 1:\")\nlabel_num1.pack()\nentry_num1 = tk.Entry(window)\nentry_num1.pack()\n\nlabel_num2 = tk.Label(window, text=\"Number 2:\")\nlabel_num2.pack()\nentry_num2 = tk.Entry(window)\nentry_num2.pack()\n\n# Create the operation buttons\nbutton_add = tk.Button(window, text=\"+\", width=10, command=add)\nbutton_add.pack()\n\nbutton_subtract = tk.Button(window, text=\"-\", width=10, command=subtract)\nbutton_subtract.pack()\n\nbutton_multiply = tk.Button(window, text=\"*\", width=10, command=multiply)\nbutton_multiply.pack()\n\nbutton_divide = tk.Button(window, text=\"/\", width=10, command=divide)\nbutton_divide.pack()\n\n# Create the result label\nlabel_result = tk.Label(window, text=\"Result: \")\nlabel_result.pack()\n\n# Run the main loop\nwindow.mainloop()\n\n\n\nGUI 계산기 실행\nCLI 계산기 실행방식과 동일하게 how to run this python code 지시명령어를 통해 GUI 계산기를 실행하는 방법을 안내받아 작성한 GUI 계산기를 실행한다. 텍스트 편집기를 열어 파이썬 코드를 새 파일에 붙여넣는다. 파일을 .py 확장명으로 저장한다(예: calculator.py). 터미널이나 명령 프롬프트 창을 연다. cd 명령을 사용해 파일이 저장된 디렉토리로 이동한다(예: cd D:\\tcs\\chatGPT\\code). 마지막으로 python calculator.py를 입력하고 엔터(Enter) 키를 눌러 프로그램을 실행한다.\n\n\n\nGUI 파이썬 프로그램\n\n\n\n\n\n26.2.3 웹 계산기\n웹 계산기는 CLI(Command Line Interface)나 GUI(Graphical User Interface) 계산기와 비교해보면, 웹 계산기는 브라우저를 통해 접근 가능하므로 별도의 설치 과정이 필요하지 않기 때문에 사용자가 쉽게 접근할 수 있어, 다양한 플랫폼에서 호환성을 보장한다. HTML, CSS, JavaScript와 같은 웹 표준 기술을 활용하여 UI를 구성할 수 있어 GUI 계산기에서 특정 라이브러리나 프레임워크에 의존성을 갖는 것과 대비된다.\nCLI 계산기는 텍스트 기반의 인터페이스를 제공하므로 개발이 상대적으로 간단하고 빠르다. 하지만 사용자 친화적인 인터페이스를 제공하기 어렵다는 단점이 있다. GUI 계산기는 이러한 단점을 해결하며, 더 직관적인 사용자 경험을 제공하지만 GUI 라이브러리를 사용해야 하므로 개발 복잡성이 증가한다.\n웹 계산기에 서버-클라이언트 아키텍처를 적용할 수 있어, 계산 로직을 서버에 둘 수도 있다. 서버에서 업데이트나 유지보수를 간편하게 할 수 있다는 것은 커다란 장점으로 CLI나 GUI 계산기 대부분 로컬에서 실행되어 이러한 장점을 누리기 어렵다.\n\n프롬프트 작성\n챗GPT에 웹 계산기 프로그램을 작성하라는 지시명령어를 내린다. 지시명령어는 웹 계산기 코드 작성해줘와 같이 작성하면 된다. 챗GPT 초기 영문으로 프롬프트를 작성할 경우 더 좋은 코드가 나왔으나 간단한 코드 작성은 영문이나 국문이나 큰 차이가 나지 않는다.\n\n\n\n\n\n\n웹 계산기 코드 작성해줘\n\n\n\n\n\n웹 계산기를 만들기 위해 HTML, CSS, 그리고 JavaScript를 사용할 수 있다. 아래는 간단한 예시 코드다.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Simple Calculator&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"calculator\"&gt;\n    &lt;input type=\"text\" id=\"display\" readonly&gt;\n    &lt;div class=\"buttons\"&gt;\n      &lt;button onclick=\"appendToDisplay('1')\"&gt;1&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('2')\"&gt;2&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('3')\"&gt;3&lt;/button&gt;\n      &lt;button onclick=\"clearDisplay()\"&gt;C&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('4')\"&gt;4&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('5')\"&gt;5&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('6')\"&gt;6&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('+')\"&gt;+&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('7')\"&gt;7&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('8')\"&gt;8&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('9')\"&gt;9&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('-')\"&gt;-&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('0')\"&gt;0&lt;/button&gt;\n      &lt;button onclick=\"calculate()\"&gt;=&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('*')\"&gt;*&lt;/button&gt;\n      &lt;button onclick=\"appendToDisplay('/')\"&gt;/&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nCSS (styles.css)\n.calculator {\n  width: 300px;\n  margin: auto;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px;\n  box-shadow: 0px 0px 10px gray;\n}\n\n.buttons {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n}\n\nbutton {\n  width: 68px;\n  height: 68px;\n  font-size: 24px;\n  margin: 5px;\n  cursor: pointer;\n}\n\ninput {\n  width: 95%;\n  font-size: 24px;\n  padding: 10px;\n  text-align: right;\n  margin-bottom: 20px;\n}\nJavaScript (script.js)\nlet currentInput = \"\";\nlet previousInput = \"\";\nlet operator = \"\";\n\nfunction clearDisplay() {\n  currentInput = \"\";\n  previousInput = \"\";\n  operator = \"\";\n  document.getElementById(\"display\").value = \"\";\n}\n\nfunction appendToDisplay(value) {\n  currentInput += value;\n  document.getElementById(\"display\").value = currentInput;\n}\n\nfunction calculate() {\n  previousInput = parseFloat(previousInput);\n  currentInput = parseFloat(currentInput);\n\n  let result = 0;\n\n  switch (operator) {\n    case '+':\n      result = previousInput + currentInput;\n      break;\n    case '-':\n      result = previousInput - currentInput;\n      break;\n    case '*':\n      result = previousInput * currentInput;\n      break;\n    case '/':\n      if (currentInput !== 0) {\n        result = previousInput / currentInput;\n      } else {\n        alert(\"Cannot divide by zero\");\n        clearDisplay();\n        return;\n      }\n      break;\n    default:\n      return;\n  }\n\n  document.getElementById(\"display\").value = result;\n  previousInput = result;\n  currentInput = \"\";\n}\n이 코드를 index.html, styles.css, 그리고 script.js 파일로 각각 저장한 후, 웹 브라우저에서 index.html 파일을 열면 간단한 웹 계산기를 사용할 수 있다.\n\n\n\n\n\n웹 계산기 실행\n챗GPT에 웹 계산기를 실행하려면 웹 브라우져를 열고 index.html 파일을 열거나 index.html 파일을 파일탐색기로 찾아가서 두번 클릭하여 실행하면 웹브라워저가 열리면서 웹 계산기가 실행된다.\n\n\n\nstatkclee@dl MINGW32 /d/tcs/gpt-writing/code/calculator_web (main)\n$ tree\n.\n|-- index.html\n|-- script.js\n`-- style.css\n\n0 directories, 3 files\n\n\n\n\n\n\n\n웹 전자계산기"
  },
  {
    "objectID": "text_to_X.html#실행-프롬프트",
    "href": "text_to_X.html#실행-프롬프트",
    "title": "26  생성형 AI",
    "section": "26.3 실행 프롬프트",
    "text": "26.3 실행 프롬프트\n프롬프트를 작성한 후에는 프로그램을 실행할 수 있는 프롬프트를 작성해야 한다. 프롬프트는 run python code of calculator와 같이 작성하면 된다. 챗GPT가 작성한 파이썬 계산기 프로그램을 실행하는 방법을 상세히 알려주어 사용자가 따라하면 된다.\n\n\n\n\n\n\nhow to run this python code\n\n\n\nPython 코드를 실행하려면 시스템에 Python이 설치되어 있어야 합니다. 다음 단계에 따라 간단한 계산기를 위한 Python 코드를 실행할 수 있습니다:\n\n메모장이나 서브라인 텍스트와 같은 텍스트 편집기를 열고 Python 코드를 새 파일에 붙여넣습니다.\n파일 확장명을 .py로 지정하여 저장합니다(예: calculator.py).\n터미널 또는 명령 프롬프트 창을 엽니다.\ncd 명령을 사용하여 파일이 저장된 디렉토리로 이동합니다(예: cd Documents\\Python).\npython calculator.py를 입력하고 Enter 키를 눌러 프로그램을 실행합니다.\n\n그러면 프로그램이 실행되고 메뉴가 표시되며 사용자에게 원하는 연산과 숫자 두 개를 입력하라는 메시지가 표시됩니다. 사용자가 필요한 입력을 입력하면 프로그램이 해당 산술 연산을 수행하고 결과를 표시합니다.\n\n\n\n계산기 실행\n터미널 또는 명령 프롬프트 창을 열고, cd 명령을 사용하여 파일이 저장된 디렉토리로 이동한다. 파일이 D:\\tcs\\chatGPT\\code 폴더에 저장되어 있다면 cd D:\\tcs\\chatGPT\\code을 입력한다. 디렉토리로 이동한 후에는 python calculator.py를 입력하고 엔터(Enter) 키를 눌르게 되면 파이썬으로 작성된 계산기 프로그램이 실행된다.\n\n\n\nCLI 파이썬 프로그램\n\n\n\n\n26.3.1 GUI 계산기\n계산기에 그래픽 사용자 인터페이스(GUI)를 추가하여 사용자가 더욱 편리하게 이용할 수 있도록 개선한다. 다양한 GUI 라이브러리가 존재하지만, 여기서는 tkinter 패키지를 선택하여 개발을 진행한다.\n\n지시명령어\n챗GPT에 파이썬 언어로 계산기 프로그램을 작성하라는 지시명령어를 내린다. 지시명령어는 please add gui with tkinter와 같이 작성하면 된다. CLI 계산기 프로그램보다 GUI 계산기는 사용자에게는 편리하지만 개발해야 되는 코드는 더욱 복잡해진다.\n::: {.callout-note collapse=“true”} ### please add gui with tkinter\nSure, here is an example of the same calculator program using the Tkinter library to create a graphical user interface (GUI):\n…\nIn this code, we first import the Tkinter library using the alias tk. Then we define four functions add(), subtract(), multiply(), and divide() that perform the corresponding arithmetic operations on the numbers entered by the user. Each function retrieves the input values from the Entry widgets using the get() method, performs the arithmetic operation, and updates the text of the Label widget to display the result.\nWe then create the main window using the Tk() constructor and set its title using the title() method. Next, we create two Label widgets and two Entry widgets to allow the user to enter the two numbers.\nWe also create four Button widgets, one for each arithmetic operation, and set their text and width. The command parameter is used to specify the function that should be called when the button is clicked.\nFinally, we create a Label widget to display the result of the arithmetic operation, and call the mainloop() method to start the event loop and display the GUI.\n\nimport tkinter as tk\n\n# Function to perform addition\ndef add():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 + num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform subtraction\ndef subtract():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 - num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform multiplication\ndef multiply():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 * num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform division\ndef divide():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 / num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n    except ZeroDivisionError:\n        label_result.config(text=\"Cannot divide by zero\")\n\n# Create the main window\nwindow = tk.Tk()\nwindow.title(\"Simple Calculator\")\n\n# Create the number input fields\nlabel_num1 = tk.Label(window, text=\"Number 1:\")\nlabel_num1.pack()\nentry_num1 = tk.Entry(window)\nentry_num1.pack()\n\nlabel_num2 = tk.Label(window, text=\"Number 2:\")\nlabel_num2.pack()\nentry_num2 = tk.Entry(window)\nentry_num2.pack()\n\n# Create the operation buttons\nbutton_add = tk.Button(window, text=\"+\", width=10, command=add)\nbutton_add.pack()\n\nbutton_subtract = tk.Button(window, text=\"-\", width=10, command=subtract)\nbutton_subtract.pack()\n\nbutton_multiply = tk.Button(window, text=\"*\", width=10, command=multiply)\nbutton_multiply.pack()\n\nbutton_divide = tk.Button(window, text=\"/\", width=10, command=divide)\nbutton_divide.pack()\n\n# Create the result label\nlabel_result = tk.Label(window, text=\"Result: \")\nlabel_result.pack()\n\n# Run the main loop\nwindow.mainloop()\n\n\n\nGUI 계산기 실행\nCLI 계산기 실행방식과 동일하게 how to run this python code 지시명령어를 통해 GUI 계산기를 실행하는 방법을 안내받아 작성한 GUI 계산기를 실행한다. 텍스트 편집기를 열어 파이썬 코드를 새 파일에 붙여넣는다. 파일을 .py 확장명으로 저장한다(예: calculator.py). 터미널이나 명령 프롬프트 창을 연다. cd 명령을 사용해 파일이 저장된 디렉토리로 이동한다(예: cd D:\\tcs\\chatGPT\\code). 마지막으로 python calculator.py를 입력하고 엔터(Enter) 키를 눌러 프로그램을 실행한다.\n\n\n\nGUI 파이썬 프로그램\n\n\n\n\n\n\n이광춘주용우. (2020). 사람과 인공지능의 일자리 경쟁 요인과 협업 방안. 디지털경영연구 Vol.6 No.2 pp.39-50."
  },
  {
    "objectID": "text_to_X.html#이미지-생성",
    "href": "text_to_X.html#이미지-생성",
    "title": "26  생성형 AI",
    "section": "26.3 이미지 생성",
    "text": "26.3 이미지 생성\nTTI(텍스트-투-이미지)는 텍스트를 입력으로 받아 그에 맞는 이미지를 생성하는 기술이다. 예를 들어, “해변에서 일몰을 보는 사람”이라는 프롬프트를 입력하면, 해당하는 일몰과 해변, 사람이 함께하는 이미지를 생성한다. 이런 방식으로, 사용자는 자신이 원하는 시나리오나 객체, 장면을 텍스트로 기술하면, TTI 알고리즘이 텍스트를 이미지로 변환한다. 이미지 생성은 GAN(Generative Adversarial Network)와 VAE(Variational Autoencoder) 같은 생성 모형의 발전을 통해 시작되었고 텍스트-이미지 모형은 컴퓨터 비전과 자연어 처리를 결합하면서 성큼 상용화에 가까워졌으며, 최근 GPT-3와 같은 언어 모형을 텍스트-이미지 모형에 적용하여 텍스트를 이미지로 변환하는 기술이 급속히 발전하고 있다.\n\n\n\nText-to-Image 이미지 생성과정\n\n\n\n\n\n\n\n\n텍스트에서 이미지로 진화\n\n\n\n프롬프트(Prompt)는 이전에 학습된 모형 가중치(weight)를 새로운 맥락에서 재사용할 수 있는 메커니즘으로, 새롭게 등장한 극단적인 형태의 전이학습(Transfer Learning)으로 볼 수 있다. 수년 동안 자연어 처리(NLP) 작업에 특화된 모델을 개발하면서, 미리 학습된 가중치를 더 효율적으로 재사용하는 방법이 점차 발전해왔다. 2013년에 등장한 word2vec은 범용적인 단어 임베딩을 정적 라이브러리 형태로 제공하게 되면서, 이 임베딩을 다양한 NLP 모형의 입력으로 활용되기 시작했다.\n2010년대 후반 ELMo와 BERT 같은 모형이 미세조정(Fine-Tuning) 기능을 도입함으로써 사전 학습된 모형의 전체 구조를 재활용하면서 특정 작업에 필요한 최소한의 가중치만 추가하는 방식이 자연어처리(NLP() 분야 표준이 되었다.\n2020년에 등장한 GPT-3는 프롬프트를 통해 전이 학습의 새로운 장을 열었다. 이제 추가적인 매개변수나 재학습 없이도, 단순한 텍스트 입력만으로 거의 모든 NLP 작업을 수행할 수 있게 되었다. 이러한 NLP 모형뿐만 아니라 Stable Diffusion, DALL-E와 같은 텍스트-이미지 변환(Text-to-Image) 모형도 전이 학습 스펙트럼의 한 자리를 당당히 차지하고 있다. (Turc, 2022)\n\n\n\n26.3.1 뉴스 이미지 사례\nTTI(Text-to-Image) 기술을 활용하여 뉴스기사에 적합한 이미지를 생성할 수 있다. 예를 들어, 뉴스기사 “누리호, 힘차게 날아올랐다…美도 달성하지 못한 진기록”에서는 한국이 독자 기술로 개발한 로켓 ’누리호’가 성공적으로 발사되어 우주로 향한 것을 다루고 있다. 이러한 주제에 맞는 이미지를 TTI 기술을 통해 생성할 수 있다.\n이미지 생성 엔진을 특정하고 적절한 텍스트 프롬프트를 입력하면, 해당 설명에 부합하는 이미지가 생성될 것이다. 뉴스기사에 실릴 이미지는 뉴스기사의 시각적인 요소를 풍부하게 해주며, 독자들이 기사의 내용을 더 쉽게 이해할 수 있게 도와준다. 하지만, 뉴스기사는 사실도 중요하기 때문에 필히 생성형 AI가 제작한 이미지라는 사실을 밝히고 독자의 이해를 돕기 위한 이미지라는 것을 명기해야 한다.\n\n\n\n\n\n\n프롬프트: 아래 뉴스기사는 백틱기호(`) 세개 사이에 담겨져 있습니다. 다음 뉴스기사를 이미지로 나타내기 위해 midjourney text prompt를 작성해세요.\n\n\n\n\n\n누리호, 힘차게 날아올랐다…美도 달성하지 못한 진기록\n\n김진원입력 2023. 5. 25. 18:43수정 2023. 5. 25. 21:14\n\n한국이 독자 기술로 개발한 로켓 ‘누리호’가 25일 우주로 향했다. 실용위성을 탑재한 발사체를 쏘아 올린 첫 사례다. 누리호는 차세대 소형위성 2호를 목표 궤도인 고도 550㎞에 정확하게 올려놨다. 남극 세종기지에서 위성 신호를 정상 수신했다. 작년 6월 누리호 2차 발사에 이어 이번 3차 발사 프로젝트까지 성공적으로 수행하면서 한국은 세계적인 우주 과학 강국으로 우뚝 서게 됐다. 첫 로켓 개발 후 연속 발사 성공은 미국과 러시아, 중국도 달성하지 못한 진기록이다. \n\n누리호는 이날 오후 6시24분 전남 고흥군 나로우주센터 전용 발사대에서 우주로 날아올랐다. 오전 11시 발사를 결정한 이후 오후 5시께 연료와 산화제 주입을 차례로 완료했다. 누리호는 오후 6시24분 정각에 3500도 초고온 고압가스의 힘을 받아 하늘로 힘차게 솟구쳤다.\n\n\n누리호는 발사 뒤 1단과 위성을 감싼 덮개인 페어링, 2단을 차례로 떼어냈다. 고도 550㎞에선 주탑재 위성인 차세대 소형위성 2호를 분리했다. 이후 20초 간격으로 부탑재 위성인 큐브위성을 차례로 내보냈다. 다만 7기의 큐브위성 중 1기에 대해선 사출 성공 여부를 판단 중이다.\n\n누리호는 과학기술정보통신부와 한국항공우주연구원이 2010년부터 개발한 토종 발사체다. 한국이 지난 2차에 이어 3차 발사까지 성공하면서 50여 년의 세계 우주개발사(史)에서 찾아보기 힘든 발자취를 남기게 됐다. 윤석열 대통령은 “달에 가는 것이 쉽기 때문이 아니라 어렵기 때문에 도전한다”며 “어렵기 때문에 우리의 도전이 되고 꿈이 되는 것”이라고 말했다. 이어 “우리나라가 우주강국 G7에 들어가는 쾌거를 이뤘다”고 강조했다.\n\n고흥(나로우주센터)=김진원 기자 jin1@hankyung.com\n네, 한국형발사체 누리호 발사 성공에 대한 Midjourney 텍스트 프롬프트는 다음과 같습니다.\n\n한국형발사체 누리호가 우주로 발사되는 모습을 나타내는 이미지를 생성해 주세요.\n한국형발사체 누리호가 성공적으로 발사되어 목표 궤도에 진입하는 모습을 나타내는 이미지를 생성해 주세요.\n한국형발사체 누리호가 성공적으로 발사되어 위성을 궤도에 올리는 모습을 나타내는 이미지를 생성해 주세요.\n\n이 프롬프트를 사용하여 한국형발사체 누리호 발사 성공에 대한 이미지를 생성할 수 있습니다.\n\n\n\n아직 한글을 이미지 생성 AI 프롬프트로 사용하면 이미지 품질이 영문을 사용할 때와 비교하여 좋지 않기 때문에 챗GPT에서 미드저니 프롬프트를 생성한 후에 딥엘(deepl) 혹은 파파고 한영번역기를 사용하여 영문로 번역한 후에 이미지 생성 프롬프트로 사용할 것을 것을 추천한다.\n\n\n\n\n\n\n프롬프트(스타일 적용 전): South Korean launch vehicle Nuri successfully launches and enters its target orbit\n\n\n\n \n\n\n\n\n프롬프트(스타일 적용 후): South Korean launch vehicle Nuri successfully launches and enters its target orbit, cinematic light, extreme detail, panoramic, Craig Mullins\n\n\n\n\n\n\n\n프롬프트: South Korean launch vehicle Nuri successfully launches and enters its target orbit, Max Ernst, volumetric light\n\n\n\n그림 26.1: 미드저니 프롬프트를 사용하여 이미지 생성과정\n\n\n\n\n26.3.2 이미지 생성 프로세스\n프롬프트를 넣어 이미지를 생성하는 것은 쉽지만, 원하는 이미지를 텍스트 프롬프트만으로 생성하는 것은 어려운 일이다. 이미지를 생성하는 과정은 복잡한 작업이며 경우에 따라 다양한 기술과 방법이 필요하지만, 과정을 크게 세 가지 주요 단계로 구분할 수 있다.\n첫 번째 단계는 이미지를 생성할 엔진을 선택한다. AI가 생성하는 이미지가 사람마다 평가가 달라 주관적으로 갈리지만 다음과 같이 엔진의 특성을 가늠할 수 있다. 달리(DALL-E)는 텍스트를 기반으로 다양한 스타일과 형태의 이미지를 생성할 수 있으며, 미드저니(Midjourney)는 특정 주제나 컨셉에 초점을 맞춘 이미지 생성이 가능하고, 오픈소스 스테이블 디퓨젼(Stable Diffusion)은 시간에 따른 이미지 변화를 고려한 복잡한 이미지를 생성할 수 있다. 각 엔진마다 고유한 특성과 장점을 가지고 비용도 발생할 수 있으니, 생성하려는 이미지 목적과 요구 사항에 따라 적절한 엔진을 선택한다.\n두 번째 단계는 프롬프트를 작성한다. 프롬프트는 생성하려는 이미지에 대한 설명이나 컨셉을 잘 작성하여 이미지 생성엔진에 전달한다. 동일한 프롬프트를 작성해도 엔진마다 생성되는 이미지는 다를 수 있으므로, 프롬프트 작성에 주의해야 한다. 예를 들어, 가장 기본적인 이미지 생성을 위해 “누리호 로켓이 하늘을 향해 발사되는 모습”와 같이 프롬프트를 작성할 수 있다.\n마지막으로, 이미지가 생성된 후에는 추가적인 후처리 과정을 거쳐 최종 이미지를 완성한다. AI 가 생성한 이미지는 가로와 세로 길이가 동일한 정사각형 이미지가 대부분으로 ‘아웃페인팅’(Out-Painting) 기법으로 이미지 프레임의 바깥 부분을 인공지능이 상상해서 그려주는 이미지 확장 기능을 사용하는 등 후처리 과정을 거쳐 최종 이미지를 완성한다.\n\n\n\n생성형 AI 이미지 생성과정\n\n\n\n\n26.3.3 이미지 생성 프롬프트\n생성형 AI로 고품질 이미지를 빠르게 얻는 비법은 프롬프트 작성에 있다. 프롬프트는 AI가 이미지를 생성할 때 참조하는 지침이기 때문에, 이를 잘 구성하면 원하는 스타일과 특성을 가진 이미지를 쉽고 빠르게 얻을 수 있다. 모든 요소를 고려하여 프롬프트를 작성하면, 더욱 정교하고 다양한 이미지를 생성할 수 있지만, 대체로 대상, 질감, 카메라 각도, 사용할 사진기나 렌즈의 종류, 이미지의 종횡비, 스타일, 화가나 감독의 스타일, 효과, 빛의 종류 등을 프롬프트를 작성할 때 주로 포함시킨다.\n\n\n\n이미지 생성 프롬프트 고려사항\n\n\n예를 들어, 고품질의 사진 형식의 자동차 이미지를 원한다면 프롬프트를 “DSRL로 촬영한 금속 표면의 스포츠 자동차, 16:9 비율, Cinematic 라이팅”과 같이 작성할 수 있다. 이렇게 하면 AI는 DSRL 카메라로 촬영된 것처럼 보이는 금속 표면의 스포츠 자동차 이미지를 16:9의 종횡비와 Cinematic 라이팅으로 생성한다.\n또는, 웹툰 스타일의 곰 이미지를 원한다면 “웹툰 스타일의 털이 빳빳한 곰, 1:1 비율, Fairy lighting”이라고 프롬프트를 설정할 수 있다. 이 경우, AI는 웹툰 스타일로 털이 빳빳한 곰을 1:1 비율과 Fairy lighting으로 그릴 것이다.\n\n\n\n\n\n\n고품질 자동차 사진 이미지\n\n\n\n \n\n\n\n\n웹툰 스타일의 곰 이미지\n\n\n\n그림 26.2: 뉴빙 이미지 생성자(Image Creator)를 기반엔진으로 생성한 이미지\n\n\n\n\n\n\nTurc, J. (2022). Crafting prompts for text-to-image models. In Medium. Towards Data Science. https://towardsdatascience.com/the-future-of-crafting-prompts-for-text-to-image-models-fc7d9614cb65\n\n\n이광춘주용우. (2020). 사람과 인공지능의 일자리 경쟁 요인과 협업 방안. 디지털경영연구 Vol.6 No.2 pp.39-50."
  },
  {
    "objectID": "text_to_X.html#예술과-사진",
    "href": "text_to_X.html#예술과-사진",
    "title": "26  생성형 AI",
    "section": "28.1 예술과 사진",
    "text": "28.1 예술과 사진\n\nAbstractSurrealLandscape PhotographyPortrait PhotographyMinimalism\n\n\n“Vibrant colors,” “Geometric shapes,” “Abstract patterns,” “Movement and flow,” “Texture and layers.”\n\n\n\n\n\n\n\n“Dreamlike,” “Surreal landscapes,” “Mystical creatures,” “Twisted reality,” “Surreal still life.”\n\n\n\n\n\n\n\n“Majestic mountains,” “Lush forests,” “Glittering lakes,” “Desert dunes,” “Golden sunsets.”\n\n\n\n\n\n\n\n“Emotive eyes,” “Intense gazes,” “Contemplative mood,” “Expressive gestures,” “Stylized poses”.\n\n\n\n\n\n\n\n“Simplicity,” “Clean lines,” “Minimal colors,” “Negative space,” “Minimal still life.”"
  },
  {
    "objectID": "text_to_X.html#아트-스타일",
    "href": "text_to_X.html#아트-스타일",
    "title": "26  생성형 AI",
    "section": "28.2 아트 스타일",
    "text": "28.2 아트 스타일\n\nimpressionismRealismPop ArtStreet PhotographyNight Photography\n\n\n“Blurry brushstrokes,” “Painted light,” “Impressionistic landscapes,” “Pastel colors,” “Impressionistic portraits.”\n\n\n\n\n\n\n\n“Hyper-realistic textures,” “Precise details,” “Realistic still life,” “Realistic portraits,” “Realistic landscapes.”\n\n\n\n\n\n\n\n“Bold colors,” “Stylized portraits,” “Famous faces,” “Pop art still life,” “Pop art landscapes.”\n\n\n\n\n\n\n\n“Candid moments,” “Urban landscapes,” “Street life,” “Stories in motion,” “Street portraits.”\n\n\n\n\n\n\n\n“Lit cityscapes,” “Starry skies,” “Moonlit landscapes,” “Night time portraits,” “Long exposures.”\n\n\n\n\n\n\n\n\n\n28.2.1 뉴스 이미지 사례\nTTI(Text-to-Image) 기술을 활용하여 뉴스기사에 적합한 이미지를 생성할 수 있다. 예를 들어, 뉴스기사 “누리호, 힘차게 날아올랐다…美도 달성하지 못한 진기록”에서는 한국이 독자 기술로 개발한 로켓 ’누리호’가 성공적으로 발사되어 우주로 향한 것을 다루고 있다. 이러한 주제에 맞는 이미지를 TTI 기술을 통해 생성할 수 있다.\n이미지 생성 엔진을 특정하고 적절한 텍스트 프롬프트를 입력하면, 해당 설명에 부합하는 이미지가 생성될 것이다. 뉴스기사에 실릴 이미지는 뉴스기사의 시각적인 요소를 풍부하게 해주며, 독자들이 기사의 내용을 더 쉽게 이해할 수 있게 도와준다. 하지만, 뉴스기사는 사실도 중요하기 때문에 필히 생성형 AI가 제작한 이미지라는 사실을 밝히고 독자의 이해를 돕기 위한 이미지라는 것을 명기해야 한다.\n\n\n\n\n\n\n프롬프트: 아래 뉴스기사는 백틱기호(`) 세개 사이에 담겨져 있습니다. 다음 뉴스기사를 이미지로 나타내기 위해 midjourney text prompt를 작성해세요.\n\n\n\n\n\n누리호, 힘차게 날아올랐다…美도 달성하지 못한 진기록\n\n김진원입력 2023. 5. 25. 18:43수정 2023. 5. 25. 21:14\n\n한국이 독자 기술로 개발한 로켓 ‘누리호’가 25일 우주로 향했다. 실용위성을 탑재한 발사체를 쏘아 올린 첫 사례다. 누리호는 차세대 소형위성 2호를 목표 궤도인 고도 550㎞에 정확하게 올려놨다. 남극 세종기지에서 위성 신호를 정상 수신했다. 작년 6월 누리호 2차 발사에 이어 이번 3차 발사 프로젝트까지 성공적으로 수행하면서 한국은 세계적인 우주 과학 강국으로 우뚝 서게 됐다. 첫 로켓 개발 후 연속 발사 성공은 미국과 러시아, 중국도 달성하지 못한 진기록이다. \n\n누리호는 이날 오후 6시24분 전남 고흥군 나로우주센터 전용 발사대에서 우주로 날아올랐다. 오전 11시 발사를 결정한 이후 오후 5시께 연료와 산화제 주입을 차례로 완료했다. 누리호는 오후 6시24분 정각에 3500도 초고온 고압가스의 힘을 받아 하늘로 힘차게 솟구쳤다.\n\n\n누리호는 발사 뒤 1단과 위성을 감싼 덮개인 페어링, 2단을 차례로 떼어냈다. 고도 550㎞에선 주탑재 위성인 차세대 소형위성 2호를 분리했다. 이후 20초 간격으로 부탑재 위성인 큐브위성을 차례로 내보냈다. 다만 7기의 큐브위성 중 1기에 대해선 사출 성공 여부를 판단 중이다.\n\n누리호는 과학기술정보통신부와 한국항공우주연구원이 2010년부터 개발한 토종 발사체다. 한국이 지난 2차에 이어 3차 발사까지 성공하면서 50여 년의 세계 우주개발사(史)에서 찾아보기 힘든 발자취를 남기게 됐다. 윤석열 대통령은 “달에 가는 것이 쉽기 때문이 아니라 어렵기 때문에 도전한다”며 “어렵기 때문에 우리의 도전이 되고 꿈이 되는 것”이라고 말했다. 이어 “우리나라가 우주강국 G7에 들어가는 쾌거를 이뤘다”고 강조했다.\n\n고흥(나로우주센터)=김진원 기자 jin1@hankyung.com\n네, 한국형발사체 누리호 발사 성공에 대한 Midjourney 텍스트 프롬프트는 다음과 같습니다.\n\n한국형발사체 누리호가 우주로 발사되는 모습을 나타내는 이미지를 생성해 주세요.\n한국형발사체 누리호가 성공적으로 발사되어 목표 궤도에 진입하는 모습을 나타내는 이미지를 생성해 주세요.\n한국형발사체 누리호가 성공적으로 발사되어 위성을 궤도에 올리는 모습을 나타내는 이미지를 생성해 주세요.\n\n이 프롬프트를 사용하여 한국형발사체 누리호 발사 성공에 대한 이미지를 생성할 수 있습니다.\n\n\n\n\n\n\n\n\n\n프롬프트(스타일 적용 전): South Korean launch vehicle Nuri successfully launches and enters its target orbit\n\n\n\n \n\n\n\n\n프롬프트(스타일 적용 후): South Korean launch vehicle Nuri successfully launches and enters its target orbit, cinematic light, extreme detail, panoramic, Craig Mullins\n\n\n\n\n\n\n\n프롬프트: South Korean launch vehicle Nuri successfully launches and enters its target orbit, Max Ernst, volumetric light\n\n\n\n그림 28.1: ?(caption)\n\n\n\n\n\n\nTurc, J. (2022). Crafting prompts for text-to-image models. In Medium. Towards Data Science. https://towardsdatascience.com/the-future-of-crafting-prompts-for-text-to-image-models-fc7d9614cb65\n\n\n이광춘주용우. (2020). 사람과 인공지능의 일자리 경쟁 요인과 협업 방안. 디지털경영연구 Vol.6 No.2 pp.39-50."
  }
]