[
  {
    "objectID": "editor.html",
    "href": "editor.html",
    "title": "6  편집기",
    "section": "",
    "text": "7 맞춤법 검사"
  },
  {
    "objectID": "editor.html#paradigm",
    "href": "editor.html#paradigm",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.1 저작방식 패러다임",
    "text": "3.1 저작방식 패러다임\n위지위그(WYSIWYG: What You See Is What You Get)는 “보는 대로 얻는다”는 의미로, 사용자가 문서를 편집할 때 화면에 보이는 형태가 최종 출력물과 동일하게 나오는 편집 방식이다. 대다수 현대 워드 프로세서에서 위지위그 방식을 사용하고 있다. 사용자에게 직관적이고 쉽게 접근할 수 있는 인터페이스를 제공하기 때문이다.\n그러나 위지위그 방식에도 단점은 있다. 마크다운, TeX 같은 텍스트 기반 편집 방식은 문서 호환성과 범용성을 위해 쓰이는 반면, 위지위그 저작방식은 호환성과 범용성을 다소 희생할 수 밖에 없다. 특히 복잡한 문서나 웹 페이지를 작성하는 경우, 코딩방식으로 전환하여 수작업으로 최적화를 시도하더라도 완벽한 해결이 어렵다. 예를 들어, 위지위그 편집기에서 문서를 작성하면 뒷단에 불필요한 코드나 태그가 자동으로 생성되어 문서 최적화를 방해하며, 시간이 지남에 따라 누적되어 호환성과 재현성에 심각한 문제를 야기한다. 1 2\n위지윔(WYSIWYM: What You See Is What You Mean)은 “당신이 보는 것은 당신이 뜻하는 것이다”라는 의미로, 위지위그(WYSIWYG) 방식의 한계를 극복하기 위해 나온 대안 편집 방식이다. 위지윔 방식에서는 사용자가 무엇을 의미하는지를 중점으로 두어, 본래의 코드 구조를 더 명확하게 알 수 있다. 코드 의미를 직접적으로 반영하여, 불필요한 요소 없이 효율적으로 문서를 작성할 수 있는 장점이 있다.\nRStudio의 Visual 편집 기능은 위지윔 지향점을 잘 반영하고 있다. 사용자는 복잡한 코드나 태그 없이도 의미 있는 문서 구조를 쉽게 생성하고 관리할 수 있어 문서 최적화와 호환성을 높일 수 있으며, 더욱 높은 문서 저작 생산성을 달성할 수 있다.\n오픈 소스 LaTeX 편집기인 LyX는 위지윔 방식을 초기부터 채택하여 사용자에게 코드 본래 구조와 의미를 명확하게 파악할 수 있는 인터페이스를 제공했다. 이러한 접근법은 복잡한 수식이나 과학적인 문서를 작성할 때 특히 유용하며, \\(\\LaTeX\\) 복잡성을 낮추면서도 강력한 기능을 최대한 활용할 수 함으로써 위지위그 한계를 극복했다는 평가를 받고 있다.\n\n\n문서 컴파일\n위지위그"
  },
  {
    "objectID": "editor.html#main-features",
    "href": "editor.html#main-features",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.2 워드 프로세서 3\n",
    "text": "3.2 워드 프로세서 3\n\n워드 프로세서(Word Processor)는 문서 제작을 위한 소프트웨어로, 시각적으로 잘 구성된 인터페이스와 다양한 편집 기능을 제공한다. 사용자는 이러한 기능을 통해 원하는 형태와 구조를 갖는 문서를 쉽게 저작할 수 있다. 워드 프로세서는 글자 스타일, 문단 구성, 이미지 삽입, 표 만들기 등 다양한 기능이 포괄적으로 제공되며, 윈도우에 기본 제공되는 메모장(Notepad) 텍스트 편집기보다 훨씬 더 풍부한 문서 작성이 가능하다. 2023년 9월 1일부로 윈도우에서 무료로 제공되던 워드패드(WordPad)에 대한 지원도 없어지고 윈도우에서도 제거될 것이라는 발표가 있었다. 따라서, 서식이 필요한 문서를 저작할 경우 MS 워드(Word)나 아래한글과 같은 워드 프로세서를 사용해야 된다.\n아래한글은 국내에서 널리 사용되는 워드 프로세서 중 하나로, 한국 문화와 업무 환경에 맞춰 특화된 기능을 제공한다. 정부나 공공기관에서 사용하는 특별한 문서 양식을 미리 저장해 두어, 사용자가 양식을 찾는 데 시간을 쓰지 않고 글쓰기에 바로 집중할 수 있도록 큰 도움을 주었다.\n\n\n국산 워드 프로세서\n해외 워드 프로세서"
  },
  {
    "objectID": "editor.html#visual-markdown-main-features",
    "href": "editor.html#visual-markdown-main-features",
    "title": "6  편집기",
    "section": "6.3 Visual 마크다운 편집기",
    "text": "6.3 Visual 마크다운 편집기\nVisual 마크다운 기능을 사용하게 되면 과학/기술 문서 작성의 용이성 뿐만 아니라 인용(Citation), 문학적 프로그래밍(literate programming) 을 통한 재현가능한 과학문서 구현, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 문서 동시 생성이 가능하다.\n\n\n\nRStudio Visual 마크다운 편집기능"
  },
  {
    "objectID": "editor.html#latex-editor",
    "href": "editor.html#latex-editor",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.3 \\(\\LaTeX\\) 편집기",
    "text": "3.3 \\(\\LaTeX\\) 편집기\n\\(\\LaTeX\\) 편집기는 운영체제나 사용자의 필요에 따라 다양한 선택옵션이 존재한다. 특히, 클라우드 기반 Overleaf, 설치형 TeXstudio, 데이터 과학에 특화된 RStudio IDE가 대표적이다. 편집기들은 \\(\\LaTeX\\)에 특화되었거나, 일부 \\(\\LaTeX\\) 기능을 분리하여 사용자 요구에 맞춰 활용할 수 있다.\n\n\n\\(\\LaTeX\\) 편집기 다양성\n\nOverleaf는 초기에 ShareLaTeX 서비스로 시작해 현재는 클라우드 기반의 \\(\\LaTeX\\) 편집 기능을 제공한다. 클라우드 특성을 살려 문서의 공유와 협업이 용이하다는 점이 큰 장점이다.\nTeXstudio는 Texmaker 후속으로 오픈 소스 \\(\\LaTeX\\) 편집기로 제공된다. 사용자는 TeXstudio 웹사이트에서 다운로드 받아 설치할 수 있으며, GitHub texstudio 저장소를 통해 한국어 현지화 작업에도 참여할 수 있다.\n\n\n클라우드 편집기\n설치형 편집기"
  },
  {
    "objectID": "editor.html#rstudio-ide",
    "href": "editor.html#rstudio-ide",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.4 RStudio IDE 편집기",
    "text": "3.4 RStudio IDE 편집기\nRStudio IDE는 처음 데이터 과학 R 프로그래밍 언어를 위한 통합개발환경으로 시작하였으나 이제는 파이썬을 비롯하여 SQL, Observable JS 등 데이터 과학 전분야를 담당하고 있다. 특히, 데이터 분석, 시각화 및 문서 작업을 간편하게 할 수 있도록 다양한 도구와 기능을 제공할 뿐만 아니라, Shiny 웹 애플리케이션 개발, Plumber를 통한 API 개발, 쿼토(Quarto)/R 마크다운을 활용해 다양한 데이터 과학 산출물을 제작할 수 있다. 또한, Git 버전 관리 시스템과 통합되어 코드 이력을 쉽게 추적하고 관리할 수 있고 GitHub과 연결하여 협업기능도 지원한다.\nRStudio 코드 편집기는 자동 완성, 구문 강조, 맞춤법 검사 등 기능을 제공하여 개발자 편의를 향상시켰고, GUI 데이터 뷰어를 통해 데이터프레임과 데이터 객체를 직접적으로 시각적으로 살펴볼 수 있으며, 내장 패키지 관리 시스템을 통해 R 패키지도 손쉽게 설치하고 관리할 수 있다.\n웹앱 Shiny 애플리케이션 개발과 테스트도 가능하고, 문서화 프로그래밍을 차세대 R 마크다운 쿼토(Quarto)를 이용하여 코드, 데이터, 그래프를 하나의 문서로 통합하여 구현할 수 있을 뿐만 아니라 팬독(Pandoc)을 통해 다양한 형태 문서를 자동으로 생성할 수 있다.\n\n\nRStudio 문서화 프로그래밍 사례\n\n\n3.4.1 Visual 마크다운 편집기\nVisual 마크다운 기능을 사용하게 되면 과학/기술 문서 작성의 용이성 뿐만 아니라 인용(Citation), 문학적 프로그래밍(literate programming) 을 통한 재현가능한 과학문서 구현, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 문서 동시 생성이 가능하다.\n\n\nRStudio Visual 마크다운 편집기능\n\n\n3.4.2 맞춤법 검사"
  },
  {
    "objectID": "editor.html#쿼토-설치",
    "href": "editor.html#쿼토-설치",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.5 쿼토 설치",
    "text": "3.5 쿼토 설치\n쿼토(Quarto) 웹사이트에서 Quarto CLI 엔진과 통합개발도구(IDE)를 설치한다. 쿼토 CLI를 지원하는 IDE는 VS Code, RStudio, Jupyter, VIM/Emacs 와 같은 텍스트 편집기가 포함된다. IDE까지 설치를 했다면 문학적 프로그래밍(literate programming)을 통해 사람이 저작하는 마크다운(Markdown)과 기계가 저작하는 프로그래밍 언어(R/Python/SQL/줄리아/자바스크립트)를 결합한 다양한 문서저작을 시작할 수 있다.\n\n\n쿼토 도구모음\n\n\n3.5.1 윈도우 설치\n쿼토(Quarto)를 윈도우 운영체제에 설치하기 위해서는 몇 가지 단계를 거쳐야 한다.\n\n3.5.2 쿼토 다운로드\n먼저 Quarto 공식 웹사이트에서 윈도우용 설치 파일을 다운로드한다. 웹사이트 “Download Quarto CLI” 윈도우 버전을 선택하여 다운로드한다.\n\n\n쿼토 다운로드 화면\n\n쿼토 설치\n다운로드한 파일을 더블클릭 실행하여 설치를 진행한다. 설치 마법사가 나타나면 지시에 따라 설치를 완료하면 된다. 설치가 완료되면 환경 변수에 쿼토 설치 경로를 등록해야 한다. ‘제어판’을 열고 ’시스템과 보안’으로 이동한 다음 ’시스템’을 선택한다. ’고급 시스템 설정’을 클릭한 후 ’환경 변수’ 버튼을 누른다. ‘시스템 변수’에서 ’Path’ 변수를 찾아 Quarto의 설치 경로를 추가한다. 일반적인 경로는 C:\\Users\\&lt;사용자계정명&gt;\\AppData\\Local\\Programs\\Quarto\\bin과 같을 수 있다.\n\n\n쿼토 설치완료\n\n\n3.5.3 쿼토 CLI\n마지막으로 환경 변수 설정이 올바르게 이루어졌는지 확인하기 위해 명령 프롬프트나 터미널을 열어 quarto --version 혹은 quarto --help 명령을 입력한다. 올바른 버전 번호가 출력되면 설치가 성공적으로 완료된 것이다.\n\n\n쿼토 CLI 실행화면\n\n\n\n\n\n\n\n\n\n\n\n윈도우 시스템의 경우 초기 윈도우에서 쿼토 실행명령이 quarto.cmd 이였으나 quarto.exe도 지원된다. 즉, 제어판 → 환경 변수 설정 … 에서 \"C:\\Users\\사용자명\\AppData\\Local\\Programs\\Quarto\\bin 디렉토리를 등록한 후 quarto 명령어를 사용한다.\n\nSys.which(\"quarto\")\n                                                                  quarto \n\"C:\\\\Users\\\\사용자명\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\""
  },
  {
    "objectID": "editor.html#출판-플랫폼",
    "href": "editor.html#출판-플랫폼",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.7 출판 플랫폼",
    "text": "3.7 출판 플랫폼\n데이터 과학 분야에서 산출물을 공유하고 출판하는 것은 매우 중요한 단계로 효과적인 출판과 비용적인 면을 고려하여 최적 플랫폼과 도구를 선정한다. 데이터 과학 분야를 개척한 RStudio IDE로 과거 R 마크다운 산출물을 RPubs에 출판한 경험이 있다면, Quarto Pub은 그와 유사한 경험을 제공한다. 다른 대안으로는 netlify, GitHub Pages, RStudio Connect 등이 있다.\n\n\n쿼토 출판"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 디지털 글쓰기",
    "section": "",
    "text": "1 글쓰기\n글쓰기(Writing)는 언어를 사용하여 생각이나 정보를 표현하는 과정이다. 글쓰기는 말하기와 다르게 물리적인 형태로 기록되어 남겨지며, 시간과 공간의 제약을 받지 않아 글쓰기 결과물로 다양한 (디지털) 문서형태로 담아 지적유산으로 후대에 남길 수 있다. 정보 전달, 감정 표현, 이야기 전달 등 글쓰기는 다양한 목적을 갖고 있으며 최근에는 기계와 의사소통을 위해 강조되고 있는 교육용 파이썬, 데이터 과학 및 과학연구를 위한 R 프로그래밍도 글쓰기 범주에 포함되고 있다.\n글쓰기는 정보 전달의 가장 기본적인 방법 중 하나로, 시간과 공간의 제약을 받지 않는 특징이 있다. 물론 글쓰기 결과물에 담긴 문서에는 그 시대 시간적 공간적 특성도 담겨있다.\n글쓰기를 통해 우리는 지식을 전달하고, 이야기를 전달하며, 감정을 표현할 수 있다. 또한 글쓰기를 통해 우리는 법률 문서와 계약서 등을 작성하여 사회적인 규칙과 약속을 정할 수 있고, 현대 사회를 지탱하는 과학기술지식도 글쓰기가 시작점이 된다. 인공지능 기술의 비약적인 발전으로 프로그래밍을 통한 코딩도 기계와 규칙을 정해 상호 커뮤니케이션하는 글쓰기로 부각되고 있다. 이러한 이유로 글쓰기는 매우 중요한 역할을 하고, 글쓰기 없이 고도화된 현대 사회생존은 불가능하다."
  },
  {
    "objectID": "index.html#디지털-문서-제작-패러다임",
    "href": "index.html#디지털-문서-제작-패러다임",
    "title": "챗GPT 디지털 글쓰기",
    "section": "1.1 디지털 문서 제작 패러다임",
    "text": "1.1 디지털 문서 제작 패러다임\n신속하고 빠르게 누구나 짧은 학습을 통해서 문서를 저작하고 출판할 수 있는 방식으로 인기를 얻은 아래한글 혹은 MS워드 워드프로세서를 사용하는데 이는 위지위그(WYSIWYG: What You See Is What You Get, “보는 대로 얻는다”)에 기초한 것으로 문서 편집 과정에서 화면에 포맷된 낱말, 문장이 출력물과 동일하게 나오는 방식이다. 이전 타자기 대비 경쟁력이 있었고 이를 바탕으로 문서편집기 소프트웨어가 대세로 떠올랐다.\n위지윅의 대척점에 있는 것이 위지윔(WYSIWYM, What You See Is What You Mean)으로 대표적인 것인 \\(LaTeX\\) 으로 구조화된 방식으로 문서를 작성하면 컴파일을 통해서 최종 문서가 미려한 출판가능한 PDF, PS, DVI 등 확장자를 갖는 출판결과물을 얻을 수 있다.\n\\(LaTeX\\)이 갖는 장점은 이제 프로그래밍 코드(R / 파이썬 / SQL / 쉘스크립트 / 자바스크립트 등)을 문서저작에 포함되며 literate programming 패러다임이 대세로 떠올랐고 현존하는 다양한 문서저작 문제에 대한 응답으로 자리를 매김하고 있다. 1"
  },
  {
    "objectID": "index.html#문서로-보는-민주주의",
    "href": "index.html#문서로-보는-민주주의",
    "title": "챗GPT 디지털 글쓰기",
    "section": "1.2 문서로 보는 민주주의",
    "text": "1.2 문서로 보는 민주주의\n대한민국은 권력을 입법권, 행정권, 사법권으로 나눠 권력을 나누었다. 세부적으보 보면 다소 차이는 있겠지만 법을 만드는 것은 결국 문서를 저작하는 것이고 대한민국 정부는 법에 담긴 문서를 실행하는 기관이고 사법부는 법 문서를 해석하는 기관으로 볼 수 있다. 결국 민주주의는 문서를 기반으로 존립하는 사회체계라고 볼 수 있다. 최근 들어 인공지능이 부상하면서 문서저작을 보조하던 수단에서 이제는 사람보다 더 나은 통찰력을 보이는 분야도 속속 등장하고 있다. 이런 측면에서 인공지능 기계를 현 민주주의 체계 내에 어떻게 녹여낼 것인지 관심이 높아지고 있다."
  },
  {
    "objectID": "index.html#디지털-문서-저작",
    "href": "index.html#디지털-문서-저작",
    "title": "챗GPT 디지털 글쓰기",
    "section": "1.3 디지털 문서 저작",
    "text": "1.3 디지털 문서 저작\n과거 둘로 쪼개져서 과학기술 문서저작 즉 논문 등은 \\(LaTeX\\) 기반 위지윔(WYSIWYM) 패러다임이 확고한 자리를 잡았지만 위지위그(WYSIWYG) 패러다임 기반 아래한글 워드와 같은 문서저작편집기 성능이 높아지면서 사실상 둘 사이 경계도 허물어졌다.\n하지만, 과학기술 논문 저작에 진실성, 재현성 등이 강조되고 빅데이터 기반 과학연구가 큰 성과를 보이고 프로그래밍이 과학기술 논문 저작에 주요한 역할을 하면서 이런 추세를 반영한 과학기술 저작 패러다임이 떠오르고 있다.\n이러한 추세를 반영한 도구의 발전도 함께 이뤄지면서 과학기술 저작은 물론 거의 모든 문서 저작분야에 큰 변화가 일어나고 있다."
  },
  {
    "objectID": "index.html#과학문서-저작",
    "href": "index.html#과학문서-저작",
    "title": "챗GPT 디지털 글쓰기",
    "section": "1.4 과학문서 저작",
    "text": "1.4 과학문서 저작\n\n심각한 현재상황\n마크다운 기초\n고급 마크다운\n문서저작 실무\n수학 수식"
  },
  {
    "objectID": "index.html#사례-한국-r-컨퍼런스2021",
    "href": "index.html#사례-한국-r-컨퍼런스2021",
    "title": "챗GPT 디지털 글쓰기",
    "section": "1.5 사례: 한국 R 컨퍼런스(2021)",
    "text": "1.5 사례: 한국 R 컨퍼런스(2021)\n\n컨퍼런스 웹사이트\n컨퍼런스 전 기획\n\n컨퍼런스 포스터\n컨퍼런스 후원\n\n컨퍼런스 본 행사\n\n발표 슬라이드\n발표 템플릿\n\n컨퍼런스 후 설문\n\n설문조사 보고서\n\n기타\n\n탄소중립 신재생 에너지 캠프"
  },
  {
    "objectID": "fonts.html#r-글꼴",
    "href": "fonts.html#r-글꼴",
    "title": "\n10  글꼴\n",
    "section": "\n10.3 R 글꼴",
    "text": "10.3 R 글꼴\n다각형을 그리는 path() 및 polygon(), 비트맵 이미지를 표시하는 raster(), 텍스트를 표시하는 text() 또는 textUTF8() 등을 통해 R에서 시각적 그래픽 요소를 구현하고 있다.\nR을 단순히 통계 언어로 생각하지 말고 적용범위를 확대해서 활용하면 데이터 과학 산출물을 다양한 전자문서로 제작하여 커뮤니케이션 할 수 있다. PDF, HTML, 워드 등 문서 뿐만 아니라, 파워포인트 같은 발표자료를 슬라이드로 제작하여 배포할 수 있다. 그래프 문법(Grammar of Graphics)에 따라 ggplot 시각화를 산출물에도 다양한 글꼴(font)을 반영하여 좀더 관심을 끌 수 있는 그래프 제작도 가능하다. 데이터 과학자나 개발자 관점에서도 통합개발환경(IDE)이 필요한데 개발과 저작에 집중할 수 있는 글꼴을 지정하여 활용할 경우 생산성도 높일 수 있고 좀더 쾌적한 환경에서 개발을 진행할 수 있다.\nR 스크립트 작성을 위한 글꼴과 그래프에 한글 글꼴(font)을 적용한다. ggplot을 비롯한 시각화를 위해 extrafont와 showtext 패키지를 활용하여 적절한 한글 글꼴을 사용할 뿐만 아니라 코딩 개발할 때 R 스크립트(.R) 및 R마크다운(.Rmd)에서도 적절한 한글글꼴 사용을 위해서 코딩관련 글꼴도 설치한다.\n기본적인 작업흐름은 운영체제에 먼저 외부에서 가져온 폰트를 설치한다. 그리고 나서 extrafont 팩키지 font_import() 함수를 사용해서 폰트를 R에서 불러 사용할 수 있도록 설치한다. 그리고 나서 loadfonts() 함수를 사용해서 글꼴을 ggplot등에서 불러 사용한다. 구글 글꼴을 사용하고자 할 경우 showtext 패키지를 사용해서 로컬 컴퓨터에 설치하여 적용한다.\n\n\nR 폰트/글꼴 설치"
  },
  {
    "objectID": "fonts.html#font-coding",
    "href": "fonts.html#font-coding",
    "title": "\n10  글꼴\n",
    "section": "\n10.4 R 코딩 글꼴",
    "text": "10.4 R 코딩 글꼴\n문서를 위해 작성하는데 사용되는 글꼴과 R 코딩을 위해 사용되는 글꼴은 차이가 난다. 왜냐하면 R 코딩에 사용되는 글꼴은 가독성이 좋아야하고 디버깅에 용이해야 된다. 영어는 consolas 글꼴을 많이 사용하는데 무료가 아니다. 그래서 consolas에서 영감을 받은 SIL 오픈 폰트 라이선스를 따르는 Inconsolata가 R 코딩에 많이 사용되고 있다. 하지만, R코드를 작성할 때 주석을 한글로 달거나 R마크다운 작업을 할 경우 유사한 기능을 하는 한글 글꼴이 필요하다.\n\n네이버 나눔고딕 코딩글꼴\nD2 Coding 글꼴\n\n“네이버 나눔고딕 코딩글꼴”과 “D2 Coding 글꼴”을 설치하고 나서 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창에서 Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다.\n\n\nD2 코딩폰트 설치"
  },
  {
    "objectID": "fonts.html#r-viz-font",
    "href": "fonts.html#r-viz-font",
    "title": "\n10  글꼴\n",
    "section": "\n10.5 ggplot 시각화 글꼴",
    "text": "10.5 ggplot 시각화 글꼴\nextrafont 팩키지에서 font_import() 함수로 운영체제(윈도우/리눅스)에 설치된 글꼴을 R로 가져온다. 그리고 나서 loadfonts() 함수를 사용해서 설치된 글꼴을 사용하는 작업흐름을 따르게 된다.\n\nlibrary(extrafont)\nfont_import(pattern = \"D2\")\n\nImporting fonts may take a few minutes, depending on the number of fonts and the speed of the system.\nContinue? [y/n] y\nScanning ttf files in C:\\Windows\\Fonts ...\nExtracting .afm files from .ttf files...\nC:\\Windows\\Fonts\\D2Coding-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2Coding-Ver1.3.2-20180524\nC:\\Windows\\Fonts\\D2CodingBold-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2CodingBold-Ver1.3.2-20180524\nC:\\Windows\\Fonts\\MOD20.TTF =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/MOD20\nFound FontName for 3 fonts.\nScanning afm files in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics\nWriting font table in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/fonttable.csv\nWriting Fontmap to C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/Fontmap...\n\nfont_import(pattern = \"Nanum\")\n\n\n10.5.1 ggplot 한글 글꼴 사례\nextrafont 패키지 loadfonts() 함수를 사용해서 ggplot에서 적용시킬 수 있는 글꼴을 불러냈다. R 내장 데이터셋 iris를 사용하여 나눔글꼴 “나눔손글씨 가람연꽃”(NanumGaRamYeonGgoc)을 기본 글꼴로 적용시켰다.\n\nlibrary(tidyverse)\n# extrafont::font_import(pattern = \"Nanum\", prompt = FALSE)\n\nextrafont::loadfonts() # 로컬 PC 에서 설치된 글꼴을 불러냄!!!\n\niris |&gt; \n  ggplot(aes(x=Sepal.Length, y=Petal.Length, color=Species)) +\n    geom_point()+\n    labs(title=\"붓꽃 데이터 한글 글꼴 적용\", color=\"붓꽃 종류\",\n         x = \"꽃받침 길이\", y = \"꽃잎 길이\") +\n    theme_minimal(base_family = \"NanumGaRamYeonGgoc\") +\n    theme(legend.position = \"top\")"
  },
  {
    "objectID": "fonts.html#font-showtext",
    "href": "fonts.html#font-showtext",
    "title": "\n10  글꼴\n",
    "section": "\n10.6 showtext 패키지 1\n",
    "text": "10.6 showtext 패키지 1\n\nextrafont 패키지를 통해 한자를 포함한 한글을 처리할 수 있었으나, extrafont는 트루타입폰트(.ttf)를 PDF 그래픽 장치에 초점을 맞춰 개발이 되었다. 따라서, 데이터과학 최종산출물이 PDF 형태 책이 아닌 경우 여러가지 면에서 다양한 한글 글꼴을 표현하는데 있어 한계가 있다.\n새로 개발된 showtext 팩키지는 Ghostscript같은 외부 소프트웨어를 활용하지 않고도 다양한 (그래픽) 글꼴을 지원한다. showtext로 R 그래프를 생성할 때, 다양한 글꼴(TrueType, OpenType, Type 1, web fonts 등)을 지원한다.\n과거 PDF와 같은 책형태로 정보를 공유하고 전달하는 방식이 주류를 이뤘다면 인터넷 등장 이후 웹으로 정보 생성과 소비가 주류로 떠오르게 되면서 글꼴에도 변화가 생겼다. 가까운 미래에는 웹을 우선시하는 글꼴이 대세를 이룰 것으로 보인다.\n\n\nshowtext 글꼴\n\n사용자가 그래프에 텍스트를 넣기 위해 R 함수에서 text()를 호출할 때 showtext가 활성화 되어 있으면 showtext 팩키지 text() 함수를 호출해서 그래픽 혹은 이미지 파일에 텍스트를 표현하고 그렇지 않는 경우는 디폴트 장치함수 text() 함수를 호출하게 되어 있다.\n내부적으로 상세 작동 로직은 글꼴 위치를 파악해서 글리프(glyph) 정보를 추출하고 비트맵 형식, 벡터그래픽 형식에 따라서 비트맵일 경우 raster() 장치함수를 호출하고, 벡터그래픽인 경우 path() 장치함수를 호출해서 기능을 수행한다.\n\n10.6.1 R 설치 글꼴 확인\nextrafont 팩키지 loadfonts() 함수를 통해 .ttf 파일 정보를 확인한다. 현재 구글 글끌 페이지에서 많은 한글 글꼴을 지원하지 않고 있다. 구글에서 전세계 글꼴을 지원하다보 동아시아 3국 대상으로 지원되는 글꼴은 적은 것으로 보인다.\n\n# 0. 환경설정 --------------------------------------------------------------------------\nlibrary(tidyverse)\nlibrary(showtext) # 글꼴, install.packages(\"showtext\")\nlibrary(extrafont)\nloadfonts()\n\n\n10.6.2 ggplot 글꼴 적용\n한글 글꼴을 바로 적용하기에 앞서 showtext 패키지 포함된 영문글꼴 적용 사례를 먼저 돌려보자. ggplot 그래픽에 적용되는 showtext 활용 기본 작업흐름은 다음과 같다.\n\n글꼴을 적재한다.\n그래픽 장치를 연다\n\nshowtext를 통해 텍스트를 표시한다고 지정한다.\n그래프를 그린다.\n장치를 닫는다.\n\n\nlibrary(tidyverse)\nlibrary(showtext)\n\n# ggplot 그래픽 ----------------------------\n\ndat &lt;- data.frame(cond = factor(rep(c(\"A\",\"B\"), each=200)), \n                  rating = c(rnorm(200),rnorm(200, mean=.8)))\n\nfont_add_google(\"Schoolbell\", \"bell\") # 글꼴 적재\n\nshowtext.begin() # 그래픽 장치 열기\n\nggplot(dat, aes(x=rating)) + \n  geom_histogram(binwidth=.5)+ \n　annotate(\"text\", 1, 2.1, family = \"bell\", size = 15, color=\"red\", label = \"histogram\")\n\n\n\n\n\n\nshowtext.end() # 그래픽 장치 닫기"
  },
  {
    "objectID": "fonts.html#font-showtext-korean-example-ttf",
    "href": "fonts.html#font-showtext-korean-example-ttf",
    "title": "\n10  글꼴\n",
    "section": "\n10.7 로컬 글꼴 적용",
    "text": "10.7 로컬 글꼴 적용\n로컬 컴퓨터에 저장된 .ttf 파일을 사용자 지정해서 가져온 후 이를 ggplot에 반영하여 한글을 R 그래프에 적용하는 것도 가능하다. showtext는 extrafont 보다 나중에 개발되어 extrafont가 로컬 컴퓨터에 설치된 글꼴을 ggplot에 구현되는데 전력을 다했다면 showtext는 이를 발판으로 나중에 개발되어 구글 폰트와 같은 인터넷 글꼴과 최근 웹출판에 대한 개념도 넣어 개발된 것이 차이점이다.\n\n# ３. 한글 그래픽 --------------------------------------------------------------------------\n## 나눔펜　스크립트\nfont_add(\"NanumBarunGothic\", \"NanumBarunGothic.ttf\")\n\nshowtext.auto()\n\np &lt;- ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +\n  theme(axis.title = element_blank(), axis.ticks = element_blank(),\n        axis.text = element_blank()) +\n  annotate(\"text\", 1, 1.1, family = \"NanumBarunGothic\", size = 15, color=\"red\",\n           label = \"한글 사랑\") +\n  annotate(\"text\", 1, 0.9, label = 'korean for \"Hello, world!\"',\n           family = \"NanumBarunGothic\", size = 12)\n\nprint(p)"
  },
  {
    "objectID": "fonts.html#글꼴-패키지",
    "href": "fonts.html#글꼴-패키지",
    "title": "\n10  글꼴\n",
    "section": "\n10.8 글꼴 패키지",
    "text": "10.8 글꼴 패키지\n로컬 컴퓨터에 설치된 R 관련 폰트 패키지를 확인할 수 있다.\n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n패키지명\n      버전\n      날짜\n      URL\n    \n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts"
  },
  {
    "objectID": "fonts.html#작업흐름",
    "href": "fonts.html#작업흐름",
    "title": "\n10  글꼴\n",
    "section": "\n10.9 작업흐름",
    "text": "10.9 작업흐름\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 모든 사용자용으로 설치한다.\n\n\n윈도우 나눔스퀘어 글꼴 설치\n\nfs 패키지 file_exists() 함수로 NanumSquare.ttf 파일이 존재함을 확인한다. 그리고 나서, font_import() 명령어로 글꼴을 설치한다. 경로(path =)를 지정하는 방식과 pattern =을 지정하는 방식이 있는데 둘 중 글꼴을 설치되는 방식으로 진행한다.\n\nlibrary(extrafont)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(paths = \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\n\n동일한 방식으로 마루부리 글꼴도 설치한다.\n\nfont_import(pattern = \"MaruBuri-ExtraLight.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Regular.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Bold.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Light.ttf\", prompt = FALSE)\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nextrafont::loadfonts(\"win\", quiet = TRUE)\n\navailable_fonts &lt;- extrafont::fonts()\n\navailable_fonts[str_detect(available_fonts, \"Maru|Nanum\")]\n\n [1] \"NanumGothic\"                 \"NanumGothicExtraBold\"       \n [3] \"NanumGothic Light\"           \"MaruBuri Bold\"              \n [5] \"MaruBuri Light\"              \"MaruBuri Regular\"           \n [7] \"MaruBuri SemiBold\"           \"NanumBarunGothic\"           \n [9] \"NanumBarunGothic Light\"      \"NanumBarunGothic UltraLight\"\n[11] \"NanumBarunpen\"               \"NanumBarunpen Bold\"         \n[13] \"NanumSquare_ac Bold\"         \"Nanum Brush Script\"         \n[15] \"Nanum GaRamYeonGgoc\"         \"NanumMyeongjo\"              \n[17] \"NanumMyeongjoExtraBold\"      \"Nanum Pen Script\"           \n[19] \"NanumSquare_ac ExtraBold\"    \"NanumSquare_ac Light\"       \n[21] \"NanumSquare_ac\"              \"NanumSquare Bold\"           \n[23] \"NanumSquare ExtraBold\"       \"NanumSquare Light\"          \n[25] \"NanumSquare\"                \n\nggplot_fonts_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n    theme_minimal()  +\n    theme(\n      plot.title = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x  = element_text(family = \"MaruBuri\"),\n      axis.title.y  = element_text(family = \"MaruBuri\"),\n      axis.text.x   = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y   = element_text(family = \"MaruBuri\", size = 11),\n      legend.title  = element_text(family = \"MaruBuri\", size=13),\n      plot.caption = element_text(family = \"NanumSquare\", color = \"gray20\")\n    ) +\n    annotate(\n      \"text\", x = 200, y = 5000, label = \"회귀분석 모형\", \n      hjust = 0.5, size = 8, color = \"steelblue\",\n      family = \"MaruBuri\", face = \"bold\"\n    ) +\n    guides(shape = \"none\")\n\nggplot_fonts_gg\n\n\n\n\n\n\n# ragg::agg_jpeg(\"images/ggplot_fonts_gg.jpeg\",\n#               width = 10, height = 7, units = \"in\", res = 600)\n# ggplot_fonts_gg\n# dev.off()\n\n\n\nggplot 다른 한글 글꼴 적용"
  },
  {
    "objectID": "dw_fonts.html#font-classification",
    "href": "dw_fonts.html#font-classification",
    "title": "\n16  한글 글꼴\n",
    "section": "\n16.1 글꼴 분류 1\n",
    "text": "16.1 글꼴 분류 1\n\n\n\n활자(Type)는 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 말이었습니다.\n\n타이포그래피(Typography): 인쇄된 텍스트의 스타일과 모양을 가리키는 디자인 용어입니다.\n\n서체(또는 글꼴 모음, Typeface): 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자로 타임즈(Times), 에어리얼(Arial) 및 미니언(Minion)을 들 수 있습니다.\n\n글꼴(Font): 서체의 특정 스타일을 지칭하는데, 예를 들어, 에어리얼 블랙(Arial Black)은 에어리얼 서체 중 한 글꼴이며, 미니언 프로 이탤릭체(Minion Pro Italic)는 미니언 글꼴 모음에 포함되어 있는 글꼴이다.\n\n글꼴(Font)는 다양하지만 크게 다음 5가지로 영문의 경우 분류된다. 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자의 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)은 라틴어로 없다는 뜻이기 때문에 삐침이 없는 글꼴을 지칭합니다.\n\nserif\nsans serif\nscript\nmonospaced\ndisplay\n\n가장 쉽게 분류되는 monospaced 글꼴은 코드를 작성하기 위해 등간격을 갖는 글꼴로 consolas, D2 Coding이 대표적이다. 산세리프(Sans serif)와 세리프(Serif) 글꼴은 본문에 사용하기 적합하지만, 좀더 시선을 끄는 디자인을 위해서는 조금 더 매력적인 디스플레이(Display) 혹은 스크립트(Script)을 선택하고, 제목(Title)에는 산세리프 글꼴을 사용하는 것이 일반적이다.\n\n\n출판문서 글꼴 분류\n\n\n16.1.1 typeface vs font\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에 다수 font가 포함될 수 있다. 팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다.\n\n16.1.2 파일폰트와 웹폰트\n데이터 사이언스 출판을 위해 필요한 글꼴을 반영하는 방식은 크게 두가지로 나뉜다. 하나는 전통적인 방식으로 운영체제에 내장된 글꼴을 문서제작에 글꼴을 반영하는 방식이고, 다른 하나는 웹폰트를 사용하는 방식이다. 웹폰트를 사용하게 될 경우 장점은 출판문서가 동작되는 컴퓨터에 해당 글꼴이 없어도 인터넷을 통해 다운로드하여 글꼴이 반영되기 때문에 글꼴이 없어 생기는 다양한 문제를 해결하는 장점이 있다. 웹폰트로 구글폰트와 눈누가 유명하다. 저작권을 살펴보고 문서제작에 필요한 글꼴을 사용하면 된다.\n\n눈누\n구글 폰트"
  },
  {
    "objectID": "dw_fonts.html#출판-문서",
    "href": "dw_fonts.html#출판-문서",
    "title": "\n16  한글 글꼴\n",
    "section": "\n16.2 출판 문서",
    "text": "16.2 출판 문서\n데이터 사이언스 한글 출판 문서 제작을 위해서 다음 글꼴을 선택한다. 제목으로 산스 세리프 폰트로 구글 폰트에서 “노토 산스 세리프”를 선정하고, 본문은 눈누 웹사이트에서 “마루부리”를 선정하고 코딩 글꼴 폰트로 눈누에서 D2Coding 폰트를 지정한다.\n\n산스 세리프(제목): Noto Sans Serif\n세리프(본문): 마루부리\n등간격(코딩): D2Coding\n\n\nlibrary(tidyverse)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\") +\n  theme_minimal()"
  },
  {
    "objectID": "dw_fonts.html#css-파일",
    "href": "dw_fonts.html#css-파일",
    "title": "\n16  한글 글꼴\n",
    "section": "\n16.3 css 파일",
    "text": "16.3 css 파일\n출판문서 제작에 사용된 글꼴 관련 사항을 css/quarto-fonts.css 파일에 지정해둔다.\n\n/* 글꼴 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap');\n\n@font-face {\n    font-family: 'MaruBuri-Regular';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'D2Coding';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_three@1.0/D2Coding.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n/* HTML */\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"Noto Sans KR\", sans-serif;\n}\n\nbody {\n  font-family: \"Nanum Myeongjo\", \"MaruBuri-Regular\", \"Noto Serif KR\", serif;\n  font-size: 15px;\n}\n\ntt, code, pre {\n  font-family: \"D2Coding\", Consolas, monospace;\n  font-size: 15px;\n}"
  },
  {
    "objectID": "dw_fonts.html#그래프",
    "href": "dw_fonts.html#그래프",
    "title": "\n16  한글 글꼴\n",
    "section": "\n16.4 그래프",
    "text": "16.4 그래프\n그래프(ggplot)에 사용되는 글꼴도 마찬가지로 showtext 패키지 웹폰트를 사용해서 다양한 한글도 사용할 수 있다. showtext 패키지는 font_add_google() 함수를 통해서 구글 한글폰트를 지정하여 이를 ggplot 에 적용시킬 수 있다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper"
  },
  {
    "objectID": "dw_fonts.html#표",
    "href": "dw_fonts.html#표",
    "title": "\n16  한글 글꼴\n",
    "section": "\n16.5 표",
    "text": "16.5 표\n구글 폰트에서 다양한 글꼴을 표 제목, 표 칼럼명, 표 셀값에 다르게 적용하며 크기는 물론 색상과 굵기도 적용이 가능하다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"blue\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#9678b6\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"blue\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n    \n\n펭귄종\n      섬\n      부리 길이 (mm)\n      체질량 (g)\n    \n\n\n\nGentoo\nBiscoe\n48.4\n5850\n\n\nAdelie\nTorgersen\n36.7\n3450\n\n\nGentoo\nBiscoe\n46.2\n4375\n\n\nAdelie\nBiscoe\n38.1\n3825\n\n\nGentoo\nBiscoe\n45.1\n5050\n\n\nGentoo\nBiscoe\n42.6\n4950\n\n\nGentoo\nBiscoe\n46.5\n5200\n\n\nChinstrap\nDream\n45.4\n3525\n\n\nAdelie\nBiscoe\n35.0\n3725\n\n\nGentoo\nBiscoe\n44.5\n4875\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\n    \n\n\n\n\n\nR 마크다운 문서 작성에 필요한 글꼴 관련 정보\n\n글꼴(font)\n구글 노토 글꼴(Noto Fonts)\nR 마크다운 폰트"
  },
  {
    "objectID": "themes_ggplot.html#사용자-테마",
    "href": "themes_ggplot.html#사용자-테마",
    "title": "\n12  그래프 테마\n",
    "section": "\n12.1 사용자 테마",
    "text": "12.1 사용자 테마\n설치한 한글 글꼴과 색상을 매칭하여 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다.\n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  # ggthemes::theme_tufte() +\n  theme_minimal() +\n    \n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()"
  },
  {
    "objectID": "themes_ggplot.html#그래프-자동-설정",
    "href": "themes_ggplot.html#그래프-자동-설정",
    "title": "\n12  그래프 테마\n",
    "section": "\n12.2 그래프 자동 설정",
    "text": "12.2 그래프 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 ggplot 시각화를 할 때 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = ggplot2::element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = ggplot2::element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.title.y   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.text.x    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = ggplot2::element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = ggplot2::element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n펭귄 데이터 사용자 테마 적용 그래프"
  },
  {
    "objectID": "fonts.html#글꼴",
    "href": "fonts.html#글꼴",
    "title": "\n10  글꼴\n",
    "section": "\n10.1 글꼴",
    "text": "10.1 글꼴\n활자와 서체, 글꼴, 타이포그래프은 비슷한 개념처럼 느껴질 수 있으나 각각 다른 의미를 가지고 있다. 활자(Type)는 글자나 기호의 물리적 형태로 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 말이었습니다. 서체(또는 글꼴 모음, Typeface)는 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자 스타일을 의미하며, ‘나눔고딕’, ‘Times New Roman’, ‘Helvetica’ 같은 이름을 가진 것이 서체다. 글꼴(Font)은 서체의 여러 변형을 총칭하는 용어로, 특정 서체에서 굵고 진한 글꼴(Bold), 기울임(italic) 등 변형이 모두 포함된다. 타이포그래피(Typography)는 활자 서체의 배열을 의미하며, 서체의 선택, 글자 크기, 줄 간격, 단어 간격, 문장 사이 간격과 맞춤 등을 조절하여 읽기 쉽고 미적으로 효과적인 텍스트 제작을 의미한다.\n전세계적으로 글꼴의 수는 무수히 많지만, 크게과 같이 크게 분류할 수 있다. 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자의 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)는 프랑스어로 “없다”, 또는 “없이”라는 뜻이기 때문에 삐침이 없는 글꼴을 지칭한다.\n모노스페이스(monospaced) 글꼴은 코드 작성 등에서 유용하게 사용되며, 모든 글자가 같은 폭을 차지한다. Consolas나 D2 Coding은 모노스페이스 글꼴의 대표적인 예다. 디스플레이(Display)와 스크립트(Script) 글꼴은 본문보다는 제목이나 강조할 부분에서 사용되며, 디자인적인 특성이 가미되어 있다. 디스플레이 글꼴은 대체로 크고 눈에 띄는 특성을, 스크립트 글꼴은 필기체나 서명 등을 모방한 스타일을 가진다.\n수식을 표현하는데 많이 사용되는 \\(\\LaTeX\\)에서 기본글꼴로 Computer Modern, AMS Euler, STIX 같은 수식전용 글꼴이 사용되어, 수학적 표기나 공식을 명확하고 정확하게 표현할 수 있도록 설계되었다. 데이터 과학에서 그래프 문법과 표 문법을 사용하여 그래프와 표를 제작할 경우 가독성을 높이고 이목을 끌 수 있도록 색상과 더불어 적절한 글꼴 선택이 필수적으로 자리잡아가고 있다.\n일반적으로 본문에는 세리프나 산세리프 글꼴이 사용되고, 제목에는 더 화려하거나 눈에 띄는 글꼴이 사용되고 증거기반 문서 행정문서가 늘어나고 과학기술 문서에 필수적인 수식 등에도 타이포그래피 중요성이 늘어나고 있다.\n\n\n문서에 담긴 디지털 글쓰기 글꼴\n\n\n\n\n\n\n\n서체와 글꼴\n\n\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에 다수 font가 포함될 수 있고, 팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다."
  },
  {
    "objectID": "fonts.html#두가지-형태-글꼴",
    "href": "fonts.html#두가지-형태-글꼴",
    "title": "\n10  글꼴\n",
    "section": "\n10.2 두가지 형태 글꼴",
    "text": "10.2 두가지 형태 글꼴\n글꼴(Fonts)은 문자나 기호를 디지털화하여 표현하는 데 사용되는 그래픽 디자인으로 주로 로컬 설치형 글꼴과 웹폰트 두가지 형태로 사용된다.\n로컬 설치형 글꼴은 사용자의 컴퓨터나 기기에 직접 설치되어 있는 글꼴로, 윈도우(Windows)나 맥(macOS), 리눅스(Unix/Linux)에서 기본적으로 제공되는 글꼴이나 사용자가 따로 설치하여 사용하는 글꼴을 의미한다. 인터넷 연결 없이도 사용할 수 있으며, 로컬에서 동작하므로 빠른 렌더링 속도를 제공한다는 점이 큰 장점이지만, 사용자 컴퓨터나 기기에 설치되어 있지 않은 글꼴은 보이지 않을 수 있으며, 글꼴 업데이트나 관리는 수동으로 직접해야 한다는 점은 단점이다.\n반면 웹폰트는 웹페이지를 로드할 때 서버에서 함께 다운로드되어 사용자의 브라우저에 표시된다. 구글 폰트(Google Fonts), 눈누와 같은 웹폰트 서비스를 통해 제공되며, 웹페이지를 방문하는 모든 사용자에게 동일한 글꼴를 통해 보여준다는 점은 장점이다. 다양한 스타일과 가중치(weights) 글꼴을 쉽게 사용할 수 있으며, 글꼴 업데이트나 관리가 자동화되는 장점은 있으나, 초기 페이지 로딩 시간이 길어질 수 있으며, 서버 다운 혹은 인터넷 연결 문제로 웹폰트가 정상적으로 로드되지 않을 위험도 있고, 인터넷 통신 데이터 사용량이 증가되어 속도가 늦어지고 관련 네트워크 비용이 늘어날 수 있다.\n\n\n설치형 글꼴과 웹 글꼴"
  },
  {
    "objectID": "fonts.html#출판-문서",
    "href": "fonts.html#출판-문서",
    "title": "\n10  글꼴\n",
    "section": "\n10.10 출판 문서",
    "text": "10.10 출판 문서\n데이터 사이언스 한글 출판 문서 제작을 위해서 다음 글꼴을 선택한다. 제목으로 산스 세리프 폰트로 구글 폰트에서 “노토 산스 세리프”를 선정하고, 본문은 눈누 웹사이트에서 “마루부리”를 선정하고 코딩 글꼴 폰트로 눈누에서 D2Coding 폰트를 지정한다.\n\n산스 세리프(제목): Noto Sans Serif\n세리프(본문): 마루부리\n등간격(코딩): D2Coding\n\n\nlibrary(tidyverse)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\") +\n  theme_minimal()"
  },
  {
    "objectID": "fonts.html#css-파일",
    "href": "fonts.html#css-파일",
    "title": "\n10  글꼴\n",
    "section": "\n10.11 css 파일",
    "text": "10.11 css 파일\n출판문서 제작에 사용된 글꼴 관련 사항을 css/quarto-fonts.css 파일에 지정해둔다.\n\n/* 글꼴 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap');\n\n@font-face {\n    font-family: 'MaruBuri-Regular';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'D2Coding';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_three@1.0/D2Coding.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n/* HTML */\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"Noto Sans KR\", sans-serif;\n}\n\nbody {\n  font-family: \"Nanum Myeongjo\", \"MaruBuri-Regular\", \"Noto Serif KR\", serif;\n  font-size: 15px;\n}\n\ntt, code, pre {\n  font-family: \"D2Coding\", Consolas, monospace;\n  font-size: 15px;\n}"
  },
  {
    "objectID": "fonts.html#그래프",
    "href": "fonts.html#그래프",
    "title": "\n10  글꼴\n",
    "section": "\n10.12 그래프",
    "text": "10.12 그래프\n그래프(ggplot)에 사용되는 글꼴도 마찬가지로 showtext 패키지 웹폰트를 사용해서 다양한 한글도 사용할 수 있다. showtext 패키지는 font_add_google() 함수를 통해서 구글 한글폰트를 지정하여 이를 ggplot 에 적용시킬 수 있다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper"
  },
  {
    "objectID": "fonts.html#표",
    "href": "fonts.html#표",
    "title": "\n10  글꼴\n",
    "section": "\n10.13 표",
    "text": "10.13 표\n구글 폰트에서 다양한 글꼴을 표 제목, 표 칼럼명, 표 셀값에 다르게 적용하며 크기는 물론 색상과 굵기도 적용이 가능하다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"blue\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#9678b6\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"blue\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n    \n\n펭귄종\n      섬\n      부리 길이 (mm)\n      체질량 (g)\n    \n\n\n\nAdelie\nDream\n37.0\n3400\n\n\nChinstrap\nDream\n46.6\n3800\n\n\nAdelie\nDream\n38.9\n3600\n\n\nAdelie\nBiscoe\n40.6\n3800\n\n\nGentoo\nBiscoe\n43.6\n4900\n\n\nAdelie\nTorgersen\n36.2\n3150\n\n\nChinstrap\nDream\n49.3\n4050\n\n\nChinstrap\nDream\n40.9\n3200\n\n\nAdelie\nTorgersen\n43.1\n3500\n\n\nGentoo\nBiscoe\n51.5\n5500\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\n    \n\n\n\n\n\nR 마크다운 문서 작성에 필요한 글꼴 관련 정보\n\n글꼴(font)\n구글 노토 글꼴(Noto Fonts)\nR 마크다운 폰트"
  },
  {
    "objectID": "fonts.html#용어-설명",
    "href": "fonts.html#용어-설명",
    "title": "\n10  글꼴\n",
    "section": "\n10.1 용어 설명",
    "text": "10.1 용어 설명\n활자와 서체, 글꼴, 타이포그래프은 비슷한 개념처럼 느껴질 수 있으나 각각 다른 의미를 가지고 있다. 활자(Type)는 글자나 기호의 물리적 형태로 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 말이었습니다. 서체(또는 글꼴 모음, Typeface)는 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자 스타일을 의미하며, ‘나눔고딕’, ‘Times New Roman’, ‘Helvetica’ 같은 이름을 가진 것이 서체다. 글꼴(Font)은 서체의 여러 변형을 총칭하는 용어로, 특정 서체에서 굵고 진한 글꼴(Bold), 기울임(italic) 등 변형이 모두 포함된다. 타이포그래피(Typography)는 활자 서체의 배열을 의미하며, 서체의 선택, 글자 크기, 줄 간격, 단어 간격, 문장 사이 간격과 맞춤 등을 조절하여 읽기 쉽고 미적으로 효과적인 텍스트 제작을 의미한다.\n전세계적으로 글꼴의 수는 무수히 많지만, 크게과 같이 크게 분류할 수 있다. 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자의 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)는 프랑스어로 “없다”, 또는 “없이”라는 뜻이기 때문에 삐침이 없는 글꼴을 지칭한다.\n모노스페이스(monospaced) 글꼴은 코드 작성 등에서 유용하게 사용되며, 모든 글자가 같은 폭을 차지한다. Consolas나 D2 Coding은 모노스페이스 글꼴의 대표적인 예다. 디스플레이(Display)와 스크립트(Script) 글꼴은 본문보다는 제목이나 강조할 부분에서 사용되며, 디자인적인 특성이 가미되어 있다. 디스플레이 글꼴은 대체로 크고 눈에 띄는 특성을, 스크립트 글꼴은 필기체나 서명 등을 모방한 스타일을 가진다.\n수식을 표현하는데 많이 사용되는 \\(\\LaTeX\\)에서 기본글꼴로 Computer Modern, AMS Euler, STIX 같은 수식전용 글꼴이 사용되어, 수학적 표기나 공식을 명확하고 정확하게 표현할 수 있도록 설계되었다. 데이터 과학에서 그래프 문법과 표 문법을 사용하여 그래프와 표를 제작할 경우 가독성을 높이고 이목을 끌 수 있도록 색상과 더불어 적절한 글꼴 선택이 필수적으로 자리잡아가고 있다.\n일반적으로 본문에는 세리프나 산세리프 글꼴이 사용되고, 제목에는 더 화려하거나 눈에 띄는 글꼴이 사용되고 증거기반 문서 행정문서가 늘어나고 과학기술 문서에 필수적인 수식 등에도 타이포그래피 중요성이 늘어나고 있다.\n\n\n문서에 담긴 디지털 글쓰기 글꼴\n\n\n\n\n\n\n\n서체와 글꼴\n\n\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에 다수 font가 포함될 수 있고, 팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다."
  },
  {
    "objectID": "fonts.html#글꼴-설치",
    "href": "fonts.html#글꼴-설치",
    "title": "\n10  글꼴\n",
    "section": "\n10.3 글꼴 설치",
    "text": "10.3 글꼴 설치\n구글 폰트(Google Fonts), 눈누와 같은 웹사이트에서 .ttf, .otf 형식 글꼴파일을 다운로드 한 후에 C:\\Windows\\Fonts\\ 디렉토리에 복사하거나, 다운로드 받은 글꼴파일을 더블 클릭하여 설치 버튼을 눌러 자동으로 해당 디렉토리에 설치한다. 글꼴을 시스템에 설치하면 모든 사용자가 사용할 수 있도 있지만, 프로젝트 별로 fonts 디렉토리를 생성하여 이를 프로젝트에서 불러와서 특정 글꼴을 사용하는 것도 많이 사용된다. 두가지 접근 방법 모두 장단점이 있다.\n\n\nR 폰트/글꼴 설치\n\n\n10.3.1 글꼴 패키지\n시스템에 글꼴이 설치되었다고 바로 문서 텍스트, 그래프, 표, 수식 등에 사용할 수 있는 것은 아니다. 이를 등록하는 절치가 필요하다. 언어마다 차이는 있지만 대체로 유사한 작업방식이기 때문에 R 언어를 사례로 살펴보자.\nextrafont, sysfonts, showtext, 패키지는 글꼴을 다루기 위한 다양한 기능을 제공하기 위해 개발된 글꼴 패키지로 extrafont와 sysfonts 패키지는 로컬 설치형 글꼴을 다루는데 특화되어 있는 반면에 showtext는 웹글꼴 전용 패키지다. sysfonts가 더 낮은 수준에서 더 많은 제어기능을 제공하는 반면, extrafont는 높은 수준 작업에 더 초점을 맞추고 사용자 친화적인 방법으로 글꼴을 적용하는 데 특화되어 있다.\n먼저, 로컬 컴퓨터에 설치된 R 글꼴 패키지를 확인한다.\n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n패키지명\n      버전\n      날짜\n      URL\n    \n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts\n\n\n\n\n\n\n\n10.3.2 네이버 글꼴 설치\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 설치할 수 있다. 그림 10.1 에서 “모든 사용자용으로 설치(A)”하게 되면 글꼴이 C:\\Windows\\Fonts\\ 디렉토리에 설치된다. 운영체제에 설치작업이 완료되면 R에서 사용할 수 있으나, 몇 가지 추가 작업이 필요하다. 우선, fs 패키지 file_exists() 함수를 사용하여 ‘NanumSquare.ttf’ 파일이 정상적으로 설치되었는지 확인한다. 이후 font_import() 명령어를 사용하여 R에서 해당 글꼴을 사용할 수 있도록 설정한다. 이 때, path=로 글꼴 파일의 경로를 직접 지정할 수 있으며, pattern=을 사용해서 특정 패턴에 맞는 글꼴을 일괄적으로 등록할 수도 있다. 선택한 방식에 따라 글꼴을 설치하면 이후 R 프로젝트에서 네이버 나눔스퀘어 글꼴을 자유롭게 사용할 수 있다.\n\n\n그림 10.1: 윈도우 나눔스퀘어 글꼴 설치\n\n\nlibrary(extrafont)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(paths = \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\n\n동일한 방식으로 마루부리 글꼴도 설치한다.\n\nfont_import(pattern = \"MaruBuri-ExtraLight.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Regular.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Bold.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Light.ttf\", prompt = FALSE)\n\n동일한 방식으로 D2 Coding 글꼴도 설치하고 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창이 열리고, Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다.\n\n\nD2 코딩폰트 설치\n\n글꼴 선택은 문서나 프로젝트의 특성과 목적에 따라 크게 영향을 미친다. 제목에는 삐침이 없어 깔끔한 느낌을 주기 위해 나눔스퀘어 글꼴을 설치했고, 본문에는 삐침이 있는 마루부리 글꼴을 설치하여 가독성을 높였고, 코딩 작업에 특별히 설계된 D2코딩 글꼴을 선택하여 전체적인 글쓰기 환경을 효율적이고 편안하게 준비했다."
  },
  {
    "objectID": "dw_components.html#그래프",
    "href": "dw_components.html#그래프",
    "title": "\n16  문서 구성요소\n",
    "section": "\n16.1 그래프",
    "text": "16.1 그래프\n그래프(ggplot)에 사용되는 글꼴도 마찬가지로 showtext 패키지 웹폰트를 사용해서 다양한 한글도 사용할 수 있다. showtext 패키지는 font_add_google() 함수를 통해서 구글 한글폰트를 지정하여 이를 ggplot 에 적용시킬 수 있다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g,\n                           color = species)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper"
  },
  {
    "objectID": "dw_components.html#표",
    "href": "dw_components.html#표",
    "title": "\n16  문서 구성요소\n",
    "section": "\n16.2 표",
    "text": "16.2 표\n구글 폰트에서 다양한 글꼴을 표 제목, 표 칼럼명, 표 셀값에 다르게 적용하며 크기는 물론 색상과 굵기도 적용이 가능하다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"blue\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#9678b6\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"blue\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n    \n\n펭귄종\n      섬\n      부리 길이 (mm)\n      체질량 (g)\n    \n\n\n\nAdelie\nDream\n39.2\n4150\n\n\nGentoo\nBiscoe\n49.1\n5500\n\n\nChinstrap\nDream\n42.5\n3350\n\n\nGentoo\nBiscoe\n47.6\n5400\n\n\nAdelie\nDream\n38.3\n3950\n\n\nGentoo\nBiscoe\n50.5\n5550\n\n\nChinstrap\nDream\n47.0\n3700\n\n\nAdelie\nTorgersen\n45.8\n4150\n\n\nAdelie\nBiscoe\n42.0\n4050\n\n\nGentoo\nBiscoe\n47.2\n4925\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집"
  },
  {
    "objectID": "dw_components.html#다이어그램",
    "href": "dw_components.html#다이어그램",
    "title": "\n16  문서 구성요소\n",
    "section": "\n16.3 다이어그램",
    "text": "16.3 다이어그램\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n    style Contents fill:#059fff,stroke:#333,stroke-width:1px\n    style Format fill:#fc0303,stroke:#333,stroke-width:1px\n    style Deployment fill:#03fc30,stroke:#333,stroke-width:1px"
  },
  {
    "objectID": "dw_components.html#보고서",
    "href": "dw_components.html#보고서",
    "title": "\n16  문서 구성요소\n",
    "section": "\n16.4 보고서",
    "text": "16.4 보고서\n데이터 사이언스 한글 출판 문서 제작을 위해서 다음 글꼴을 선택한다. 제목으로 산스 세리프 폰트로 구글 폰트에서 “노토 산스 세리프”를 선정하고, 본문은 눈누 웹사이트에서 “마루부리”를 선정하고 코딩 글꼴 폰트로 눈누에서 D2Coding 폰트를 지정한다.\n\n산스 세리프(제목): Noto Sans Serif\n세리프(본문): 마루부리\n등간격(코딩): D2Coding\n\n\nlibrary(tidyverse)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\") +\n  theme_minimal()\n\n\n16.4.1 css 파일\n출판문서 제작에 사용된 글꼴 관련 사항을 css/quarto-fonts.css 파일에 지정해둔다.\n\n/* 글꼴 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap');\n\n@font-face {\n    font-family: 'MaruBuri-Regular';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'D2Coding';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_three@1.0/D2Coding.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n/* HTML */\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"Noto Sans KR\", sans-serif;\n}\n\nbody {\n  font-family: \"Nanum Myeongjo\", \"MaruBuri-Regular\", \"Noto Serif KR\", serif;\n  font-size: 15px;\n}\n\ntt, code, pre {\n  font-family: \"D2Coding\", Consolas, monospace;\n  font-size: 15px;\n}"
  },
  {
    "objectID": "dw_components.html#section",
    "href": "dw_components.html#section",
    "title": "\n16  문서 구성요소\n",
    "section": "\n16.5 ",
    "text": "16.5"
  },
  {
    "objectID": "whole_game.html#글쓰기-비교",
    "href": "whole_game.html#글쓰기-비교",
    "title": "15  디지털 글쓰기",
    "section": "15.1 글쓰기 비교",
    "text": "15.1 글쓰기 비교\n디지털 글쓰기와 전통적인 글쓰기는 몇 가지 차이점이 있다. 디지털 글쓰기는 검색 엔진에 의해 쉽게 찾아질 수 있도록 설계되어 있으며, 다양한 미디어가 쉽게 통합될 수 있고, 디지털 글쓰기는 발행 후에도 언제든지 쉽게 조작할 수 있어 더 동적이고 생동감을 넣을 수도 있고, 깃(Git)과 같은 버전제어 도구와 연결시켜 글쓰기를 하게 되면 추적도 가능하여 재현가능한 글쓰기가 가능하게 된다. 디지털 글쓰기의 가장 큰 장점 중의 하나는 사람만이 저작을 하는 것이 아니라 기계가 저작한 프로그램도 글쓰기에 담을 수 있어 더욱 풍성한 글쓰기가 가능하다는 점이다.\n반면 전통적인 글쓰기는 발행 후 개발이 중단될 뿐만 아니라 한정된 지면(예를 들어 A4, B5)에 다양한 색상을 넣어 강조와 가독성을 높일 수 있으나 인쇄 난이도의 증가로 인해 비용도 급격히 증가하게 되고 무엇보다 정적인 정보만 담을 수 있어 최신 기술 흐름을 반영하는데 한계가 있다.\n또한 커뮤니케이션 관점에서 보면 디지털 글쓰기는 온라인 도구를 사용하여 작성 과정의 초기부터 광범위한 청중과 거의 실시간으로 텍스트를 공유할 수 있어 작성 과정이 공개적이고 다수다 저작과정에 별다른 장벽없이 참여할 수 있다는 점에서 전통적인 글쓰기가 소수의 저자가 집필을 마무리해야 후속 디자인 작업을 비롯한 후속 출판작업이 진행된다는 면에서 큰 차이가 있다. 특히 전통 글쓰기 결과물이 책과 같은 물리적 매체에 담기게 되면 이를 다시 디지털로 되돌리기 위해 광학문자인식(OCR) 과정을 거쳐야 하며 책속에 담긴 그래프, 표, 이미지 등 데이터는 별도 과정을 거쳐 디지털화 해야하는 한계도 명확하다."
  },
  {
    "objectID": "whole_game.html#챗gpt-디지털-글쓰기",
    "href": "whole_game.html#챗gpt-디지털-글쓰기",
    "title": "15  디지털 글쓰기",
    "section": "16.5 (챗GPT) 디지털 글쓰기",
    "text": "16.5 (챗GPT) 디지털 글쓰기\n챗GPT가 이목을 집중하고 있는 가장 근본적인 이유는 디지털 글쓰기를 사람보다 신속하고 빠르게 하기 때문이다. 전통적인 글쓰기와 달리 디지털 글쓰기에는 다양한 종류의 글쓰기, 코딩, 추론 등이 포함되고 있다. “챗GPT 디지털 글쓰기”를 통해 챗GPT 출현 이전과 이후 확연히 달라진 글쓰기 방법에 관심을 가져야만 된다. 1\n\n\n\n챗GPT 디지털 글쓰기 진화과정\n\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n\n    style Contents fill:#059fff,stroke:#333,stroke-width:1px\n    style Format fill:#fc0303,stroke:#333,stroke-width:1px\n    style Deployment fill:#03fc30,stroke:#333,stroke-width:1px"
  },
  {
    "objectID": "whole_game.html#챗gpt-글감-작성",
    "href": "whole_game.html#챗gpt-글감-작성",
    "title": "16  챗GPT 글쓰기 맛보기",
    "section": "16.1 챗GPT 글감 작성",
    "text": "16.1 챗GPT 글감 작성\n사전 자료조사를 통해서 한국영화 10선 중 국제시장과 펭귄 데이터를 통해 흥행과 현재 우리가 당면한 ESG 문제를 다룬 뭉클한 감동을 주는 영화 시놉시스 작성을 목표로 하자.\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Survey\n\n    subgraph Survey[\"자료 조사\"]\n        direction LR\n        Top10[\"한국영화&lt;br&gt;10선\"] --&gt; OpenAI[\"챗GPT\"]\n        Top10                    --&gt; Bard[\"구글 바드\"]\n        Top10                    --&gt; KOBIS[\"역대&lt;br&gt;박스오피스\"]\n    end\n\n    Survey --&gt; Synopsis\n\n    subgraph Synopsis[\"시놉시스\"]\n        direction LR\n        Movie_A[\"명량\"]     -.-&gt; New_Movie[\"새로운 영화&lt;br&gt;시놉시스\"]\n        Movie_B[\"극한직업\"] --&gt; New_Movie\n        Movie_C[\"신과함께\"] -.-&gt; New_Movie\n        Market[\"국제시장\"] --&gt; New_Movie        \n        Movie_E[\"...\"] -.-&gt; New_Movie\n        Penguins[\"펭귄 데이터\"] --&gt; New_Movie\n    end\n\n    Synopsis --&gt; Synopsis_fin[\"최종&lt;br&gt;시놉시스\"]\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n\n    style Survey fill:#059fff,stroke:#333,stroke-width:1px\n    style Synopsis fill:#fc0303,stroke:#333,stroke-width:1px\n    style Synopsis_fin fill:#03fc30,stroke:#333,stroke-width:1px\n\n    style Penguins fill:#03fc30,stroke:#333,stroke-width:3px\n    style Market fill:#03fc30,stroke:#333,stroke-width:3px"
  },
  {
    "objectID": "whole_game.html#구조와-외양",
    "href": "whole_game.html#구조와-외양",
    "title": "16  챗GPT 글쓰기 맛보기",
    "section": "16.2 구조와 외양",
    "text": "16.2 구조와 외양\n글감이 준비되면 그 다음으로 가독성을 높이고 효과적인 콘텐츠 제작을 위해서 그림, 표, 그래프, 수식, 도형 등 다양한 문서 객체 뿐만 아니라 색상을 달리하여 시각적인 효과도 극대화하여 고품질 문서를 저작하게 된다.\n\n마크다운 기본 글쓰기\n\n대중소 제목\n굵은 글씨, 밑줄, ..\n단락 구분\n\n그림 (Figure)\n그래프 (Graph)\n표 (Table)\n도형 (Diagrams)\n수식 (LaTeX)\n호출 블록 (Callout Blocks)\n기사 레이아웃 (Article Layout)\n학술저작 (Scholarly Writing)\n다단편집(Side-by-Side Layout)\n…"
  },
  {
    "objectID": "whole_game.html#배포와-공유",
    "href": "whole_game.html#배포와-공유",
    "title": "16  챗GPT 글쓰기 맛보기",
    "section": "16.3 배포와 공유",
    "text": "16.3 배포와 공유\n디지털 글쓰기 저작물을 제작하게 되면 그 다음 단계로 출판을 해야하는데 다양한 문서를 모아 프로젝트로 담아 Quarto Pub에 전자출판한다. 다른 출판 플랫폼으로 netlify, GitHub Pages, RStudio Connect가 많이 사용된다."
  },
  {
    "objectID": "dw_pdf.html#출판-디지털-전환",
    "href": "dw_pdf.html#출판-디지털-전환",
    "title": "\n17  한글 PDF\n",
    "section": "\n17.3 출판 디지털 전환",
    "text": "17.3 출판 디지털 전환\n200자 원고지 4장은 통상 A4 용지 한장에 해당한다. 만약 A4 용지 10장 보고서나 논문을 작성한다고 하면, 종이 200자 원고지 40장에 연필이나 볼펜을 가지고 작성하게 된다. 최종본을 얻기까지 빨간색으로 선생님이나 주변의 첨삭지도를 받아 최종본을 만들기까지 여러번의 반복과정을 거치게 된다.\n최종 원고가 200자 원고지 40장에 담겨 탈고를 마치게 되면, 독자에게 다가갈 준비를 한다. 그림을 넣거나 아름다운 글씨체를 적용해 보고 종이 재질을 바꿔보기도 하고 영혼이 담긴 원고를 독자가 보기 좋고, 이해하기 쉽고, 때로는 감동과 재미를 줄 수 있도록 출판 단계에서 많은 사람들의 노력이 들어간다.\n탈고를 마친 원고에 글씨체를 비롯한 디자인 작업이 완료되면 출판장비를 갖춘 출판소에서 인쇄장비를 거쳐 종이책 혹은 보고서가 완성되고, 이렇게 대량으로 출력되면 각 서점으로 배송되어 독자가 서점에서 구독을 하게 된다.\n저자의 생각을 글로 표현하면 현재도 대부분 편집 및 디자인, 출판, 배송, 서점 등 각 단계에 사람이 관여하고 필요에 따라서는 컴퓨터가 작업을 지원하는데 사용되어 최종 독자에게 전달된다.\n책과 보고서 제작하는 과정은 워드 프로세스를 기본으로 두고, 숫자 계산이 필요하면 엑셀, 이미지가 필요하면 그래픽 전문 소프트웨어, 정보 검색도 웹브라우져를 사용한다. 글자, 단어, 문장, 문단, 장/절/항으로 생각의 단위를 서문, 본문, 결어 및 참고문헌, 주석, 그림, 그래프, 도표 등도 함께 체계적으로 작성해 나간다.\n다양한 소프트웨어를 통해서 원고를 탈고하게 되면 서식, 문장 문단 모양, 색인, 참조문헌 등 보기 좋고 가독성 높은 형태로 외양을 입히는 과정을 거치게 되는데 이 과정도 소프트웨어가 핵심적인 역할을 하게 된다. 책과 보고서에 대한 디자인 작업이 완료되면 다양한 형태로 배포하기 위한 프로그래밍 과정을 거쳐 PDF, 전자책(ePUB), 웹(HTML), 출판책 형태로 독자에게 전달된다.\n글을 써서 이를 독자에게 전달되는 과정은 과거에 전문작가, 디자인 전문가, 출판전문가, 서점운영자 등 수많은 전문가가 연관되어 있고 타자기, 디자인 기계, 인쇄기 등 수많은 기계가 필요했으며 이를 사업적으로 기술적으로 연결할 수 있는 다양한 통신 방법이 필요했다. 비전문가가 밖에서 보면 복잡하고 어려워 보이지만, 컴퓨팅 사고의 시각으로 보면 단순할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n\nPDF 작업흐름\n\n\n\n아날로그 출판\n\n\n\n디지털 출판\n\n\n그림 17.2: 디지털 출판 방식"
  },
  {
    "objectID": "dw_pdf.html#latex-knuth",
    "href": "dw_pdf.html#latex-knuth",
    "title": "\n17  한글 PDF\n",
    "section": "\n17.3 \\(LaTeX\\) 구성요소",
    "text": "17.3 \\(LaTeX\\) 구성요소\n수학과 교수였던 도널드 크누스는 문서 조판 시스템을 개발하면서 수식 처리를 간편하게 할 수 있도록 하면서, 메타폰트(METAFONT)라는 글꼴 시스템도 개발하여 고품질 글자체를 구현할 수 있도록 했다. 이러한 기초 위에 레슬리 램포트는 \\(\\TeX\\)을 더욱 사용하기 쉽게 만들기 위해 다양한 매크로를 \\(\\LaTeX\\)으로 묶어 공개했다. 그 결과 일반인도 \\(\\LaTeX\\)을 이용해 고품질의 문서를 쉽게 작성할 수 있게 되었다. 버클리 대학 마이클 스피백 교수는 수식을 간편하게 문서에 적용할 수 있도록 AMS-TeX라는 매크로를 개발하고, 이에 대한 설명을 “The Joy of TeX”이라는 책에서도 공개했다. (Spivak, 1990)\npdftex와 e-TeX이 결합하여 사실상 표준 TeX이 되었고, 이를 기반으로 XeTeX과 LuaTeX이 발전하고 있다. 특히, 한글 폰트 처리에 있어서 XeTeX(지텍으로 읽음)이 널리 사용되고 있다.\n\\(\\LaTeX\\) 동작 원리는 Salomon의 도식화에 영감을 받아 Kees van der Laan이 1994년에 정리한 논문에서 상세하게 설명되어 있다. (Laan, 1994) 기본적으로 고품질의 전자 출판을 위해 글꼴과 \\(\\TeX\\)이 필요하며, 이 두 요소가 결합하여 고품질의 출력물을 생성한다. 이러한 \\(\\TeX\\) 엔진을 지원하는 다양한 패키지 중에서 AMS-(La)TeX, LaTeX, manmac 등이 주목을 받고 있다.\n문서의 다양한 구성 요소, 예를 들어 목차, 색인, 참고문헌, 그림과 표 등은 모듈화되어 관리되며, 글꼴 및 구조적인 스타일과 관련된 부분도 별도로 관리되고 있다. TeXWorks와 같은 위지윅(WYSIWYG)을 지원하는 편집기는 구문 강조, 맞춤법 검사 등을 통해 고품질의 \\(\\LaTeX\\) 문서 작성을 지원하고 있다.\n\n\n편집기, 엔진, 글꼴을 중심으로 본 \\(\\LaTeX\\) 내부\n\n\\(\\LaTeX\\) 문서 작성을 위해 기본적인 구성요소는 다음과 같다.\n\n배포판: 과거에는 다양한 배포판이 윈도우, 리눅스, 맥에서 사용되었지만, 현재는 TeX Live가 대표적인 LaTeX 작업 환경이다. MikTeX도 있지만, 큰 차이는 없다.\n\n글꼴: 초기에는 글꼴로 폰트 메트릭(tfm)과 메타폰트(MetaFont)가 주로 사용되었으나, 현재는 트루타입과 오픈타입이 널리 쓰인다.\n\n폰트 선택은 밥처럼 기본적이면서도 안정적인 것이 좋다. 특별한 상황에서는 그에 맞는 폰트를 선택하는 것이 중요하다.\n일반적으로 Serif와 San Serif 폰트를 한 쌍으로 사용하는 것이 균형감이 있다. 예를 들어, 나눔고딕과 나눔명조, KoPub돋움과 KoPub바탕, 함초롬도움과 함초롬바탕 등이 있다.\n글자 크기는 10~12 포인트가 적절하며, 이는 장시간 동안의 읽기 피로를 줄이기 위함이다.\n\n\n그래픽: TeX/LaTeX 자체는 그래픽을 주요 영역으로 보지 않는다. 과거에는 dvips와 EPS 형식을 주로 사용했으나, 현재는 .jpg, .png, .pdf 등도 잘 처리한다.\n문자와 입력: 초기에는 ASCII 코드가 주를 이루었으나, 현재는 UTF-8을 권장하고 있다. 특히, \\usepackage[utf8x]{inputenc}가 필요한 경우가 많다.\n색인과 참고문헌: makeindex와 bibtex는 색인과 참고문헌 처리의 표준이다. 그러나 유니코드 처리를 위해 texindy와 biber도 주목을 받고 있다.\n수식: 수학 표현과 관련해서는 미국 수학회가 발전시킨 amsmath가 표준이다.\n출력: 과거에는 .dvi 형식이 기본이었으나, 현재는 .pdf가 기본이다. 또한, 웹을 위한 다양한 .html 출력도 지원한다. 이에 따라, 웹이 책 형태의 문서보다 더 중요한 위치를 차지하게 될 것으로 예상된다.\n\n\\(\\LaTeX\\)을 통한 PDF 파일 제작 과정은 몇 가지 주요 단계로 이루어진다. \\(\\LaTeX\\) 전용 TexStudio 같은 통합개발환경(IDE), RStudio 같은 데이터 과학 IDE, 범용 소프트웨어 개발 VS코드 같은 IDE에서 텍스트 편집기를 열어 신규 \\(\\LaTeX\\) 파일을 생성하는데 파일 확장자는 .tex이다. 파일 시작 부분에 \\documentclass 명령어를 사용하여 문서의 종류와 옵션을 설정하는데, 학술 논문을 작성한다면 article 클래스를, 책을 작성한다면 book 클래스 등을 선택한다.\n\\usepackage 명령어를 사용하여 필요한 패키지를 불러와서 특별한 기능이나 스타일을 추가한다. 예를 들어, 수식을 표현하기 위해 amsmath 패키지를, 그림을 삽입하기 위해 graphicx 패키지 등이 사용된다.\n문서의 본문은 \\begin{document}와 \\end{document} 사이에 작성되고, 영역 안에서 텍스트, 표, 그림, 수식 등을 자유롭게 배치할 수 있다. 본문 작성 중에 참고문헌 서지관리를 위해 BibTeX texindy, biber를 사용하고, 색인 생성을 위해 makeindex를 사용한다.\n본문 작성이 완료되면, \\(\\LaTeX\\) 컴파일러를 실행하여 .tex 파일을 PDF로 변환한다. 영어는 pdflatex, 한글은 xelatex 을 \\(\\LaTeX\\) 엔진으로 사용하고, 참고문헌과 색인이 포함된 경우 컴파일 과정이 수차례 이어진다.\n\n\n\\(\\LaTeX\\) 작업흐름"
  },
  {
    "objectID": "dw_pdf.html#quarto-pdf",
    "href": "dw_pdf.html#quarto-pdf",
    "title": "\n17  한글 PDF\n",
    "section": "\n17.4 Quarto PDF",
    "text": "17.4 Quarto PDF\nPDF는 기술적, 학술적, 사업적으로 혁신적인 문서 양식이다. PDF가 개발된 것은 오랜 역사를 자랑하지만 아래한글, 워드퍼펙트, MS 워드, 리브레 워드 등에 가려 그 진가를 발휘하지 못했다. 하지만 이제 PDF는 문서 출판의 최고봉이라는데 이의를 제기하는 사람은 없을 것이다.\nPDF 를 통해 아도비(Adobe) 회사는 엄청난 성공을 이어나가고 있고, 과학기술 저작에도 필수적인 파일 형태라 PDF에 대한 기본소양은 인공지능 시대를 살고 있는 시민으로 누구나 갖춰야하는 소양이다.\n\n17.4.1 \\(LaTeX\\) 엔진\n보통 TexLive에 기반을 둔 tinytex 를 사용하는데 한글을 사용하는 입장에서는 kotex를 설치하는 방법도 모색이 필요하다. 유니코드 문자를 처리하기 위해서 xelatex이 Quarto \\(LaTeX\\) 기본엔진이다. 달리 특정하지 않게 되면 xelatex을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.\nquarto install tool tinytex\nkotex 이 갖는 장점은 한글관련 이슈가 될만한 거의 모든 \\(LaTeX\\) 패키지와 기본 한글글꼴도 내장하고 있다는 점이다. 하지만, tidytex를 기본 \\(LaTeX\\) 엔진으로 사용하는 경우 빠진 패키지로 인해 후속 작업이 어려운 경우 tinytex::parse_install() 함수를 사용하게 되면 다음과 같이 오류난 텍스트를 붙여넣게 되면 자동으로 설치해준다.\n\ntinytex::parse_install(\n  text = \"! LaTeX Error: File `titlepic.sty' not found.\"\n)\n\n\n17.4.2 YAML 파일\n문서를 구성하는 기본사항을 적어둔다. PDF 문서를 저작하는 것이라 \\(LaTeX\\) 에 대한 기본 지식은 Quarto PDF 문서를 생성하는데 많은 도움이 된다. 글꼴 지정관련하여 로컬 컴퓨터에 폰트 디렉토리에 관련 글꼴 정보가 운영체제와 연결되어 있어야 한다.\nPandoc 문서에 메타데이터 variables for LaTeX을 참조하여 필요한 상세설정작업을 수행한다.\n---\ntitle: \"한글 PDF\"\nformat: \n  pdf:\n    documentclass: report\n    papersize: a4\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    colorlinks: true\n    include-in-header: \n      text: |\n        \\usepackage{pdfpages} \nbibliography: bibliography.bib\nlink-citations: yes\ncsl: apa-single-spaced.csl\nmainfont: \"NanumMyeongjo\"\nsansfont: \"NanumGothic\"\nmonofont: \"D2Coding\"\n---\nQuarto 가 문서 변환 핵심 엔진으로 사용하고 있는 Pandoc 은 \\(LaTeX\\) 외에도 ConTeXt, roff ms, HTML (via wkhtmltopdf) 을 사용해서 PDF 파일을 제작할 수 있다. 기존 Pandoc을 이런 방식으로 PDF 를 제작하신 분은 다음 내용을 건너뛰는 것도 좋을 듯 싶다.\n\n17.4.3 저작\n마크다운으로 이미지, 표, 텍스트, 서식, 수식 등 다양한 저작사항을 .qmd 파일에 담아내면 \\(LaTeX\\) 엔진이 PDF로 변환작업을 수행해준다.\n이미지\n\\(LaTeX\\)에 이미지도 삽입가능하다.\n\n\n\n\n그림 17.2: Allison Horst 박사가 그린 펭귄 3종 도식화\n\n\n\n그림 17.3: 펭귄 부리(bill) 변수 설명\n\n\n\nR 코드\n\\(LaTeX\\)에 R 파이썬 코드를 통해 계산된 결과를 그래프, 표, 요약통계량 등으로 뽑아내 삽입가능하다.\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\") +\n  theme_minimal()\n\nmass_flipper\n\n표\n\\(LaTeX\\)에 \\(LaTeX\\) 표를 넣을 수도 있고 R 혹은 파이썬에서 나온 표를 PDF 파일에 넣을 수도 있다.\nLaTeX 표\n\n\n연령\n빈도수\n\n\n\n18–25\n15\n\n\n26–35\n33\n\n\n36–45\n22\n\n\n\ngt 표\n\nknitr::kable(\n  mtcars[1:6, 1:10]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\n데이터\n\n\n\n\n\n\n데이터 수집에 대해 궁금하신 분은 클릭하여 추가 학습하세요\n\n\n\n\n\n팔머펭귄 데이터는 Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집되어 공공에 이용가능하게 공개되었습니다.\n\n\n\n{palmerpenguins} 패키지 (palmer-penguins?)를 통해 R에서 손쉽게 이용가능하게 되었고 원데이터는 (Gorman-2014?) 에서 최초 공개되었다.\nPDF 겉면\nfitpaper \\(LaTeX\\) 패키지를 사용해서 책 첫장(\\frontmatter)과 마지막장(\\backmatter) 겉면을 장식할 수 있다.\n\\includepdf[fitpaper]{book/canva-backmatter}"
  },
  {
    "objectID": "dw_pdf.html#한글-글꼴",
    "href": "dw_pdf.html#한글-글꼴",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.1 한글 글꼴",
    "text": "19.1 한글 글꼴\nQuarto PDF Engines에서 \\(LaTeX\\) 엔진을 별도 다룰 정도로 \\(LaTeX\\) 엔진은 중요하다. Quarto 에서는 TinyTeX를 기반엔진으로 사용되는데 TeX Live 배포판에 기반하고 Pandoc 에서 가장 많이 사용되는 대략 200 여개 패키지를 포함시켜 사용성은 좋게하면서 크기는 대폭 줄였다.\n.qmd 파일 YAML 헤더에 로컬 컴퓨터에 등록된 글꼴을 지정하는 방식도 있다.\nmainfont: \"NanumMyeongjo\"\nsansfont: \"NanumGothic\"\nmonofont: \"D2Coding\"\nCJKmainfont: \"NanumGothic\"\n다른 방식은 글꼴 관련 사항은 packages.tex \\(TeX\\) 파일에 지정하는 것이다.\nformat:\n  pdf:\n    include-in-header:\n      - packages.tex\n      - macros.tex\n    include-before-body: before.tex\n예를 들어 packages.tex 에 한글 글꼴을 다음과 같이 지정한다.\n% 한글 폰트 ----------------------------\n\\setmainhangulfont{NanumMyeongjo} % 나눔명조\n\\setsanshangulfont{NanumGothic}   % 나눔고딕\n\\setmonohangulfont{D2Coding}      % D2코딩\n\n\n\n\n\n\n\n\n\n\n\n\n이광춘, “글을 쓰는 것은 소프트웨어 개발이다!”, 강서양천신문 특집기고(’15년 9월) 와 LaTeX, PDF, 문서, 그리고 사고에서 관련 내용을 발췌한 것임을 밝혀둡니다. 그리고, Quarto PDF 문서를 많이 참고 했습니다."
  },
  {
    "objectID": "dw_slideshow.html",
    "href": "dw_slideshow.html",
    "title": "20  슬라이드 PPT",
    "section": "",
    "text": "쿼토 슬라이드(Quarto Slide) 이전에 사륜안(xaringan)이 마크다운으로 웹 슬라이드를 제작할 수 있었으나 remark.js 에 기반을 두다보니 pandoc과 호환성을 이유로 reveal.js를 기반으로 한 쿼토 슬라이드(Quarto Slide)가 새롭게 쿼토 생태계에서 웹슬라이드 PPT 부분을 담당하게 되었다.\n쿼토는 기본적으로 프로젝트를 기반으로 시작하기 때문에 프로젝트를 하나 생성한다. RStudio를 실행하고 우측 상단 Project:(None)을 클릭하여 New Project를 새로운 디렉토리를 만들어 생성한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n그림 20.1: 슬라이드 제작을 위한 프로젝트 생성\n\n\n프로젝트가 생성되면 File → New File → Quarto Presentation...을 클릭하여 쿼토 슬라이드 .qmd 문서파일을 생성한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n그림 20.2: 쿼토 프리젠테이션 파일 생성\n\n\nCtrl + Shift + k 단축키를 눌러 .qmd 파일을 웹슬라이드로 제작할 수 있다."
  },
  {
    "objectID": "dw_slideshow.html#헬로월드",
    "href": "dw_slideshow.html#헬로월드",
    "title": "\n20  슬라이드 PPT\n",
    "section": "\n20.1 헬로월드",
    "text": "20.1 헬로월드\n쿼토는 기본적으로 프로젝트를 기반으로 시작하기 때문에 프로젝트를 하나 생성한다. RStudio를 실행하고 우측 상단 Project:(None)을 클릭하여 New Project를 새로운 디렉토리를 만들어 생성한다.\n\n\n\n\n\n\n\n\n\n\n\n그림 20.1: 슬라이드 제작을 위한 프로젝트 생성\n\n\n프로젝트가 생성되면 File → New File → Quarto Presentation...을 클릭하여 쿼토 슬라이드 .qmd 문서파일을 생성한다.\n\n\n\n\n\n\n\n\n\n\n\n그림 20.2: 쿼토 프리젠테이션 파일 생성\n\n\nCtrl + Shift + k 단축키를 눌러 .qmd 파일을 웹슬라이드로 제작할 수 있다. 웹슬라이드 파일명을 helloworld.qmd로 저장한다.\n\n\n첫번째 웹슬라이드 제작과정\n\n\n\n다운로드 예제 PPT 파일"
  },
  {
    "objectID": "components.html#그래프",
    "href": "components.html#그래프",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.1 그래프",
    "text": "11.1 그래프\n그래프(ggplot)에 사용되는 글꼴도 마찬가지로 showtext 패키지 웹폰트를 사용해서 다양한 한글도 사용할 수 있다. showtext 패키지는 font_add_google() 함수를 통해서 구글 한글폰트를 지정하여 이를 ggplot 에 적용시킬 수 있다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g,\n                           color = species)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper"
  },
  {
    "objectID": "components.html#표",
    "href": "components.html#표",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.2 표",
    "text": "11.2 표\n문서에 표를 넣게 되면 정보를 효과적으로 요약할 뿐만 아니라 가독성을 높이는 중요한 커뮤니케이션 도구 중 하나다. 마크다운(Markdown), gt 패키지, \\(\\LaTeX\\)는 자료를 표 형식으로 표현할 때 각각의 장점이 있다. 마크다운은 기본적이며 간단한 방법으로, 복잡한 설치나 추가 패키지 없이도 빠르게 내용에 충실한 기본표를 작성할 수 있다. gt 패키지는 그래프 문법을 참고하여 표문법을 충실히 준수하며 데이터에 기반한 표제작에 필요한 거의 모든 기능을 제공한다. \\(\\LaTeX\\)는 가장 전문적인 표를 만들 수 있는 도구로, 논문이나 학술 자료에 적합한 고품질의 표를 제작하는데 유용하다.\n\n\n표제작 세가지 방식\n\n\n11.2.1 마크다운 표\nmtcars 데이터프레임에서 시연목적으로 관측점 5개와 열 4개를 뽑아내서 kable()함수에 넣고 출력형식을 markdown으로 지정한다. markdown외에도 html, pandoc, latex, rst등으로 출력형식을 지정할 수 있다.\n\n\n\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  kable(\"markdown\")\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\nPontiac Firebird\n19.2\n8\n400.0\n\n\nHonda Civic\n30.4\n4\n75.7\n\n\nFiat 128\n32.4\n4\n78.7\n\n\nCamaro Z28\n13.3\n8\n350.0\n\n\nMerc 230\n22.8\n4\n140.8\n\n\n\n\n\n\n\n\n11.2.2 gt\n\n그래프 문법(grammar of graphics)처럼 표 문법(grammar of table) gt 팩키지가 등장했다. 표를 분해하면 다음과 같고 이를 tibble 혹은 데이터프레임을 입력받아 GT 객체로 변환시킨 후에 GT 표를 HTML로 출력하는 작업흐름을 갖는다.\n\n\n표 해부도\n\ngt 팩키지에 내장된 exibble 데이터셋은 \\(8 \\times 9\\) 구조를 갖는 단순한 데이터셋이지만 표와 관련된 다양한 형태를 개발에 사용할 주요한 정보를 담고 있다. 1\n\n\n\nlibrary(gt)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  gt() |&gt; \n  tab_header(\n    title = md(\"**mtcars** 데이터셋 표\"),\n    subtitle = md(\"디지털 글쓰기 `gt` 패키지\")\n  ) %&gt;%\n  tab_source_note(\"표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\")\n\n\n\n\n\n\n\n\n\n\n\n\nmtcars 데이터셋 표\n    \n\n디지털 글쓰기 gt 패키지\n    \n\nmpg\n      cyl\n      disp\n    \n\n\n\n15.2\n8\n275.8\n\n\n30.4\n4\n75.7\n\n\n21.4\n4\n121.0\n\n\n16.4\n8\n275.8\n\n\n19.2\n8\n400.0\n\n\n\n표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\n    \n\n\n\n\n\n\n\n11.2.3 \\(\\LaTeX\\) 표\n\\(\\LaTeX\\)은 수식 뿐만 아니라 복잡하고 미려한 표도 코드를 통해 제작할 수 있다. 쿼토에서 \\(\\LaTeX\\) 표를 제작하기 위해서는 먼저 표제작을 위한 \\(\\LaTeX\\) 표코드를 준비하고, GitHub에서 팬독-필터 tarleb/parse-latex를 다음 명령어로 설치한다.\n$ quarto install extension tarleb/parse-latex\n쿼토 확장팩이 설치되면 YAML에 다음과 같이 parse-latex을 등록하여 사용한다.\n---\nfilters:\n  - parse-latex\n---\n\n\n\n\\begin{table}[h]\n\\centering\n\\begin{tabular}{|l|c|c|c|}\n\\hline\nCar Model & mpg & cyl & disp \\\\\n\\hline\nLotus Europa & 30.4 & 4 & 95.1 \\\\\nMerc 230 & 22.8 & 4 & 140.8 \\\\\nFiat 128 & 32.4 & 4 & 78.7 \\\\\nPontiac Firebird & 19.2 & 8 & 400.0 \\\\\nMerc 450SL & 17.3 & 8 & 275.8 \\\\\n\\hline\n\\end{tabular}\n\\caption{mtcars 데이터셋}\n\\end{table}\n\n\n\n\n\nmtcars 데이터셋\n\nCar Model\nmpg\ncyl\ndisp\n\n\n\nLotus Europa\n30.4\n4\n95.1\n\n\nMerc 230\n22.8\n4\n140.8\n\n\nFiat 128\n32.4\n4\n78.7\n\n\nPontiac Firebird\n19.2\n8\n400.0\n\n\nMerc 450SL\n17.3\n8\n275.8\n\n\n\n\n\n\n11.2.4 표 제작 사례\n펭귄 데이터를 기반으로 gt 패키지를 사용하여 표 제목, 칼럼명, 셀값에 다양한 글꼴, 크기, 색상, 굵기를 적용한 사례가 표 11.1 에 코드로 나와 있다. 미국 웨스 앤더슨 영화 색상(Darjeeling1)을 표에 적용하고, 글꼴로 웹글꼴 구글 글꼴을 활용하여 gt 패키지로 다양한 글꼴을 적용하고, fmt_integer() 함수를 사용해서 숫자 가독성을 높이기 위해 천단위 구분자를 넣고 부가적인 디자인도 표에 적용한다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"#F98400\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#F2AD00\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"#00A08A\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  fmt_integer(body_mass_g) |&gt; \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\",\n      color = \"#FF0000\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n\n\n표 11.1:  글꼴, 색상, 서식을 반영한 표 제작 사례 \n  \n\n팔머 펭귄 표본 10 마리 측정 정보\n    \n\n펭귄종\n      섬\n      부리 길이 (mm)\n      체질량 (g)\n    \n\n\n\nAdelie\nDream\n39.5\n3,300\n\n\nAdelie\nTorgersen\n36.7\n3,800\n\n\nGentoo\nBiscoe\n45.2\n4,750\n\n\nGentoo\nBiscoe\n46.2\n4,800\n\n\nGentoo\nBiscoe\n45.0\n5,050\n\n\nGentoo\nBiscoe\n49.4\n4,925\n\n\nAdelie\nBiscoe\n40.6\n3,800\n\n\nChinstrap\nDream\n49.0\n3,950\n\n\nGentoo\nBiscoe\nNA\nNA\n\n\nAdelie\nDream\n36.3\n3,800\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집"
  },
  {
    "objectID": "components.html#다이어그램",
    "href": "components.html#다이어그램",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.3 다이어그램",
    "text": "11.3 다이어그램\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n    style Contents fill:#059fff,stroke:#333,stroke-width:1px\n    style Format fill:#fc0303,stroke:#333,stroke-width:1px\n    style Deployment fill:#03fc30,stroke:#333,stroke-width:1px"
  },
  {
    "objectID": "components.html#보고서",
    "href": "components.html#보고서",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.4 보고서",
    "text": "11.4 보고서\n데이터 사이언스 한글 출판 문서 제작을 위해서 다음 글꼴을 선택한다. 제목으로 산스 세리프 폰트로 구글 폰트에서 “노토 산스 세리프”를 선정하고, 본문은 눈누 웹사이트에서 “마루부리”를 선정하고 코딩 글꼴 폰트로 눈누에서 D2Coding 폰트를 지정한다.\n\n산스 세리프(제목): Noto Sans Serif\n세리프(본문): 마루부리\n등간격(코딩): D2Coding\n\n\nlibrary(tidyverse)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\") +\n  theme_minimal()\n\n\n11.4.1 css 파일\n출판문서 제작에 사용된 글꼴 관련 사항을 css/quarto-fonts.css 파일에 지정해둔다.\n\n/* 글꼴 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR');\n\n@import url('https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap');\n\n@font-face {\n    font-family: 'MaruBuri-Regular';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'D2Coding';\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_three@1.0/D2Coding.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n/* HTML */\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"Noto Sans KR\", sans-serif;\n}\n\nbody {\n  font-family: \"Nanum Myeongjo\", \"MaruBuri-Regular\", \"Noto Serif KR\", serif;\n  font-size: 15px;\n}\n\ntt, code, pre {\n  font-family: \"D2Coding\", Consolas, monospace;\n  font-size: 15px;\n}"
  },
  {
    "objectID": "components.html#수식",
    "href": "components.html#수식",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.5 수식",
    "text": "11.5 수식\n\n11.5.1 LaTeX를 이용한 수학적 표현\n수학은 공학, 물리학, 컴퓨터 과학, 경제학 등 다양한 분야에서 중심 역할을 하는 학문으로 정확하고 명료한 수학적 표기는 매우 중요하다. \\(\\LaTeX\\)은 수학적 표현을 깔끔하고 정확하게 표현할 수 있는 도구 중 하나로 \\(\\LaTeX\\)를 이용해 다양한 수학적 표현법을 살펴보자.\n\\(\\LaTeX\\)은 기본적인 사칙연산에서부터 지수, 삼각함수, 적분, 행렬, 그리스 문자, 무한대 등 광범위한 수학적 표현이 가능하여 전문가 느낌의 문서나 논문, 프레젠테이션에 즉시 적용할 수 있는 고급스럽고 미련한 수식표현이 가능하다.\n기본적인 덧셈과 뺄셈은 \\begin{equation} a + b = c \\end{equation}처럼 표현할 수 있고, 복잡한 적분도 \\begin{equation} \\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2} \\end{equation}와 같이 명료하게 표현할 수 있을 뿐만 아니라, 행렬이나 그리스 문자도 \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}와 \\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu 등의 명령어를 통해 표현할 수 있다.\n\n11.5.2 기본 연산자와 수\n\n\n\\begin{equation}\na + b = c\n\\end{equation}\n\n\\[\n\\begin{equation}\na + b = c\n\\end{equation}\n\\]\n\n\n\n11.5.3 제곱근과 지수\n\n\n\\begin{equation}\n\\sqrt{a^2 + b^2} = c\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\sqrt{a^2 + b^2} = c\n\\end{equation}\n\\]\n\n\n\n11.5.4 삼각함수\n\n\n\\begin{equation}\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\\end{equation}\n\\]\n\n\n\n11.5.5 적분\n\n\n\\begin{equation}\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\\end{equation}\n\\]\n\n\n\n11.5.6 행렬\n\n\n\\begin{equation}\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\\end{equation}\n\\]\n\n\n\n11.5.7 그리스 문자\n\n\n\\begin{equation}\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\\end{equation}\n\\]\n\n\n\n11.5.8 무한대\n\n\n\\begin{equation}\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\\end{equation}\n\n\\[\n\\begin{equation}\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\\end{equation}\n\\]\n\n\n\n11.5.9 합과 곱\nMathJax에서 줄바꿈(\\\\)이 반영되지 않아 aligned를 사용했지만, MathJax v4 에서 기능이 구현되어 구문이 훨씬 간결해질 것으로 보인다.\n\n\n\\begin{equation}\n\\begin{aligned}[t]\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} \\\\\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\end{aligned} \n\\end{equation}\n\n\\[\n\\begin{equation}\n\\begin{aligned}[t]\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} \\\\\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\end{aligned}\n\\end{equation}\n\\]\n\n\n이 외에도 \\(\\LaTeX\\)로 더 복잡한 수식표현도 얼마든지 가능하다."
  },
  {
    "objectID": "editor.html#부조종사",
    "href": "editor.html#부조종사",
    "title": "\n3  편집기와 출판\n",
    "section": "\n3.6 부조종사",
    "text": "3.6 부조종사\nGitHub 부조종사(Copilot)를 Rstudio에서 사용하기 위해서는 특별한 버전 Rstudio, 즉 일일 빌드 (Daily Builds)가 필요하여 각자 운영체제에 맞는 RStudio Desktop 버전을 다운로드한 후 설치한다.\n\nTools -&gt; Global Options -&gt; Copilot -&gt; Enable Github Copilot\n\n설치가 완료되면 Rstudio를 실행하고 상단 메뉴에서 ‘Tools’를 선택한 다음 ’Global Options’을 클릭하면, 왼쪽 사이드바에서 ’Copilot’을 선택하고 ’Enable GitHub Copilot’ 체크박스를 선택한 다음 ’Sign In’을 클릭하고 나타나는 링크에서 인증 코드를 입력한다. ’Authorize Github Copilot Plugin’을 클릭하여 인증 과정을 완료하면 설정이 완료된다.\n\n\nGitHub 부주종사 설치과정\n\nGitHub Copilot를 Rstudio에서 사용해보면, 작성하려는 코드가 회색으로 예측되어 나타난다. ‘Tab’ 키를 눌러 탭완성(Tab Completion) 기능으로 제시한 코드를 수락하여 개발을 이어간다."
  },
  {
    "objectID": "writing.html#재현가능-글쓰기",
    "href": "writing.html#재현가능-글쓰기",
    "title": "8  디지털 글쓰기",
    "section": "8.3 재현가능 글쓰기",
    "text": "8.3 재현가능 글쓰기\n과학의 근본적인 원칙 중 하나는 연구의 결과가 독립적으로 재현가능해야 한다는 것이다. 이 원칙은 연구 타당성을 확인하고, 그 결과가 일반화 가능한지 검증하는 데 필수적이다. 그러나 2010년 전후, 다양한 학문 분야에서 재현할 수 없는 연구 결과가 다수 발표됨에 따라 과학 커뮤니티 내에서 큰 우려가 발생하였고, 이러한 현상을 재현성 위기(Reproducibity Crisis)라고 부르며, 과학연구 신뢰성을 크게 훼손시켰다.\n이 위기에 대응하여, 전 세계 연구자들과 전문가들은 재현가능한 연구 저작을 촉진하고 지원하기 위한 다양한 방안을 모색하기 시작했다. 연구방법론 표준화, 데이터 공유, 연구 소프트웨어 투명성 강화 등 다양한 활동이 들불처럼 일어났고, 기술 커뮤니티 형성과 더불어 다양한 도구와 플랫폼 개발을 통해 재현성 문제를 해결하고자 하는 움직임이 확산되고 있다.\n데이터 과학에서 재현성은 핵심적인 요소로 간주된다. 연구 결과의 신뢰성과 타당성을 검증하는 데 있어, 다른 연구자나 전문가들이 동일한 결과를 도출할 수 있도록 연구 과정을 투명하게 공유하는 것은 필수적이다. 이러한 맥락에서 R 팩키지는 재현가능한 데이터 분석 프로젝트를 지원하는 데 중요한 역할을 한다.\n\n\n\n그림 8.1: 재현가능한 과학기술 문서 제작과정\n\n\n특히, R 팩키지를 활용한 연구 개요서(research compendia)는 재현성을 강화하는 훌륭한 도구로 간주된다. 연구 개요서는 연구의 모든 요소(코드, 데이터, 출력 결과물, 환경 등)을 포괄적으로 담고 있어, 연구의 전체 과정을 투명하게 추적하고 검증할 수 있다. 한 사례로 그림 8.1 에 코드부터 단계별로 재현가능한 과학기술 문서 제작과정을 보여주고 있다."
  },
  {
    "objectID": "writing.html#디지털-글쓰기",
    "href": "writing.html#디지털-글쓰기",
    "title": "8  디지털 글쓰기",
    "section": "8.4 디지털 글쓰기",
    "text": "8.4 디지털 글쓰기\n글쓰기는 인류의 역사와 함께한 중요한 소통 도구로서, 그 방식과 형태는 시대별로 지속적으로 변화해왔다. 최근의 글쓰기 환경은 그 전보다 훨씬 복잡하고 다양한 요소를 요구한다. 과거에는 원고지에 텍스트를 작성하는 것만으로도 충분했다. 한글이나 영어로 이루어진 문장들은 감정을 전달하거나 사실을 나열하며, 이를 통해 독자와의 소통을 이루었다. 그러나 현대의 글쓰기 환경에서는 단순한 텍스트 정보 전달만으로는 부족하다. 이미지, 그래픽, 그리고 인터랙티브한 요소들이 텍스트와 함께 통합되어야 하며, 이를 통해 독자의 관심을 끌고 정보의 흡수를 증진시킨다.\n가독성 또한 중요한 고려사항이다. 디자인적인 측면에서 효과적인 글꼴 선택은 텍스트의 내용을 더욱 돋보이게 하며, 독자의 읽기 경험을 향상시킨다. 현대의 글쓰기는 단순한 정보 전달을 넘어서, 그 과정과 결과의 재현성에도 중점을 둔다. 특히 과학연구나 기술문서에서 두드러진다. 자동화 도구와 버전 관리 시스템의 도입을 통해 재현성을 지원하고, 글쓰기 효율성과 투명성을 동시에 높이고 있다.\n최근의 눈에 띄는 추세 중 하나는 인공지능 발전과 그에 따른 기계 저작물의 폭증을 들 수 있다. 기계가 작성한 텍스트를 포함한 콘텐츠가 인간 저자와 비슷하거나 오히려 생산 속도나 경제적인 면에서 확실한 우위를 보이면서 이에 대한 연구와 기술적 시도가 활발히 이루어지고 있다.\n\n\n\n현대의 글쓰기: 기술적 도전과 진화의 중심"
  },
  {
    "objectID": "writing.html#latex-philosophy",
    "href": "writing.html#latex-philosophy",
    "title": "8  디지털 글쓰기",
    "section": "8.5 \\(\\LaTeX\\) 철학",
    "text": "8.5 \\(\\LaTeX\\) 철학\n\\(\\LaTeX\\)은 한마디로 정의하게 되면 “논리적인 디자인”이라고 볼 수 있다. 저작물이 만들어지는 과정은 저작자가 원고를 손으로 쓰거나 타자기로 쳐서 출판사에 넘겨주면, 출판사의 편집디자이너는 원고를 보고 세부적인 출력형식을 결정하여 인쇄소에 넘긴다. 인쇄소는 이를 토대로 과거 식자공이 식자판을 만들었다면 현재는 컴퓨터가 파일을 만든다. \\(\\LaTeX\\) 과 \\(\\TeX\\) 이 하는 업무가 다소 차이가 난다. (김영록, 2017)\n\n\\(\\LaTeX\\) 은 편집디자이너에 해당되는 업무를 수행\n\\(\\TeX\\) 은 식자공에 해당되는 업무를 수행\n\n\n\n\n문서의 논리적 구조와 디자인\n\n\n컴퓨터를 활용하여 전자조판을 넘긴 이유는 문서를 좀 더 읽기 쉽게 만들어 독자에게 저작자의 생각을 잘 이해시키는 것이다. 이러한 목적을 달성하기 위해서는 문서의 디자인이 그 문서의 논리적 구조를 잘 반영시켜야 하고, 반대로 문서의 논리적 구조를 잘 반영시키기 위해서는 문서 디자이너가 문서의 논리적 구조를 잘 이해해야만 된다. \\(\\LaTeX\\)의 명령어는 기본적으로 문서의 논리적 구조를 기술하는 것이다. 이렇게 기술된 명령어를 \\(\\TeX\\)으로 전달하여 조판하게 되어 원하는 최종 결과물을 얻게 된다.\n\\(\\LaTeX\\)에서 채택하는 논리적 디자인의 가장 큰 장점은 글을 더 잘 쓰게 된다는 점에 있다. \\(\\LaTeX\\) 으로 글을 작성하게 되면 점점 \\(\\LaTeX\\)이 채택하고 있는 논리적 디자인에 맞추게 되고 이를 통해서 글쓰기 실력이 향상된다.\n아마도 \\(\\LaTeX\\)의 가장 큰 장점은 자동화에 있다. 시각적 디자인(Wysiwig)을 채택하여 작성한 문서를 다른 형식으로 변환하거나 문서의 수식의 일련번호를 로마자에서 아라비아 숫자로 모두 변경시키거나 표나 그래프 번호를 일괄번경하는 등 이러한 사례는 자주 발견된다. 특히, 국내외 저널에 제출할 논문을 \\(\\LaTeX\\) 으로 작성한 경우 템플릿만 바꾸면 쉽게 고품질 논문을 만들 수 있는데 워드를 이용하여 작성할 경우 수작업을 하게 되어 비생산적인 시간낭비도 크고 미려한 문서를 얻을 수도 없다.\n따라서, \\(\\LaTeX\\) 으로 글을 쓰게 되면 글쓰기 본질에 집중할 수 있어 저작자의 생각과 의견을 좀더 진솔하게 가감없이 독자에게 전달시킬 수 있게 된다."
  },
  {
    "objectID": "writing.html#wysiwyg",
    "href": "writing.html#wysiwyg",
    "title": "8  디지털 글쓰기",
    "section": "8.6 시각적 디자인",
    "text": "8.6 시각적 디자인\n문서를 논리적으로 디자인하는 반대 개념으로 있는 것이 위즈윅(WSYIWIG, What You See Is What You Get) 으로 대표적인 것이 아래한글, MS 워드와 같은 워드 프로세서다. 시각적 디자인을 하게 되면 논리적이지 못한 애매한 조판을 하기 쉽다. 또한, PDF 파일로도 출력을 할 때 미세하나마 출력물에 일관성이 실종되기도 한다.\n\n\n\n\n김영록. (2017). 교육 현장에서의 텍의 활용. TeX: 조판, 그 이상의 가능성."
  },
  {
    "objectID": "writing.html#latex-engine",
    "href": "writing.html#latex-engine",
    "title": "4  쿼토",
    "section": "4.5 \\(\\LaTeX\\) 엔진",
    "text": "4.5 \\(\\LaTeX\\) 엔진\n\\(\\LaTeX\\) 을 실제 문서작성에 사용하기 위해서는 텍 배포판을 선택해야 하는데 KTUG 한국 \\(\\TeX\\) 사용자 그룹에서 \\(ko.TeX\\) Live를 추천하고 있다. 이유는 다음과 같다. (이호재, 2017)\n\npdfLaTeX, XeLaTeX, LuaLaTeX 3종 \\(\\LaTeX\\) 엔진이 있는데 XeLaTeX 이 유니코드 텍 엔진이라 CJK 동아시아권 언어를 잘 지원하고 트루타입 및 오픈타입 폰트도 자유롭게 선택할 수 있기 때문에 인기가 많다.\n운영체제에 따라 차이가 나지만 안정적으로 \\(\\LaTeX\\) 을 설치하여 실제 문서작업에 이용하기에는 \\(\\TeX\\) Live 가 MikTeX 보다 안정성이나 여러가지 사용자 지원 측면에서 낫다.\n\\(\\TeX\\) 소스파일에서 PDF 파일로 탐색을 하던가 반대로 PDF 파일에서 \\(\\TeX\\) 소스파일로 탐색을 하게 되는 기능을 TexStudio IDE를 활용하여 바로 가능하게 됨\n\n과거 latex+divps+pspdf 를 활용한 가장 전통적인 작업흐름을 가졌다. 즉, pstricks를 활용하여 PDF 파일을 제작하는 방식으로 시간이 오래 걸리고 이미지로 eps 파일만 사용한다는 한계가 있다. 또 다른 latex+dvipdfmx 작업흐름은 중간에 .dvi 파일을 생성하고 dvipdfmx를 사용하여 PDF 파일을 제작하는 방식이다. 마지막으로 pdfLaTeX, XeLaTeX, LuaLaTeX 을 활용한 작업흐름이 있는데 .tex 소스파일에서 .pdf 파일을 즉시 생성한다는 점에서 인기가 있다.\n이외에도 논문 제작이 아닌 문서를 제작하는 경우 한단계 더 들어가 memoir 혹은 oblivoir 클래스를 이용하는 것이 이미 검증된 문서 템플릿을 바탕으로 PDF 문서를 뽑아내는 신속한 방법이다.\n\n\n\n한글지원 LaTeX 엔진과 작업흐름\n\n\n\n\n\n\n김영록. (2017). 교육 현장에서의 텍의 활용. TeX: 조판, 그 이상의 가능성.\n\n\n이호재. (2017). 레이텍을 빨리 쓸 수 있는 방법. TeX: 조판, 그 이상의 가능성."
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "4  쿼토 소개",
    "section": "",
    "text": "5 Single Sourcing 출판저작\n데이터 사이언스 출판저작에 다소 차이는 있지만 출판에 대한 대체적인 방식은 유사할 것으로 보인다. 즉, Single Sourcing 을 콘텐츠 저작, 디자인, 최종 출판물 관리까지 일원화되어 자동화되어 체계적으로 관리된다면 중복되는 낭비는 물론 재현가능성도 높여 과학기술 출판저작물로 가장 이상적으로 간주되고 있다."
  },
  {
    "objectID": "quarto.html#작업흐름",
    "href": "quarto.html#작업흐름",
    "title": "5  쿼토(Quarto)",
    "section": "5.2 작업흐름",
    "text": "5.2 작업흐름\n기존 R .Rmd, 파이썬 .ipynb 확장자를 갖는 작업흐름이 .qmd 파일로 단일화되는 것이 가장 큰 특징이다. 따라서 마크다운으로 콘텐츠를 작성하고 프로그래밍 코드를 R, 파이썬, 자바스크립트, 쥴리아 로 작성하게 되면 자동으로 계산을 수행하고 결과물을 마크다운으로 변환시키기 때문에 후속 작업을 신경쓰지 않고 원하는 결과물을 얻을 수 있는 장점이 있다.\n\n5.2.1 R (.Rmd)\n\n\n\n\n\n\n\n5.2.2 파이썬 (주피터)\n\n\n\n\n\n\n\n5.2.3 Quarto - R\n\n\n\n\n\n\n\n5.2.4 Quarto - 파이썬"
  },
  {
    "objectID": "quarto.html#r-.rmd",
    "href": "quarto.html#r-.rmd",
    "title": "4  쿼토(Quarto)",
    "section": "4.3 R (.Rmd)",
    "text": "4.3 R (.Rmd)"
  },
  {
    "objectID": "quarto.html#파이썬-주피터",
    "href": "quarto.html#파이썬-주피터",
    "title": "4  쿼토(Quarto)",
    "section": "4.4 파이썬 (주피터)",
    "text": "4.4 파이썬 (주피터)"
  },
  {
    "objectID": "quarto.html#quarto---r",
    "href": "quarto.html#quarto---r",
    "title": "4  쿼토(Quarto)",
    "section": "4.5 Quarto - R",
    "text": "4.5 Quarto - R"
  },
  {
    "objectID": "quarto.html#quarto---파이썬",
    "href": "quarto.html#quarto---파이썬",
    "title": "4  쿼토(Quarto)",
    "section": "4.6 Quarto - 파이썬",
    "text": "4.6 Quarto - 파이썬"
  },
  {
    "objectID": "quarto.html#주요-기능",
    "href": "quarto.html#주요-기능",
    "title": "4  쿼토(Quarto)",
    "section": "4.4 주요 기능",
    "text": "4.4 주요 기능\nFAQ for R Markdown Users\n쿼토는 “차세대 R 마크다운”이라는 별명답게 R 마크다운 생태계의 다양한 패키지와 기능을 지원한다. 쿼토가 시작이 R 마크다운보다 길지 않아 아직 R 마크다운 생태계의 모든 기능을 지원하지는 않지만, 점차 지원 범위를 넓혀나가고 있으며 고유한 기능도 추가로 제공하기 시작했다.\n\n\n\n기능\nR 마크다운\n쿼토(Quarto)\n\n\n\n\n파일형식\n\nhtml_document\npdf_document\nword_document\n\n\nhtml\npdf\ndocx\n\n\n\n비머(Beamer)\n\nbeamer_presentation\n\n\nbeamer\n\n\n\n파워포인트(PPT)\n\npowerpoint_presentation\n\n\npptx\n\n\n\n웹 슬라이드\n\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n\nAdvanced Layout\n\ntufte\ndistill\n\n\nQuarto Article Layout\n\n\n\nCross References\n\nhtml_document2\npdf_document2\nword_document2\n\n\nQuarto Crossrefs\n\n\n\nWebsites & Blogs\n\nblogdown\ndistill\n\nQuarto Websites\nQuarto Blogs\n\n\nBooks\nbookdown\nQuarto Books\n\n\nInteractivity\nShiny Documents\nQuarto Interactive Documents\n\n\nPaged HTML\npagedown\n출시 예정\n\n\nJournal Articles\nrticles\nQuarto Journal Articles\n\n\nDashboards\nflexdashboard |\n출시 예정\n\n\nInteractive Tutorials\nlearnr\n계획 없음\n\n\n\n\n\n\n\nHyde, A. (2021, 8월 16). Single Source Publishing - A investigation of what Single Source Publishing is and how this ’holy grail’ can be achieved. https://coko.foundation/articles/single-source-publishing.html"
  },
  {
    "objectID": "quarto.html#위지윅-vs-위지윔",
    "href": "quarto.html#위지윅-vs-위지윔",
    "title": "4  쿼토(Quarto)",
    "section": "4.8 위지윅 vs 위지윔",
    "text": "4.8 위지윅 vs 위지윔\n신속하고 빠르게 누구나 짧은 학습을 통해서 문서를 저작하고 출판할 수 있는 방식은 아래한글 혹은 MS워드 워드프로세서를 사용하는데 이는 위지위그(WYSIWYG: What You See Is What You Get, “보는 대로 얻는다”)에 기초한 것으로 문서 편집 과정에서 화면에 포맷된 낱말, 문장이 출력물과 동일하게 나오는 방식을 말한다. 위지윅의 대척점에 있는 것이 위지윔(WYSIWYM, What You See Is What You Mean)으로 대표적인 것인 \\(\\LaTeX\\) 으로 구조화된 방식으로 문서를 작성하면 컴파일을 통해서 최종 문서가 미려한 출판가능한 PDF, PS, DVI 등 확장자를 갖는 출판결과물을 얻을 수 있다.\n\n\n\n\n\n\n4.8.1 블로그 저작 소프트웨어\n개인용 컴퓨터가 보급되면서 아래한글과 같은 워드 프로세서를 사용해서 저작을 하는 것이 일반화되었지만 곧이어 인터넷이 보급되면서 웹에 문서를 저작하는 것이 이제는 더욱 중요하게 되었다. 전문 개발자가 아닌 일반인이 HTML, CSS, JavaScript를 학습하여 웹에 문서를 제작하고 출판하는 것은 난이도가 있다보니 워드프레스와 티스토리 같은 위지위그 패러다임을 채택한 저작도구가 사용되고 있으나 상대적으로 HTML, CSS, JavaScript을 조합한 방식과 비교하여 고급스러운 면과 함께 정교함에 있어 아쉬움이 있는 것도 사실이다.\n\n\n4.8.2 워드프레스와 티스토리\n\n\n\n\n\n\n\n4.8.3 HTML + CSS + 자바스크립트"
  },
  {
    "objectID": "quarto.html#quarto",
    "href": "quarto.html#quarto",
    "title": "4  쿼토(Quarto)",
    "section": "4.9 Quarto",
    "text": "4.9 Quarto\nQuarto 는 10년전부터 시작된 knitr 경험을 많이 녹여냈고 위지윔 패러다임에 기초를 하고 있다고 볼 수 있다. RStudio를 IDE로 Quarto CLI와 함께 출판물을 저작한다면 편집기에 있는 Visual 모드가 있어 위지윅 패러다임도 문서저작에 사용이 가능하다. 특히, R, 파이썬, SQL, 자바스크립트 등 컴퓨팅 엔진을 달리하여 문서에 그래프, 표, 인터랙티브 결과물도 함께 담을 수 있는 것은 커다란 장점이다."
  },
  {
    "objectID": "quarto.html#quarto-해부",
    "href": "quarto.html#quarto-해부",
    "title": "4  쿼토(Quarto)",
    "section": "4.10 Quarto 해부",
    "text": "4.10 Quarto 해부\nQuarto 저작은 크게 3가지 구성요소로 되어 있다.\n\n메타데이터: YAML\n텍스트: 마크다운\n코드: knitr, jupyter\n\n상기 구성요소를 조합하게 되면 다양한 데이터 사이언스 웹사이트를 비롯한 출판물을 제작하게 된다.\n\n\n\nQuarto 문서 구성요소\n\n\n\n4.10.1 YAML\n메타데이터는 YAML인데 GNU처럼 “Yet Another Markup Language” 혹은 “YAML Ain’t Markup Language”을 줄인단어다.\n\n키값\n---\nkey: value\n---\n\n\n\n4.10.2 출력옵션\n---\nformat: something\n---\n. . .\n---\nformat: pdf\n---\n---\nformat: pdf\n---\n---\nformat: revealjs\n---\n\n\n4.10.3 상세 출력옵션\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n왜 YAML이 필요하게 된 것인가? YAML은 단순히 KEY: Value 에 불과한데 CLI를 이해하게 되면 왜 YAML을 사용하는 것이 유용한지 이해할 수 있다. 먼저 간단한 CLI 명령어를 YAML로 변환해보자.\n\n\nterminal\n\nquarto render document.qmd --to html\n\n---\nformat: pdf\n---\n한단계 더 들어가서 좀더 많은 선택옵션을 넣어 고급 기능을 넣는 사례를 살펴본다.\n\n\nterminal\n\nquarto render document.qmd --to html -M code fold:true\n\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---"
  },
  {
    "objectID": "quarto.html#마크다운",
    "href": "quarto.html#마크다운",
    "title": "4  쿼토(Quarto)",
    "section": "4.9 마크다운",
    "text": "4.9 마크다운\n데이터 과학 문서 웹사이트에 “마크다운 기초”, “고급 마크다운”, “R 마크다운 실무” 를 참조한다."
  },
  {
    "objectID": "quarto.html#코드",
    "href": "quarto.html#코드",
    "title": "4  쿼토(Quarto)",
    "section": "4.10 코드",
    "text": "4.10 코드\nR, 파이썬, SQL, 자바스크립트 등 버그 없이 정상 동작하는 프로그램을 작성하여 포함시킨다."
  },
  {
    "objectID": "quarto.html#yaml-코드편집",
    "href": "quarto.html#yaml-코드편집",
    "title": "4  쿼토(Quarto)",
    "section": "4.11 YAML 코드편집",
    "text": "4.11 YAML 코드편집\nRStudio, VSCode IDE는 탭-자동완성(tab-completion)을 제공한다. 즉, 첫단어를 타이핑하고 탭을 연결하여 키보드를 치게되면 연관 명령어가 나와 선택하면 된다. 혹은 Ctrl + space 단축키를 치게되면 전체 명령어가 나온다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHyde, A. (2021, 8월 16). Single Source Publishing - A investigation of what Single Source Publishing is and how this ’holy grail’ can be achieved. https://coko.foundation/articles/single-source-publishing.html"
  },
  {
    "objectID": "colors.html#color-mechanism",
    "href": "colors.html#color-mechanism",
    "title": "\n13  색상\n",
    "section": "\n13.1 시각화 메커니즘 1\n",
    "text": "13.1 시각화 메커니즘 1\n\n크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다.\n따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다.\n\n\n시각적 인지 메커니즘\n\n\n13.1.1 16진수 RGB 표색법\n양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 전문분야를 갖고 있으며 특히, ColorBrewer 으로 알려진 색생체계는 웹, 출판, 색맹을 고려하여 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 시각화를 할 때 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자.\n\nlibrary(RColorBrewer)\nbrewer.pal(n = 8, name = \"Dark2\")\n\n[1] \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\"\n[8] \"#666666\"\n\n\n# 기호는 관례로 붙이는 것이고, 16진수 문자열을 다음과 같이 파싱한다: #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다.\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다.\n\\[ 9E = 9 * 16^1 + 14 * 16^0 = 9 * 16 + 14 = 158 \\]\n무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다.\n도움이 되는 기억해야될 중요한 사례가 다음에 나타나 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nblue\n#0000FF\n0\n0\n255\n\n\ngreen\n#00FF00\n0\n255\n0\n\n\nred\n#FF0000\n255\n0\n0\n\n\n\n\n다음에 흑백, 회색을 표현한 것이 나타나 있다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nwhite, gray100\n#FFFFFF\n255\n255\n255\n\n\ngray67\n#ABABAB\n171\n171\n171\n\n\ngray33\n#545454\n84\n84\n84\n\n\nblack, gray0\n#000000\n0\n0\n0\n\n\n\n\n“gray” 회색으로 치환하게 되면, “gray”를 보게되는 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다.\n\n\nR에서 색상을 지정하는 방법\n\n\n양의 정수: palette()함수로 조작하거나 검색한 현재 색상 팔레트에 인덱스를 사용.\n\n색상 명칭: colors() 함수로 검색된 색상\n\n16진수 문자열: 16진수로 구성된 3개조에 추가해서, 알파 투명도를 나타내는 네번째 채널을 넣어 16진수 4개조로 구성된 생상표로 확장하기도 한다.\n\n\nrgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다."
  },
  {
    "objectID": "colors.html#dataviz-mechanism-hcl",
    "href": "colors.html#dataviz-mechanism-hcl",
    "title": "\n13  색상\n",
    "section": "\n13.2 RGB 색상모형 대안 - HCL\n",
    "text": "13.2 RGB 색상모형 대안 - HCL\n\nRGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계를 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다.\n색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다.\n사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다.2 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다.\n\n\nHCL 색상모형의 세가지 차원\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다.\n\n\n저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다.\n위캠의 ggplot2 책에 나온 6.6 그림이 HCL 색공간을 이해하는데 도움이 된다.\n\n\nggplot2 HCL 색공간\n\n위캠 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다.\ncolorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다.\n인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다.\n\n“Why Should Engineers and Scientists Be Worried About Color?”"
  },
  {
    "objectID": "colors.html#viz-printer-cmyk",
    "href": "colors.html#viz-printer-cmyk",
    "title": "\n13  색상\n",
    "section": "\n13.3 프린터 색상모형: CMYK 3 4\n",
    "text": "13.3 프린터 색상모형: CMYK 3 4\n\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다.\n학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다.\nRGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\npdf(\"data/color_rgb.pdf\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()\n\n\n\n\n\n\nCMYK 색상 출력\n\npdf(\"data/color_cmyk.pdf\", colormodel = \"cmyk\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()"
  },
  {
    "objectID": "colors.html#dataviz-color-brewer-viridis",
    "href": "colors.html#dataviz-color-brewer-viridis",
    "title": "\n13  색상\n",
    "section": "\n13.4 RColorBrewer 와 viridis\n",
    "text": "13.4 RColorBrewer 와 viridis\n\n\n13.4.1 RColorBrewer\n색상선택이 가장 논란이 많고, 이리저리 만지작 거리면서 정말 많은 시간을 보내는 분야다. 지리학자이며 생상 전문가 Cynthia Brewer 교수가 출판과 웹에서 사용되는 색상표를 제작했고, 이는 RColorBrewer 팩키지에 반영되어 있다. 팩키지를 설치하고 사용하면 된다. 연관된 전체 팔레트를 살펴보는 명령어는 display.brewer.all() 이다.\n\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\ndisplay.brewer.all()\n\n\n\n\n\n\n\n팔레트는 종류가 많지만 다음 세가지 범주에 속한다. 위에서 아래부터 다음과 같다.\n\n\n순차적(sequential) : 낮은 것에서 높은 것으로 한쪽 극단이 흥미롭고 반대쪽 극단이 재미없는 것을 시각화하는데 매우 좋다. 예를 들어 p-값, 상관계수 (주의: 상관계수 1 이 흥미로운 것은 양수를 가정했다)\n\n정량적(quantitative) : 순서가 없는 범주형 자료를 시각화할 때 유용하다. 예를 들어, 국가나 대륙. 특수한 “쌍을 이룬” 팔레트가 있다; 예를 들어, 곡물 밀 유형같이 실험이 아닌 요인, 실험군과 대조군 같은 이진 실험 요인.\n\n발산하는(diverging) : 극단의 음수에서 극단의 양수까지 범위를 같는 것을 시각화하는데 유용한다. 이런 데이터는 극단의 값이 중간에 위치한 덜 흥미로운 지점을 지난다. 예를 들어, t-통계량, z-점수, 상관계수가 이에 속한다.\n\n명칭을 명세해서 RColorBrewer 팔렛트 하나만 볼 수 있다.\n\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n\n\n\n\n\n\n\n\n13.4.2 viridis\n2015년 Stéfan van der Walt 와 Nathaniel Smith는 파이썬 matplotlib 팩키지에 사용될 새로운 색상 지도를 설계했고, SciPy 2015에서 발표했다. viridis 팩키지로 인해 R에 4가지 신규 팔레트가 추가되었다. CRAN과, GitHub에서 팩키지를 만날 수 있다.\n\n\nviridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색망을 갖는 독자도 올바르게 지각될 수 있도록 설계되었다.\n\n아직 나온지 얼마되지 않아서, 자세한 사항은 viridis 팩키지를 설치하고 소품문을 읽고 직접 경험하기 바란다.\n\n13.4.3 색맹을 갖는 사람\ndichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다.\n\nlibrary(dichromat) # install.packages(\"dichromat\")\n\ncolorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다.\n\n\n\n\n\n\n\n\ndichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹으로 표현되는 것이다.(rogowitz1996ibm?)\n\npal_name &lt;- names(tvthemes:::stevenUniverse_palette)\n\nshow_all_pal &lt;- function(pal_name) {\n  exp_pal &lt;- paste0(\"tvthemes:::stevenUniverse_palette$\", pal_name)\n  \n  pal_call &lt;- eval(expr = parse(text = exp_pal))\n  \n  return(scales::show_col(pal_call))\n}\n\npurrr::walk(pal_name, ~ show_all_pal(pal_name = .x))\n\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지다. 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer)\n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\n\n\n\n\n\n\ndev.off()\n\nnull device \n          1 \n\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄의 수를 집계한 다음, Torgersen 섬의 이름을 NA(결측값)으로 변경한다. 변경된 데이터를 바탕으로 ggplot2 패키지를 사용해 막대 그래프를 생성하며, 섬의 이름을 x축에, 각 섬의 펭귄 수를 y축에 배치하고, 각 막대는 해당 섬의 이름에 따라 다른 색상으로 채워운다. 결측값(여기서는 Torgersen 섬)은 회색으로 표시되며, 나머지 색상은 RColorBrewer의 “Accent” 팔레트를 사용하여 색을 채워넣는다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")"
  },
  {
    "objectID": "colors.html#정당-색상",
    "href": "colors.html#정당-색상",
    "title": "\n13  색상\n",
    "section": "\n13.5 정당 색상",
    "text": "13.5 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\")"
  },
  {
    "objectID": "colors.html#이미지-색상",
    "href": "colors.html#이미지-색상",
    "title": "\n13  색상\n",
    "section": "\n13.6 이미지 → 색상",
    "text": "13.6 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)"
  },
  {
    "objectID": "dw_pdf.html#latex-engine",
    "href": "dw_pdf.html#latex-engine",
    "title": "\n17  한글 PDF\n",
    "section": "\n17.2 \\(\\LaTeX\\) 엔진",
    "text": "17.2 \\(\\LaTeX\\) 엔진\n\\(\\LaTeX\\)을 실제 문서 작성에 활용하기 위해서는 적절한 \\(\\TeX\\) 배포판을 선택해야 한다. 이에 대해 KTUG 한국 TeX 사용자 그룹은 \\(ko.TeX\\) Live를 추천하고 있으며, 그 이유는 다음과 같다. (이호재, 2017)\n\n\n\\(\\LaTeX\\) 엔진으로 pdfLaTeX, XeLaTeX, LuaLaTeX 세 가지가 있으나, XeLaTeX은 유니코드 \\(\\TeX\\) 엔진으로 동아시아 언어(CJK)를 잘 지원하고, 트루타입 및 오픈타입 폰트를 자유롭게 선택할 수 있어 인기가 높다.\n운영체제에 따라 차이는 있지만, 실제 문서 작업에 \\(\\LaTeX\\)을 안정적으로 설치하고 사용하기 위해서는 TeX Live가 MikTeX보다 안정성과 사용자 지원 측면에서 우수하다.\n\n\\(\\TeX\\) 소스파일과 PDF 파일 간의 탐색 기능은 TexStudio IDE를 활용하여 쉽게 이용할 수 있다.\n\n과거에는 latex+dvips+pspdf를 사용한 전통적인 작업 흐름이 있었으며, 이 방식은 pstricks를 이용해 PDF 파일을 생성하는데 시간이 오래 걸리고, eps 파일만을 이미지로 사용할 수 있다는 한계가 있었다. 또 다른 방식인 latex+dvipdfmx 작업 흐름은 중간 단계로 .dvi 파일을 생성한 후 dvipdfmx를 이용해 PDF 파일을 만든다. 그러나 현재 가장 인기 있는 작업 흐름은 pdfLaTeX, XeLaTeX, LuaLaTeX를 활용한 방식으로, 이는 .tex 소스파일에서 바로 .pdf 파일을 생성할 수 있다는 장점이 있다.\n논문 외의 문서를 작성할 경우에는 한 단계 더 나아가 memoir 또는 oblivoir 클래스를 활용하는 것이 효율적이다. 이 방법은 이미 검증된 문서 템플릿을 기반으로 빠르게 PDF 문서를 생성할 수 있는 방법이다.\n\n\n한글지원 \\(\\LaTeX\\) 엔진과 작업흐름"
  },
  {
    "objectID": "whole_game.html",
    "href": "whole_game.html",
    "title": "15  디지털 글쓰기",
    "section": "",
    "text": "16 쿼토\nQuarto Guide 웹사이트에 과학기술을 위한 문서 저작에 대한 전체적인 사항이 조망되어 있다. 최근 과학기술 저작물은 다양한 출판형식과 더불어 문학적 프로그래밍(literate programming) 패러다임을 도입하고 가독성과 커뮤니케이션 강화를 위해 상호작용 인터랙티브한 기능도 내장되어 있다.\n최근 과학기술 저작물은 전통적인 출판 패러다임을 떠나 급격한 변화를 경험하고 있다. 이러한 변화의 중심에는 다양한 출판 형식의 출현과 함께 문학적 프로그래밍(literate programming)이라는 새로운 패러다임의 도입이 큰 역할을 하고 있다. 문학적 프로그래밍은 코드와 설명을 결합하여 보다 이해하기 쉽고 읽기 좋은 문서를 생성하는 방식을 의미한다. 이러한 변화의 배경에는 빅데이터, 데이터 과학, 인공지능으로 이어지는 과학기술 정보 전달과 공유를 보다 효율적으로 하기 위한 필요성이 크다. 또한, 인터랙티브 상호작용 기능은 다양한 문서 가독성과 커뮤니케이션 능력을 한층 강화했다. 인공지능 시대 R마크다운(R Markdown)이 10년 넘는 기간 동안 책(bookdown), 블로그(blogdown), 패키지 매뉴얼(pkgdown), PPT(xaringan), 대쉬보드(flexdashboard) 등 재현가능하고 추적가능한 과학기술 문서저작에 가능성을 보였고 이를 차세대 R마크다운이라는 별명을 갖고 있는 쿼토(Quarto)로 기존에 축적한 지식과 경험을 좋은 점은 계승하고 인공지능시대 새로운 패러다임을 적극 도입하여 새로운 과학기술 문서저작도구로 재탄생했다."
  },
  {
    "objectID": "whole_game.html#재현가능-글쓰기",
    "href": "whole_game.html#재현가능-글쓰기",
    "title": "15  디지털 글쓰기",
    "section": "16.1 재현가능 글쓰기",
    "text": "16.1 재현가능 글쓰기\n과학의 근본적인 원칙 중 하나는 연구의 결과가 독립적으로 재현가능해야 한다는 것이다. 이 원칙은 연구 타당성을 확인하고, 그 결과가 일반화 가능한지 검증하는 데 필수적이다. 그러나 2010년 전후, 다양한 학문 분야에서 재현할 수 없는 연구 결과가 다수 발표됨에 따라 과학 커뮤니티 내에서 큰 우려가 발생하였고, 이러한 현상을 재현성 위기(Reproducibity Crisis)라고 부르며, 과학연구 신뢰성을 크게 훼손시켰다.\n이 위기에 대응하여, 전 세계 연구자들과 전문가들은 재현가능한 연구 저작을 촉진하고 지원하기 위한 다양한 방안을 모색하기 시작했다. 연구방법론 표준화, 데이터 공유, 연구 소프트웨어 투명성 강화 등 다양한 활동이 들불처럼 일어났고, 기술 커뮤니티 형성과 더불어 다양한 도구와 플랫폼 개발을 통해 재현성 문제를 해결하고자 하는 움직임이 확산되고 있다.\n데이터 과학에서 재현성은 핵심적인 요소로 간주된다. 연구 결과의 신뢰성과 타당성을 검증하는 데 있어, 다른 연구자나 전문가들이 동일한 결과를 도출할 수 있도록 연구 과정을 투명하게 공유하는 것은 필수적이다. 이러한 맥락에서 R 팩키지는 재현가능한 데이터 분석 프로젝트를 지원하는 데 중요한 역할을 한다.\n\n\n\n그림 16.1: 재현가능한 과학기술 문서 제작과정\n\n\n특히, R 팩키지를 활용한 연구 개요서(research compendia)는 재현성을 강화하는 훌륭한 도구로 간주된다. 연구 개요서는 연구의 모든 요소(코드, 데이터, 출력 결과물, 환경 등)을 포괄적으로 담고 있어, 연구의 전체 과정을 투명하게 추적하고 검증할 수 있다. 한 사례로 그림 16.1 에 코드부터 단계별로 재현가능한 과학기술 문서 제작과정을 보여주고 있다."
  },
  {
    "objectID": "whole_game.html#디지털-글쓰기",
    "href": "whole_game.html#디지털-글쓰기",
    "title": "15  디지털 글쓰기",
    "section": "16.2 디지털 글쓰기",
    "text": "16.2 디지털 글쓰기\n글쓰기는 인류의 역사와 함께한 중요한 소통 도구로서, 그 방식과 형태는 시대별로 지속적으로 변화해왔다. 최근의 글쓰기 환경은 그 전보다 훨씬 복잡하고 다양한 요소를 요구한다. 과거에는 원고지에 텍스트를 작성하는 것만으로도 충분했다. 한글이나 영어로 이루어진 문장들은 감정을 전달하거나 사실을 나열하며, 이를 통해 독자와의 소통을 이루었다. 그러나 현대의 글쓰기 환경에서는 단순한 텍스트 정보 전달만으로는 부족하다. 이미지, 그래픽, 그리고 인터랙티브한 요소들이 텍스트와 함께 통합되어야 하며, 이를 통해 독자의 관심을 끌고 정보의 흡수를 증진시킨다.\n가독성 또한 중요한 고려사항이다. 디자인적인 측면에서 효과적인 글꼴 선택은 텍스트의 내용을 더욱 돋보이게 하며, 독자의 읽기 경험을 향상시킨다. 현대의 글쓰기는 단순한 정보 전달을 넘어서, 그 과정과 결과의 재현성에도 중점을 둔다. 특히 과학연구나 기술문서에서 두드러진다. 자동화 도구와 버전 관리 시스템의 도입을 통해 재현성을 지원하고, 글쓰기 효율성과 투명성을 동시에 높이고 있다.\n최근의 눈에 띄는 추세 중 하나는 인공지능 발전과 그에 따른 기계 저작물의 폭증을 들 수 있다. 기계가 작성한 텍스트를 포함한 콘텐츠가 인간 저자와 비슷하거나 오히려 생산 속도나 경제적인 면에서 확실한 우위를 보이면서 이에 대한 연구와 기술적 시도가 활발히 이루어지고 있다.\n\n\n\n현대의 글쓰기: 기술적 도전과 진화의 중심"
  },
  {
    "objectID": "whole_game.html#latex-philosophy",
    "href": "whole_game.html#latex-philosophy",
    "title": "15  디지털 글쓰기",
    "section": "16.3 \\(\\LaTeX\\) 철학",
    "text": "16.3 \\(\\LaTeX\\) 철학\n\\(\\LaTeX\\)은 한마디로 정의하게 되면 “논리적인 디자인”이라고 볼 수 있다. 저작물이 만들어지는 과정은 저작자가 원고를 손으로 쓰거나 타자기로 쳐서 출판사에 넘겨주면, 출판사의 편집디자이너는 원고를 보고 세부적인 출력형식을 결정하여 인쇄소에 넘긴다. 인쇄소는 이를 토대로 과거 식자공이 식자판을 만들었다면 현재는 컴퓨터가 파일을 만든다. \\(\\LaTeX\\) 과 \\(\\TeX\\) 이 하는 업무가 다소 차이가 난다. (김영록, 2017)\n\n\\(\\LaTeX\\) 은 편집디자이너에 해당되는 업무를 수행\n\\(\\TeX\\) 은 식자공에 해당되는 업무를 수행\n\n\n\n\n문서의 논리적 구조와 디자인\n\n\n컴퓨터를 활용하여 전자조판을 넘긴 이유는 문서를 좀 더 읽기 쉽게 만들어 독자에게 저작자의 생각을 잘 이해시키는 것이다. 이러한 목적을 달성하기 위해서는 문서의 디자인이 그 문서의 논리적 구조를 잘 반영시켜야 하고, 반대로 문서의 논리적 구조를 잘 반영시키기 위해서는 문서 디자이너가 문서의 논리적 구조를 잘 이해해야만 된다. \\(\\LaTeX\\)의 명령어는 기본적으로 문서의 논리적 구조를 기술하는 것이다. 이렇게 기술된 명령어를 \\(\\TeX\\)으로 전달하여 조판하게 되어 원하는 최종 결과물을 얻게 된다.\n\\(\\LaTeX\\)에서 채택하는 논리적 디자인의 가장 큰 장점은 글을 더 잘 쓰게 된다는 점에 있다. \\(\\LaTeX\\) 으로 글을 작성하게 되면 점점 \\(\\LaTeX\\)이 채택하고 있는 논리적 디자인에 맞추게 되고 이를 통해서 글쓰기 실력이 향상된다.\n아마도 \\(\\LaTeX\\)의 가장 큰 장점은 자동화에 있다. 시각적 디자인(Wysiwig)을 채택하여 작성한 문서를 다른 형식으로 변환하거나 문서의 수식의 일련번호를 로마자에서 아라비아 숫자로 모두 변경시키거나 표나 그래프 번호를 일괄번경하는 등 이러한 사례는 자주 발견된다. 특히, 국내외 저널에 제출할 논문을 \\(\\LaTeX\\) 으로 작성한 경우 템플릿만 바꾸면 쉽게 고품질 논문을 만들 수 있는데 워드를 이용하여 작성할 경우 수작업을 하게 되어 비생산적인 시간낭비도 크고 미려한 문서를 얻을 수도 없다.\n따라서, \\(\\LaTeX\\) 으로 글을 쓰게 되면 글쓰기 본질에 집중할 수 있어 저작자의 생각과 의견을 좀더 진솔하게 가감없이 독자에게 전달시킬 수 있게 된다."
  },
  {
    "objectID": "whole_game.html#wysiwyg",
    "href": "whole_game.html#wysiwyg",
    "title": "15  디지털 글쓰기",
    "section": "16.4 시각적 디자인",
    "text": "16.4 시각적 디자인\n문서를 논리적으로 디자인하는 반대 개념으로 있는 것이 위즈윅(WSYIWIG, What You See Is What You Get) 으로 대표적인 것이 아래한글, MS 워드와 같은 워드 프로세서다. 시각적 디자인을 하게 되면 논리적이지 못한 애매한 조판을 하기 쉽다. 또한, PDF 파일로도 출력을 할 때 미세하나마 출력물에 일관성이 실종되기도 한다."
  },
  {
    "objectID": "writing.html",
    "href": "writing.html",
    "title": "8  디지털 글쓰기",
    "section": "",
    "text": "9 쿼토\nQuarto Guide 웹사이트에 과학기술을 위한 문서 저작에 대한 전체적인 사항이 조망되어 있다. 최근 과학기술 저작물은 다양한 출판형식과 더불어 문학적 프로그래밍(literate programming) 패러다임을 도입하고 가독성과 커뮤니케이션 강화를 위해 상호작용 인터랙티브한 기능도 내장되어 있다.\n최근 과학기술 저작물은 전통적인 출판 패러다임을 떠나 급격한 변화를 경험하고 있다. 이러한 변화의 중심에는 다양한 출판 형식의 출현과 함께 문학적 프로그래밍(literate programming)이라는 새로운 패러다임의 도입이 큰 역할을 하고 있다. 문학적 프로그래밍은 코드와 설명을 결합하여 보다 이해하기 쉽고 읽기 좋은 문서를 생성하는 방식을 의미한다. 이러한 변화의 배경에는 빅데이터, 데이터 과학, 인공지능으로 이어지는 과학기술 정보 전달과 공유를 보다 효율적으로 하기 위한 필요성이 크다. 또한, 인터랙티브 상호작용 기능은 다양한 문서 가독성과 커뮤니케이션 능력을 한층 강화했다. 인공지능 시대 R마크다운(R Markdown)이 10년 넘는 기간 동안 책(bookdown), 블로그(blogdown), 패키지 매뉴얼(pkgdown), PPT(xaringan), 대쉬보드(flexdashboard) 등 재현가능하고 추적가능한 과학기술 문서저작에 가능성을 보였고 이를 차세대 R마크다운이라는 별명을 갖고 있는 쿼토(Quarto)로 기존에 축적한 지식과 경험을 좋은 점은 계승하고 인공지능시대 새로운 패러다임을 적극 도입하여 새로운 과학기술 문서저작도구로 재탄생했다."
  },
  {
    "objectID": "writing.html#글쓰기-비교",
    "href": "writing.html#글쓰기-비교",
    "title": "8  디지털 글쓰기",
    "section": "8.1 글쓰기 비교",
    "text": "8.1 글쓰기 비교\n디지털 글쓰기와 전통적인 글쓰기는 몇 가지 차이점이 있다. 디지털 글쓰기는 검색 엔진에 의해 쉽게 찾아질 수 있도록 설계되어 있으며, 다양한 미디어가 쉽게 통합될 수 있고, 디지털 글쓰기는 발행 후에도 언제든지 쉽게 조작할 수 있어 더 동적이고 생동감을 넣을 수도 있고, 깃(Git)과 같은 버전제어 도구와 연결시켜 글쓰기를 하게 되면 추적도 가능하여 재현가능한 글쓰기가 가능하게 된다. 디지털 글쓰기의 가장 큰 장점 중의 하나는 사람만이 저작을 하는 것이 아니라 기계가 저작한 프로그램도 글쓰기에 담을 수 있어 더욱 풍성한 글쓰기가 가능하다는 점이다.\n반면 전통적인 글쓰기는 발행 후 개발이 중단될 뿐만 아니라 한정된 지면(예를 들어 A4, B5)에 다양한 색상을 넣어 강조와 가독성을 높일 수 있으나 인쇄 난이도의 증가로 인해 비용도 급격히 증가하게 되고 무엇보다 정적인 정보만 담을 수 있어 최신 기술 흐름을 반영하는데 한계가 있다.\n또한 커뮤니케이션 관점에서 보면 디지털 글쓰기는 온라인 도구를 사용하여 작성 과정의 초기부터 광범위한 청중과 거의 실시간으로 텍스트를 공유할 수 있어 작성 과정이 공개적이고 다수다 저작과정에 별다른 장벽없이 참여할 수 있다는 점에서 전통적인 글쓰기가 소수의 저자가 집필을 마무리해야 후속 디자인 작업을 비롯한 후속 출판작업이 진행된다는 면에서 큰 차이가 있다. 특히 전통 글쓰기 결과물이 책과 같은 물리적 매체에 담기게 되면 이를 다시 디지털로 되돌리기 위해 광학문자인식(OCR) 과정을 거쳐야 하며 책속에 담긴 그래프, 표, 이미지 등 데이터는 별도 과정을 거쳐 디지털화 해야하는 한계도 명확하다."
  },
  {
    "objectID": "writing.html#쿼토",
    "href": "writing.html#쿼토",
    "title": "8  디지털 글쓰기",
    "section": "8.2 쿼토",
    "text": "8.2 쿼토\nQuarto Guide 웹사이트에 과학기술을 위한 문서 저작에 대한 전체적인 사항이 조망되어 있다. 최근 과학기술 저작물은 다양한 출판형식과 더불어 문학적 프로그래밍(literate programming) 패러다임을 도입하고 가독성과 커뮤니케이션 강화를 위해 상호작용 인터랙티브한 기능도 내장되어 있다.\n최근 과학기술 저작물은 전통적인 출판 패러다임을 떠나 급격한 변화를 경험하고 있다. 이러한 변화의 중심에는 다양한 출판 형식의 출현과 함께 문학적 프로그래밍(literate programming)이라는 새로운 패러다임의 도입이 큰 역할을 하고 있다. 문학적 프로그래밍은 코드와 설명을 결합하여 보다 이해하기 쉽고 읽기 좋은 문서를 생성하는 방식을 의미한다. 이러한 변화의 배경에는 빅데이터, 데이터 과학, 인공지능으로 이어지는 과학기술 정보 전달과 공유를 보다 효율적으로 하기 위한 필요성이 크다. 또한, 인터랙티브 상호작용 기능은 다양한 문서 가독성과 커뮤니케이션 능력을 한층 강화했다. 인공지능 시대 R마크다운(R Markdown)이 10년 넘는 기간 동안 책(bookdown), 블로그(blogdown), 패키지 매뉴얼(pkgdown), PPT(xaringan), 대쉬보드(flexdashboard) 등 재현가능하고 추적가능한 과학기술 문서저작에 가능성을 보였고 이를 차세대 R마크다운이라는 별명을 갖고 있는 쿼토(Quarto)로 기존에 축적한 지식과 경험을 좋은 점은 계승하고 인공지능시대 새로운 패러다임을 적극 도입하여 새로운 과학기술 문서저작도구로 재탄생했다.\n\n\n\n쿼토 개요\n\n\n\n8.2.1 위지윅 vs 위지윔\n신속하고 빠르게 누구나 짧은 학습을 통해서 문서를 저작하고 출판할 수 있는 방식은 아래한글 혹은 MS워드 워드프로세서를 사용하는데 이는 위지위그(WYSIWYG: What You See Is What You Get, “보는 대로 얻는다”)에 기초한 것으로 문서 편집 과정에서 화면에 포맷된 낱말, 문장이 출력물과 동일하게 나오는 방식을 말한다. 위지윅의 대척점에 있는 것이 위지윔(WYSIWYM, What You See Is What You Mean)으로 대표적인 것인 \\(\\LaTeX\\) 으로 구조화된 방식으로 문서를 작성하면 컴파일을 통해서 최종 문서가 미려한 출판가능한 PDF, PS, DVI 등 확장자를 갖는 출판결과물을 얻을 수 있다.\n\n\n\n\n\n\n블로그 저작 소프트웨어\n개인용 컴퓨터가 보급되면서 아래한글과 같은 워드 프로세서를 사용해서 저작을 하는 것이 일반화되었지만 곧이어 인터넷이 보급되면서 웹에 문서를 저작하는 것이 이제는 더욱 중요하게 되었다. 전문 개발자가 아닌 일반인이 HTML, CSS, JavaScript를 학습하여 웹에 문서를 제작하고 출판하는 것은 난이도가 있다보니 워드프레스와 티스토리 같은 위지위그 패러다임을 채택한 저작도구가 사용되고 있으나 상대적으로 HTML, CSS, JavaScript을 조합한 방식과 비교하여 고급스러운 면과 함께 정교함에 있어 아쉬움이 있는 것도 사실이다.\n\n\n워드프레스와 티스토리\n\n\n\n\n\n\n\nHTML + CSS + 자바스크립트"
  },
  {
    "objectID": "quarto.html#single-sourcing-출판저작",
    "href": "quarto.html#single-sourcing-출판저작",
    "title": "5  쿼토(Quarto)",
    "section": "5.1 Single Sourcing 출판저작",
    "text": "5.1 Single Sourcing 출판저작\n데이터 사이언스 출판저작에 다소 차이는 있지만 출판에 대한 대체적인 방식은 유사할 것으로 보인다. 즉, Single Sourcing 을 콘텐츠 저작, 디자인, 최종 출판물 관리까지 일원화되어 자동화되어 체계적으로 관리된다면 중복되는 낭비는 물론 재현가능성도 높여 과학기술 출판저작물로 가장 이상적으로 간주되고 있다.\n\n5.1.1 문제점\n\n\n\n그림 5.1: 문제점\n\n\n\n\n5.1.2 개념\n\n\n\n그림 5.2: Single Sourcing 개념\n\n\n\n\n5.1.3 Single Sourcing Multi-Use\n\n\n\n그림 5.3: Single Sourcing Multi-Use"
  },
  {
    "objectID": "quarto.html#쿼토-해부",
    "href": "quarto.html#쿼토-해부",
    "title": "5  쿼토(Quarto)",
    "section": "5.3 쿼토 해부",
    "text": "5.3 쿼토 해부\n쿼토는 데이터 과학 문서 작성 패러다임을 바꾼 R마크다운의 후속작으로 볼 수 있다. 쿼토는 10년 이상의 knitr 경험을 바탕으로 개발되었으며, 최근에는 위지윅(What You See Is What You Get) 패러다임도 RStudio Visual 편집에 도입하여 복잡한 코드 작성 없이 직관적으로 문서를 작성할 수 있다. R 사용자는 RStudio IDE, 파이썬 등 개발 경험이 풍부하신 분들은 파이참, VS코드, 이맥스/VIM 등 통합개발환경(IDE)을 쿼토 CLI를 통해 출판물을 쉽게 저작할 수 있다.\n쿼토는 다양한 프로그래밍 언어를 통해 계산(Computation) 기능을 문서에 담을 수 있도록 지원한다. R, 파이썬, SQL, 자바스크립트 등 다양한 프로그래밍 언어로 문서 내에 그래프, 표, 인터랙티브 결과물을 쉽게 삽입할 수 있다. 이러한 장점들이 모여 문서를 제작하고 유통하고 소비하는 데이터 과학자, 개발자, 과학기술 연구원, 사무노동자 분들의 시간을 줄여주고 업무 생산성을 크게 높여주는 도구로 자리매김하고 있다.\n\n\n\n쿼토 작업흐름\n\n\n쿼토 저작은 메타데이터(전문, front matter), 텍스트, 코드라는 세 가지 주요 구성요소로 이뤄진다.\n\n메타데이터 (YAML): YAML은 “YAML Ain’t Markup Language”의 약자로, 데이터를 구조화하기 위한 언어로, 쿼토에서 문서에서 전문(Front Matter)을 구성하는 문서 제목, 작성자, 날짜, 문서 형식 등을 정의한다. 메타데이터는 보통 문서 상단에 위치하며, 문서의 전반적인 설정과 구성을 담당한다.\n텍스트 (마크다운): 마크다운도 언어로, 2004년 아론 스워츠와 존 그루버가 주도하여 탄생했다. HTML 같은 복잡한 마크업 언어 대신, 간단한 형식의 문서를 빠르고 효율적으로 작성할 수 있는 도구로 복잡한 디자인보다는 내용의 구조와 의미에 중점을 두기 때문에 문서 작성자는 외양보다 내용에 더 집중할 수 있다는 장점이 있다.\n코드 (knitr, jupyter): knitr는 R 코드를 문서에 통합을 가능케하고, jupyter는 파이썬 사용자에게 인기있는 패키지다. 쿼토에서 knitr, jupyter에서 작성된 코드를 문서에 포함시킬 수 있어 데이터 분석 통계값, 그래프, 다이어그램, 지도 등 다양한 결과물을 문서에 삽입할 수 있다.\n\n\n\n\nQuarto 문서 구성요소\n\n\n\n5.3.1 YAML\nYAML(발음은 야믈)은 쿼토파일 메타데이터로 문서 본문보다 먼저 제시되는 전문(front matter)으로 문서를 구조화하기 R 마크다운, 쿼토에서 도입된 경량언어로 쿼토에서는 문서 제목, 작성자, 날짜, 문서 형식, 레이아웃 등을 정의한다. 보통 키값(key-value) 쌍을 이루는데, 키는 콜론(:)으로 값과 구분한다.\n\n\n\n\n키값 쌍\n---\nkey: value\n---\n\n\n\n\n\n문서출력형식 PDF 지정\n---\nformat: pdf\n---\n\n\n\nYAML로 문서 전문을 작성하게 되면 가독성이 뛰어나 읽고 이해하기 쉽다. 복잡한 문서 구조나 설정을 지정할 때 특히 유용하다. 중첩된 선택옵션과 같은 복잡한 문서구조도 들여쓰기(indent)를 통해 명확히 표현된다. 재사용성도 뛰어나 같은 설정 값을 여러 곳에서 사용해야 할 경우, YAML 파일 하나를 수정하면 모든 곳에 적용될 수 있어 시간과 노력을 절약해준다. 또한, 텍스트 기반이라 Git과 같은 버전 제어 시스템과 잘 통합되어 여러 저자가 공동 작업 진가를 발휘한다. 하지만, 들여쓰기에 민감하여 실수로 공백을 잘못 넣었을 경우 오류가 발생할 수 있으므로 주의가 요구된다.\nYAML은 단순히 KEY: Value 에 불과한데 사례를 통해 YAML의 편리성과 유용함을 살펴보자.\n\n\n\nCLI PDF 지정\n$ quarto render document.qmd --to pdf\n\n\n\n\n\nYAML 문서형식 PDF\n---\nformat: pdf\n---\n\n\n\n다음 예시에서 quarto render 명령을 사용하여 document.qmd 파일을 HTML 형식 문서로 제작하는데 CLI에서 옵션에서 -M code fold:true을 통해 코드 섹션을 접을 수 있는 형태로 제작함을 나타내고 있다.\n동일한 의도를 YAML 설정으로 바꾸면, 설정 파일에 format 섹션을 만들고 그 안에 html을 정의하고 나서, html 포맷에 목차 생성(toc: true)과 코드 접기 기능(code-fold: true)을 추가로 설정했다.\n동일한 의도를 CLI에 넣는 것보다 YAML 파일에 담게되면 훨씬 깔끔하고 우아하다. 많은 선택옵션들이 명령어로 직접 들어가면 명령어가 길어져 가독성이 떨어지고, 나중에 어떤 옵션을 사용했는지 파악하기도 어렵다. 반면 YAML 파일이 도입되면, 설정을 한 곳에서 명확하게 관리할 수 있어 유지보수도 편리하고, 공동 저작자들과 쉽게 공유되기 때문에 협업에도 유리하다.\n\n\n\nCLI 코드접기\n$ quarto render document.qmd --to html -M code fold:true\n\n\n\n\n\nYAML 코드접기\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\n\n\n문서저작 통합개발환경(IDE) RStudio나 VSCode 에서 제공하는 탭-자동완성(Tab Completion) 기능은 YAML 전문코드를 작성할 때 큰 도움이 된다. 첫 글자나 몇몇 글자를 타이핑한 후에 탭 키를 누르면, IDE가 가능한 모든 명령어나 변수, 함수 이름 등을 보여주기 때문에 저작자는 오타를 줄이고 빠르게 문서를 저작할 수 있다. RStudio에서 Ctrl + space 단축키를 사용하면, YAML 전문코드를 작성할 때 키값을 선택할 수 있는 목록을 보여준다.\n\n\n\n\n\n\nYAML 키 설정\n\n\n\n \n\n\n\n\n탭 자동완성 선택확정\n\n\n\n그림 5.4: RStudio YAML 자동완성\n\n\n\n5.3.2 마크다운\n\n\n5.3.3 프로그래밍 언어"
  },
  {
    "objectID": "quarto.html#r-마크다운과-비교",
    "href": "quarto.html#r-마크다운과-비교",
    "title": "5  쿼토(Quarto)",
    "section": "5.4 R 마크다운과 비교",
    "text": "5.4 R 마크다운과 비교\nFAQ for R Markdown Users\n쿼토는 “차세대 R 마크다운”이라는 별명답게 R 마크다운 생태계의 다양한 패키지와 기능을 지원한다. 쿼토가 시작이 R 마크다운보다 길지 않아 아직 R 마크다운 생태계의 모든 기능을 지원하지는 않지만, 점차 지원 범위를 넓혀나가고 있으며 고유한 기능도 추가로 제공하기 시작했다.\n\n\n\n기능\nR 마크다운\n쿼토(Quarto)\n\n\n\n\n파일형식\n\nhtml_document\npdf_document\nword_document\n\n\nhtml\npdf\ndocx\n\n\n\n비머(Beamer)\n\nbeamer_presentation\n\n\nbeamer\n\n\n\n파워포인트(PPT)\n\npowerpoint_presentation\n\n\npptx\n\n\n\n웹 슬라이드\n\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n\nAdvanced Layout\n\ntufte\ndistill\n\n\nQuarto Article Layout\n\n\n\nCross References\n\nhtml_document2\npdf_document2\nword_document2\n\n\nQuarto Crossrefs\n\n\n\nWebsites & Blogs\n\nblogdown\ndistill\n\nQuarto Websites\nQuarto Blogs\n\n\nBooks\nbookdown\nQuarto Books\n\n\nInteractivity\nShiny Documents\nQuarto Interactive Documents\n\n\nPaged HTML\npagedown\n출시 예정\n\n\nJournal Articles\nrticles\nQuarto Journal Articles\n\n\nDashboards\nflexdashboard |\n출시 예정\n\n\nInteractive Tutorials\nlearnr\n계획 없음\n\n\n\n\n\n\n\nHyde, A. (2021, 8월 16). Single Source Publishing - A investigation of what Single Source Publishing is and how this ’holy grail’ can be achieved. https://coko.foundation/articles/single-source-publishing.html"
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "서문",
    "section": "",
    "text": "끊임없이 진화하는 인간 커뮤니케이션 환경에서 디지털 시대의 도래는 표현과 연결의 새로운 차원을 가져왔습니다. 디지털 불평등 격차해소를 추구하고 디지털 영역의 무한한 잠재력을 포용하는 작가로서, “디지털 글쓰기”를 여러분께 소개합니다. 이 책은 창의성, 기술, 인간 정신이 융합된 공간인 디지털 글쓰기의 광활하고 길들여지지 않은 경계를 탐험하고자 하는 사람들을 위한 안내서이자 동반자 역할을 합니다.\n새 시대에 등장한 다양한 플랫폼, 형식, 도구를 살펴보면서 온라인 글쓰기의 세계가 제시하는 독특한 기회와 도전 과제에 대해 자세히 살펴볼 것입니다. 이 책은 단순한 기술 매뉴얼이 아니라 말과 아이디어의 힘, 그리고 디지털 광야에 과감히 도전하는 사람들을 기다리는 무한한 가능성에 대한 찬사입니다.\n디지털 시대 글쓰기 진화를 살펴보고, 스토리를 만들고, 공유하고, 소비하는 방식에 대한 기술의 혁신적인 영향을 추적하는 것으로 여정을 시작할 것입니다. 재현가능한 과학기술 문서작성과 대량생산부터 인터랙티브 서사와 멀티미디어 경험에 이르기까지 새로운 형태의 디지털 스토리텔링의 출현에 대해 논의할 것입니다.\n온라인 글쓰기의 세계를 더 깊이 파고들면서 자신만의 목소리와 스타일을 개발하고, 전통적인 글쓰기 기법을 디지털 플랫폼의 고유한 요구에 맞게 조정하며, 소셜 미디어의 힘을 활용하여 독자와 소통하고 작품을 중심으로 커뮤니티를 구축하는 것의 중요성에 대해서도 살펴볼 것입니다.\n익명성은 여전히 개인적인 선택이지만, 디지털 영역에서 익명성이 가져다주는 기회와 도전을 인식하는 것은 필수적입니다. 개인정보 보호와 공개성 사이의 미묘한 균형, 그리고 온라인에서 콘텐츠를 제작하고 공유할 때 고려해야 할 윤리적 고려 사항과 책임에 대해 논의할 것입니다.\n디지털 글쓰기의 세계를 탐색하는 데 필요한 지식과 도구뿐만 아니라 나만의 목소리를 세상과 공유할 수 있는 영감과 용기를 얻으시기 바랍니다. 광활한 사이버 공간에 여러분의 글이 울려 퍼져 경계를 넘어 전 세계 독자들의 마음을 움직일 수 있도록 모험을 떠나보세요.\n디지털 오디세이에 오신 것을 환영합니다. 모험을 시작하세요."
  },
  {
    "objectID": "dw_pdf.html#latex-philosophy",
    "href": "dw_pdf.html#latex-philosophy",
    "title": "\n17  한글 PDF\n",
    "section": "\n17.1 \\(\\LaTeX\\) 철학",
    "text": "17.1 \\(\\LaTeX\\) 철학\n\\(\\LaTeX\\)을 간단히 정의하자면 “논리적인 디자인”이라고 할 수 있다. 작품이 생성되는 과정에서는 작가가 원고를 수기로 작성하거나 타자기로 입력한 뒤 이를 출판사에 제출한다. 그 후, 출판사의 편집 디자이너는 원고를 검토하여 세부적인 출력 형식을 결정하고 이를 인쇄소에 전달한다. 인쇄소에서는 이 정보를 바탕으로 과거에는 식자공이 식자판을 제작했으나, 현재는 컴퓨터가 파일을 생성한다. 그림 17.1 에 문서 디자인과 문서 논리 구조에 대해 이해를 위해 도식화했다.\n미국 스탠포트 대학 크누스(Donald Knuth) 교수가 1978년에 만든 문서조판 프로그램을 \\(TeX\\)(“텍”이라고 읽음)이라고 하고, Leslie Lamport 교수가 만든 TeX 매크로 팩키지를 \\(\\LaTeX\\)(“레이텍”이라고 읽음)이라고 한다. \\(\\TeX\\)과 \\(\\LaTeX\\)의 탄생 역사를 살펴보면 문서 논리 구조와 디자인 분리가 갖는 문서 저작 장점을 잘 나타내고 있다. 저수준(low-level) 언어로, 사용자가 페이지 레이아웃이나 글꼴 설정 등을 직접 제어할 수 있지만, 복잡한 포맷을 만들기 위해 사용자가 직접 매크로를 작성해야 한다는 점에서 일반 저작자가 사용하기에는 한계도 분명히 존재했다.\n\\(\\LaTeX\\)은 1980년대에 레슬리 램포트(Leslie Lamport)에 의해 개발되었고, \\(\\TeX\\)을 기반으로 개발된다. \\(\\TeX\\) 복잡성을 단순화하여 더 사용자 친화적인 인터페이스를 제공한다. 따라서, 문서 구조와 내용에 더 집중할 수 있도록 고수준(high-level) 언어를 제공하며, 다양한 템플릿과 패키지가 제공되어 사용자가 쉽게 복잡한 레이아웃과 기능을 구현할 수 있다. \\(\\LaTeX\\) 문서는 내부적으로 \\(\\TeX\\) 엔진을 사용하여 조판된다. (김영록, 2017)\n\n\n\\(\\LaTeX\\): 편집 디자이너의 역할에 해당하는 작업을 수행\n\n\\(\\TeX\\): 식자공의 역할에 해당하는 작업을 수행\n\n\n\n그림 17.1: 문서 디자인과 문서 논리 구조\n\n\\(\\LaTeX\\)에서 적용하는 논리적 디자인의 가장 큰 이점은 글쓰기 능력의 향상에 있다. \\(\\LaTeX\\)으로 글을 작성하면서 점차 \\(\\LaTeX\\)의 논리적 디자인 철학에 맞춰가게 되며, 이를 통해 글쓰기 실력이 개선된다.\n컴퓨터를 이용한 전자조판의 주된 목적은 문서를 읽기 쉽게 구성하여 저자의 의도를 독자에게 명확하게 전달하는 것이다. 이를 위해선 문서의 디자인이 그 내용의 논리적 구조를 잘 반영해야 하며, 이를 달성하기 위해서는 디자이너가 문서의 논리적 구조를 충분히 이해해야 한다. \\(\\LaTeX\\) 명령어 체계는 기본적으로 이러한 문서의 논리적 구조를 명시하는 데 중점을 둔다. 이렇게 설정된 명령어는 \\(\\TeX\\) 엔진을 통해 조판되어 최종적으로 원하는 결과물을 생성한다.\n\\(\\LaTeX\\)의 가장 큰 장점 중 하나는 확실히 자동화 기능이다. 수식, 참고문헌, 표, 그래프의 번호를 자동으로 관리해주며, 복잡한 문서 구조도 쉽게 다룰 수 있다. 특히, 국내외 학술지에 논문을 제출할 때에는 템플릿만 변경하면 고품질의 논문을 쉽게 생성할 수 있다. 반면, 워드 프로세서를 사용할 경우 이러한 작업은 수동으로 해야 하며, 이로 인해 시간을 낭비하게 되고 결과물이 덜 정교하게 나올 수 있다. 결과적으로, \\(\\LaTeX\\)을 사용하면 글쓰기 본질에 더 집중할 수 있으며, 이를 통해 저자의 생각과 의견을 더욱 솔직하고 명확하게 독자에게 전달할 수 있다."
  },
  {
    "objectID": "about_book.html",
    "href": "about_book.html",
    "title": "\n24  책과 편집 용어\n",
    "section": "",
    "text": "25 책의 내부 순서 및 명칭\n책의 내부 순서 및 명칭을 살펴보면 다음과 같다.\ncontent_144_tbl &lt;- table_cells %&gt;% \n  filter(doc_index == 144) %&gt;% \n  select(text, row_id, cell_id) %&gt;% \n  pivot_wider(names_from = cell_id, values_from = text) %&gt;% \n  select(-row_id) \n\ncontent_147_tbl &lt;- table_cells %&gt;% \n  filter(doc_index == 147) %&gt;% \n  select(text, row_id, cell_id) %&gt;%  \n  pivot_wider(names_from = cell_id, values_from = text) %&gt;% \n  select(-row_id) \n\ncontent_tbl &lt;- bind_rows(content_144_tbl, content_147_tbl)\n\ncontent_tbl &lt;- content_tbl %&gt;% \n  set_names(cover_tbl %&gt;% slice(1)) %&gt;% \n  filter(row_number() != 1) %&gt;% \n  select(1,2,4,3) \n\ncontent_tbl |&gt; \n  gt() |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n순\n      용 어\n      대응 영어\n      용어 정의\n    \n\n\n1\n반표제지\nhalf-title page\n책의제호만(편저자,출판사등넣지않음) 속표지 앞에 본문지로 인쇄하여 넣음.\n\n\n2\n머리그림\nfrontispiece\n책의 앞머리 반표제 다음에 본문과 관계된 사진이나 그림 등을 속표지와 마주 보게 인쇄하며, 뒤쪽을 백지로 비우는 것이 원칙.\n\n\n3\n속표지\nfull title page\n책의 본문 바로 앞, 면지·반표제지 다음에 넣는 표지로 앞표지와 동일하게 표제, 편저자, 출판사 등을 표시함.\n\n\n4\n판권지\nimprint page/copyright page\n표제, 편저자, 발행자, 발행사, 발행 연월일 등 출판 사항을 넣는 면. 한국이나 일본, 중국 등에서는 권말에 넣고 있으나 최근 서구의 책처럼 속표지 뒤에다 인쇄하는 경향임.\n\n\n5\n바치는 글\ndedication\n저자가 스승이나 선배, 친지에게 자신의 저서를 헌정하는 글.\n\n\n6\n고침표\nerrata/corrigenda\n인쇄가 끝난 뒤에 발견된 오자나 오식을 모은 정정 일람표로 별도로 인쇄, 제본된 책 속에 끼움.\n\n\n7\n머리말\npreface\n책의 편저자 자신이 책의 앞 부분에 스스로 써 넣은 글로 일명 ‘서문’이라고도 일컬음.\n\n\n8\n추천사\nforeword\n저자의 스승이나 선배 등이 책의 내용을 평가하며 일독을 권하는 글로 머리글 다음에 배열.\n\n\n9\n감사글\nacknowledgement\n저자가 책의 저술 중 도움을 받은 사람이나 기관 등에 감사의 마음을 표시한 글.\n\n\n10\n일러두기\nexplanatory notes\n책 내용 구성과 편집에 활용된 약호나 부호 등의 해설. 일명 ‘범례’라고도 하며, 사전이나 지도 등의 책은 필수 사항.\n\n\n11\n차례\nContents\n책이나 잡지 등에서, 내용의 대소 단원의 제목을 뽑아서 해당 페이지를 표시한 일람표로서 도서의 경우는 편, 부, 절, 항 등의 제목과 수록 페이지를 밝혀 순차적으로 편집하되, 일반 도서는 머리말 다음에, 잡지의 경우는 표지나 본문 맨 앞쪽에 배열.\n\n\n12\n그림 차례\nillustrations\n책의 본문 내용을 보충 설명하기 위해 삽입해 놓은 그림·삽화의 차례.\n\n\n13\n약어표\nabbreviations\n단어를 축약한 약어들을 가나다 순이나 알파벳 순으로 정리·요약한 표.\n\n\n14\n중간 표제지\ndivisional title page\n본문 가운데 ‘부(部)·편(篇)·장(章)의 제목’ 만의 하나의 페이지로 편집한 쪽. 통상 홀수 면으로 시작하며, 법전 등의 책에 따라 본문 인쇄 용지와 다른 색지 등을 이용하기도 함.\n\n\n15\n본문\ntext\n도서, 잡지, 신문이나 문서 가운데 주체가 되는 문장 내용의 총칭.\n\n\n16\n주\nnotes\n책의 맨 끝이나 해당 페이지 하단 또는 판면 좌우 여백에 등에 넣는 내용의 보충 설명문. 본문에 인용된 자료의 서명과 지면 등을 명확히 밝혀 순번대로 게재.\n\n\n17\n후기\nafterword/ postscript\n책의 끝 쪽에 저작자의 집필 의도나 출판 경위 등을 밝혀 쓴 글로 일명 ‘후서’,‘발문’,‘발(跋)’으로도 표현.\n\n\n18\n부록\nappendix/ supplement\n본문과 관련 있는 보충 내용을 묶어 권말에 따로 넣은 부분. 용어풀이, 참고문헌, 찾아보기 등의 후첨. 일반 잡지 등의 간행물은 별도로 인쇄하여 펴내기도 함.\n\n\n19\n용어풀이\nglossary\n책 내용과 관련된 특수 용어나 전문 용어를 따로 모아 놓은 간단한 해설. 책의 권말 부록에 넣음.\n\n\n20\n참고문헌\nbibliography\n책의 본문에 참고·인용한 책이나 논문, 잡지 등의 문헌을 각 장 끝이나 권말에 붙여 넣음.\n\n\n21\n찾아보기\nindex\n본문 내용 중에 등장하는 인명이나 지명, 용어 등을 쉽게 찾아볼 수 있도록 가나다 순, 알파벳 순으로 배열하여 해당 페이지와 함께 권말에 편집해 놓은 목록으로 일명‘색인’이라고도 함."
  },
  {
    "objectID": "about_book.html#book-outer-extract",
    "href": "about_book.html#book-outer-extract",
    "title": "\n24  책과 편집 용어\n",
    "section": "\n24.1 PDF 에서 표 추출",
    "text": "24.1 PDF 에서 표 추출\nPDF에서 바로 표를 추출할 경우 기계판독 가능한 표이기는 하지만 형태가 뭉개져서 제대로 사용할 수 없다.\n이런 문제를 PDF 파일으로 워드로 변환시킨 후에 워드에서 표를 추출하는 방식을 동원한다. 자세한 사항은 워드 파일에서 표(table) 추출 하는 방식을 참고한다.\nPDF를 워드파일로 변경한 후에 officer 팩키지의 도움으로 테이블을 추출한다. 그리고 나서, 표를 추출한다.\n\nlibrary(tidyverse)\nlibrary(officer)\nlibrary(reactable)\n\nbook_docx &lt;- officer::read_docx(\"data/KSX0003_20091228.docx\")\nbook_content &lt;- docx_summary(book_docx) %&gt;% as_tibble()\n\n# book_content\n\ntable_cells &lt;- book_content %&gt;% \n  filter(content_type %in% \"table cell\") %&gt;% \n  as_tibble()\n\ncover_tbl &lt;- table_cells %&gt;% \n  filter(doc_index == 89) %&gt;% \n  select(text, row_id, cell_id) %&gt;% \n  pivot_wider(names_from = cell_id, values_from = text) %&gt;% \n  select(-row_id) \n\ncover_first_tbl &lt;- cover_tbl %&gt;% \n  set_names(cover_tbl %&gt;% slice(1)) %&gt;% \n  filter(row_number() != 1) %&gt;% \n  select(1,2,4,3)"
  },
  {
    "objectID": "about_book.html#book-outer-I",
    "href": "about_book.html#book-outer-I",
    "title": "\n24  책과 편집 용어\n",
    "section": "\n24.2 책 외부 (I) 명칭",
    "text": "24.2 책 외부 (I) 명칭\n책 외부(I) 명칭을 살펴보면 다음과 같다.\n\nlibrary(gt)\n\ncover_first_tbl |&gt; \n  gt() |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n순\n      용 어\n      대응 영어\n      용어 정의\n    \n\n\n1\n앞표지\nfront cover\n책의 맨 겉장. 속장을 보호하기 위해 책 바깥쪽 앞뒤에 붙여 놓은 것으로, 본문보다 두꺼운 용지를 쓰며, 뒤의 표지는 뒤표지.\n\n\n2\n표제\ntitle\n책의 본문 전체 내용을 압축, 상징적으로 앞표지 등에 표시한 제목.\n\n\n3\n책섶\ngusset\n책의 등쪽 제본 재료를 앞표지까지 연결하여 표지를 단단하게 받쳐주도록 한 부분.\n\n\n4\n모서리\ncorner\n앞표지의 상하 귀퉁이. 양장본에서는 천이나 가죽을 표지 양 끝 모서리에 삼각형으로 붙여 표지를 보호하는 기능을 함.\n\n\n5\n표지턱\nsquare\n책 본문 속장과 표지 앞마구리 및 위·아래쪽에 튀어나온 난간 부분으로 양장본에만 존재.\n\n\n6\n책꼬리\ntail edge\n제본된 책의 맨 아래 밑쪽의 마구리 부분.\n\n\n7\n도랑\ngroove\n양장본의 두꺼운 앞∙뒤 표지와 책등의 경계에 도랑 모양의 골을 만들어 표지를 잘 여닫도록 한 홈.\n\n\n8\n머리챙\nawning/visor\n양장본의 책등쪽 위와 아래의 튀어나온 부분. 책의 머리띠를 보호하는 챙과 같은 기능을 함.\n\n\n9\n등글자\nback title\n책등이나덧표지,케이스의등쪽에넣는문자. 표제, 저자, 출판사 등의 표시.\n\n\n10\n등턱\njoint\n양장 제본에서, 책 표지의 도랑과 책등 모서리의 튀어나온 부분으로 일명 ‘책귀’라고도 함.\n\n\n11\n책등\nspine/back\n책 앞쪽 마구리의 반대 뒤쪽 부분. 양장본에서는 둥글거나 편편하게 마름하며, 표제·저자·출판사 등을 표시함.\n\n\n12\n책목\nbook neck\n책의 본문 속장과 등쪽 위·아래 양 끝의 접속 부위.\n\n\n13\n갈피끈\nbook-mark/ tassel/ ribbon/spin\n책장 속에 끼워 넣은 가는 끈으로 읽던 곳이나 필요한 지면을 다시 찾을 때 이용됨.\n\n\n\n\n\n\n워드 파일에서 이미지를 추출하는 방식은 워드 파일 압축을 풀면된다. 그렇게 하기 위해서 KSX0003_20091228.docx 파일명을 KSX0003_20091228.zip으로 바꾼 후에 압축을 풀어준다. 그러면 word/media 디렉토리에 이미지가 저장된다."
  },
  {
    "objectID": "about_book.html#book-outer-II",
    "href": "about_book.html#book-outer-II",
    "title": "\n24  책과 편집 용어\n",
    "section": "\n24.3 책 외부 (II) 명칭",
    "text": "24.3 책 외부 (II) 명칭\n책 외부 명칭(II)을 살펴보면 다음과 같다.\n\ncover_ii_tbl &lt;- table_cells %&gt;% \n  filter(doc_index == 116) %&gt;% \n  select(text, row_id, cell_id) %&gt;% \n  pivot_wider(names_from = cell_id, values_from = text) %&gt;% \n  select(-row_id) \n\ncover_second_tbl &lt;- cover_ii_tbl %&gt;% \n  set_names(cover_tbl %&gt;% slice(1)) %&gt;% \n  filter(row_number() != 1) %&gt;% \n  select(1,2,4,3) \n\ncover_second_tbl %&gt;% \n  reactable::reactable(\n    defaultColDef = colDef(\n    header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n    cell = function(value) format(value, nsmall = 1),\n    align = \"center\",\n    minWidth = 70,\n    headerStyle = list(background = \"#f7f7f8\")\n    ),\n    columns = list(\n    순 = colDef(minWidth = 40),   # 50% width, 200px minimum\n    `용 어` = colDef(minWidth = 100),   # 25% width, 100px minimum\n    `대응 영어` = colDef(minWidth = 150),   # 25% width, 100px minimum    \n    `용어 정의` = colDef(minWidth = 500)  # 25% width, 100px minimum\n    ),\n    bordered = TRUE,\n    highlight = TRUE,\n    filterable = TRUE\n  )\n\n\n\n\n\n워드 파일에서 이미지를 추출하는 방식은 워드 파일 압축을 풀면된다. 그렇게 하기 위해서 KSX0003_20091228.docx 파일명을 KSX0003_20091228.zip으로 바꾼 후에 압축을 풀어준다. 그러면 word/media 디렉토리에 이미지가 저장된다."
  },
  {
    "objectID": "latex_pdf.html#latex-philosophy",
    "href": "latex_pdf.html#latex-philosophy",
    "title": "5  한글 PDF",
    "section": "5.1 \\(\\LaTeX\\) 철학",
    "text": "5.1 \\(\\LaTeX\\) 철학\n\\(\\LaTeX\\)을 간단히 정의하자면 “논리적인 디자인”이라고 할 수 있다. 작품이 생성되는 과정에서는 작가가 원고를 수기로 작성하거나 타자기로 입력한 뒤 이를 출판사에 제출한다. 그 후, 출판사의 편집 디자이너는 원고를 검토하여 세부적인 출력 형식을 결정하고 이를 인쇄소에 전달한다. 인쇄소에서는 이 정보를 바탕으로 과거에는 식자공이 식자판을 제작했으나, 현재는 컴퓨터가 파일을 생성한다. 그림 5.1 에 문서 디자인과 문서 논리 구조에 대해 이해를 위해 도식화했다.\n미국 스탠포트 대학 크누스(Donald Knuth) 교수가 1978년에 만든 문서조판 프로그램을 \\(TeX\\)(“텍”이라고 읽음)이라고 하고, Leslie Lamport 교수가 만든 TeX 매크로 팩키지를 \\(\\LaTeX\\)(“레이텍”이라고 읽음)이라고 한다. \\(\\TeX\\)과 \\(\\LaTeX\\)의 탄생 역사를 살펴보면 문서 논리 구조와 디자인 분리가 갖는 문서 저작 장점을 잘 나타내고 있다. 저수준(low-level) 언어로, 사용자가 페이지 레이아웃이나 글꼴 설정 등을 직접 제어할 수 있지만, 복잡한 포맷을 만들기 위해 사용자가 직접 매크로를 작성해야 한다는 점에서 일반 저작자가 사용하기에는 한계도 분명히 존재했다.\n\\(\\LaTeX\\)은 1980년대에 레슬리 램포트(Leslie Lamport)에 의해 개발되었고, \\(\\TeX\\)을 기반으로 개발된다. \\(\\TeX\\) 복잡성을 단순화하여 더 사용자 친화적인 인터페이스를 제공한다. 따라서, 문서 구조와 내용에 더 집중할 수 있도록 고수준(high-level) 언어를 제공하며, 다양한 템플릿과 패키지가 제공되어 사용자가 쉽게 복잡한 레이아웃과 기능을 구현할 수 있다. \\(\\LaTeX\\) 문서는 내부적으로 \\(\\TeX\\) 엔진을 사용하여 조판된다. (김영록, 2017)\n\n\\(\\LaTeX\\): 편집 디자이너의 역할에 해당하는 작업을 수행\n\\(\\TeX\\): 식자공의 역할에 해당하는 작업을 수행\n\n\n\n\n그림 5.1: 문서 디자인과 문서 논리 구조\n\n\n\\(\\LaTeX\\)에서 적용하는 논리적 디자인의 가장 큰 이점은 글쓰기 능력의 향상에 있다. \\(\\LaTeX\\)으로 글을 작성하면서 점차 \\(\\LaTeX\\)의 논리적 디자인 철학에 맞춰가게 되며, 이를 통해 글쓰기 실력이 개선된다.\n컴퓨터를 이용한 전자조판의 주된 목적은 문서를 읽기 쉽게 구성하여 저자의 의도를 독자에게 명확하게 전달하는 것이다. 이를 위해선 문서의 디자인이 그 내용의 논리적 구조를 잘 반영해야 하며, 이를 달성하기 위해서는 디자이너가 문서의 논리적 구조를 충분히 이해해야 한다. \\(\\LaTeX\\) 명령어 체계는 기본적으로 이러한 문서의 논리적 구조를 명시하는 데 중점을 둔다. 이렇게 설정된 명령어는 \\(\\TeX\\) 엔진을 통해 조판되어 최종적으로 원하는 결과물을 생성한다.\n\\(\\LaTeX\\)의 가장 큰 장점 중 하나는 확실히 자동화 기능이다. 수식, 참고문헌, 표, 그래프의 번호를 자동으로 관리해주며, 복잡한 문서 구조도 쉽게 다룰 수 있다. 특히, 국내외 학술지에 논문을 제출할 때에는 템플릿만 변경하면 고품질의 논문을 쉽게 생성할 수 있다. 반면, 워드 프로세서를 사용할 경우 이러한 작업은 수동으로 해야 하며, 이로 인해 시간을 낭비하게 되고 결과물이 덜 정교하게 나올 수 있다. 결과적으로, \\(\\LaTeX\\)을 사용하면 글쓰기 본질에 더 집중할 수 있으며, 이를 통해 저자의 생각과 의견을 더욱 솔직하고 명확하게 독자에게 전달할 수 있다."
  },
  {
    "objectID": "latex_pdf.html#latex-engine",
    "href": "latex_pdf.html#latex-engine",
    "title": "4  \\(\\LaTeX\\)과 PDF",
    "section": "4.1 \\(\\LaTeX\\) 엔진",
    "text": "4.1 \\(\\LaTeX\\) 엔진\n\\(\\LaTeX\\)을 실제 문서 작성에 활용하기 위해서는 적절한 \\(\\TeX\\) 배포판을 선택해야 한다. 이에 대해 KTUG 한국 TeX 사용자 그룹은 \\(ko.TeX\\) Live를 추천하고 있으며, 그 이유는 다음과 같다. (이호재, 2017)\n\n\\(\\LaTeX\\) 엔진으로 pdfLaTeX, XeLaTeX, LuaLaTeX 세 가지가 있으나, XeLaTeX은 유니코드 \\(\\TeX\\) 엔진으로 동아시아 언어(CJK)를 잘 지원하고, 트루타입 및 오픈타입 폰트를 자유롭게 선택할 수 있어 인기가 높다.\n운영체제에 따라 차이는 있지만, 실제 문서 작업에 \\(\\LaTeX\\)을 안정적으로 설치하고 사용하기 위해서는 TeX Live가 MikTeX보다 안정성과 사용자 지원 측면에서 우수하다.\n\\(\\TeX\\) 소스파일과 PDF 파일 간의 탐색 기능은 TexStudio IDE를 활용하여 쉽게 이용할 수 있다.\n\n과거에는 latex+dvips+pspdf를 사용한 전통적인 작업 흐름이 있었으며, 이 방식은 pstricks를 이용해 PDF 파일을 생성하는데 시간이 오래 걸리고, eps 파일만을 이미지로 사용할 수 있다는 한계가 있었다. 또 다른 방식인 latex+dvipdfmx 작업 흐름은 중간 단계로 .dvi 파일을 생성한 후 dvipdfmx를 이용해 PDF 파일을 만든다. 그러나 현재 가장 인기 있는 작업 흐름은 pdfLaTeX, XeLaTeX, LuaLaTeX를 활용한 방식으로, 이는 .tex 소스파일에서 바로 .pdf 파일을 생성할 수 있다는 장점이 있다.\n논문 외의 문서를 작성할 경우에는 한 단계 더 나아가 memoir 또는 oblivoir 클래스를 활용하는 것이 효율적이다. 이 방법은 이미 검증된 문서 템플릿을 기반으로 빠르게 PDF 문서를 생성할 수 있는 방법이다.\n\n\n\n한글지원 \\(\\LaTeX\\) 엔진과 작업흐름"
  },
  {
    "objectID": "latex_pdf.html#latex-knuth",
    "href": "latex_pdf.html#latex-knuth",
    "title": "4  \\(\\LaTeX\\)과 PDF",
    "section": "4.2 \\(\\LaTeX\\) 구성요소",
    "text": "4.2 \\(\\LaTeX\\) 구성요소\n수학과 교수였던 도널드 크누스는 문서 조판 시스템을 개발하면서 수식 처리를 간편하게 할 수 있도록 하면서, 메타폰트(METAFONT)라는 글꼴 시스템도 개발하여 고품질 글자체를 구현할 수 있도록 했다. 이러한 기초 위에 레슬리 램포트는 \\(\\TeX\\)을 더욱 사용하기 쉽게 만들기 위해 다양한 매크로를 \\(\\LaTeX\\)으로 묶어 공개했다. 그 결과 일반인도 \\(\\LaTeX\\)을 이용해 고품질의 문서를 쉽게 작성할 수 있게 되었다. 버클리 대학 마이클 스피백 교수는 수식을 간편하게 문서에 적용할 수 있도록 AMS-TeX라는 매크로를 개발하고, 이에 대한 설명을 “The Joy of TeX”이라는 책에서도 공개했다. (Spivak, 1990)\npdftex와 e-TeX이 결합하여 사실상 표준 TeX이 되었고, 이를 기반으로 XeTeX과 LuaTeX이 발전하고 있다. 특히, 한글 폰트 처리에 있어서 XeTeX(지텍으로 읽음)이 널리 사용되고 있다.\n\\(\\LaTeX\\) 동작 원리는 Salomon의 도식화에 영감을 받아 Kees van der Laan이 1994년에 정리한 논문에서 상세하게 설명되어 있다. (Laan, 1994) 기본적으로 고품질의 전자 출판을 위해 글꼴과 \\(\\TeX\\)이 필요하며, 이 두 요소가 결합하여 고품질의 출력물을 생성한다. 이러한 \\(\\TeX\\) 엔진을 지원하는 다양한 패키지 중에서 AMS-(La)TeX, LaTeX, manmac 등이 주목을 받고 있다.\n문서의 다양한 구성 요소, 예를 들어 목차, 색인, 참고문헌, 그림과 표 등은 모듈화되어 관리되며, 글꼴 및 구조적인 스타일과 관련된 부분도 별도로 관리되고 있다. TeXWorks와 같은 위지윅(WYSIWYG)을 지원하는 편집기는 구문 강조, 맞춤법 검사 등을 통해 고품질의 \\(\\LaTeX\\) 문서 작성을 지원하고 있다.\n\n\n\n편집기, 엔진, 글꼴을 중심으로 본 \\(\\LaTeX\\) 내부\n\n\n\\(\\LaTeX\\) 문서 작성을 위해 기본적인 구성요소는 다음과 같다.\n\n배포판: 과거에는 다양한 배포판이 윈도우, 리눅스, 맥에서 사용되었지만, 현재는 TeX Live가 대표적인 LaTeX 작업 환경이다. MikTeX도 있지만, 큰 차이는 없다.\n글꼴: 초기에는 글꼴로 폰트 메트릭(tfm)과 메타폰트(MetaFont)가 주로 사용되었으나, 현재는 트루타입과 오픈타입이 널리 쓰인다.\n\n폰트 선택은 밥처럼 기본적이면서도 안정적인 것이 좋다. 특별한 상황에서는 그에 맞는 폰트를 선택하는 것이 중요하다.\n일반적으로 Serif와 San Serif 폰트를 한 쌍으로 사용하는 것이 균형감이 있다. 예를 들어, 나눔고딕과 나눔명조, KoPub돋움과 KoPub바탕, 함초롬도움과 함초롬바탕 등이 있다.\n글자 크기는 10~12 포인트가 적절하며, 이는 장시간 동안의 읽기 피로를 줄이기 위함이다.\n\n그래픽: TeX/LaTeX 자체는 그래픽을 주요 영역으로 보지 않는다. 과거에는 dvips와 EPS 형식을 주로 사용했으나, 현재는 .jpg, .png, .pdf 등도 잘 처리한다.\n문자와 입력: 초기에는 ASCII 코드가 주를 이루었으나, 현재는 UTF-8을 권장하고 있다. 특히, \\usepackage[utf8x]{inputenc}가 필요한 경우가 많다.\n색인과 참고문헌: makeindex와 bibtex는 색인과 참고문헌 처리의 표준이다. 그러나 유니코드 처리를 위해 texindy와 biber도 주목을 받고 있다.\n수식: 수학 표현과 관련해서는 미국 수학회가 발전시킨 amsmath가 표준이다.\n출력: 과거에는 .dvi 형식이 기본이었으나, 현재는 .pdf가 기본이다. 또한, 웹을 위한 다양한 .html 출력도 지원한다. 이에 따라, 웹이 책 형태의 문서보다 더 중요한 위치를 차지하게 될 것으로 예상된다.\n\n\\(\\LaTeX\\)을 통한 PDF 파일 제작 과정은 몇 가지 주요 단계로 이루어진다. \\(\\LaTeX\\) 전용 TexStudio 같은 통합개발환경(IDE), RStudio 같은 데이터 과학 IDE, 범용 소프트웨어 개발 VS코드 같은 IDE에서 텍스트 편집기를 열어 신규 \\(\\LaTeX\\) 파일을 생성하는데 파일 확장자는 .tex이다. 파일 시작 부분에 \\documentclass 명령어를 사용하여 문서의 종류와 옵션을 설정하는데, 학술 논문을 작성한다면 article 클래스를, 책을 작성한다면 book 클래스 등을 선택한다.\n\\usepackage 명령어를 사용하여 필요한 패키지를 불러와서 특별한 기능이나 스타일을 추가한다. 예를 들어, 수식을 표현하기 위해 amsmath 패키지를, 그림을 삽입하기 위해 graphicx 패키지 등이 사용된다.\n문서의 본문은 \\begin{document}와 \\end{document} 사이에 작성되고, 영역 안에서 텍스트, 표, 그림, 수식 등을 자유롭게 배치할 수 있다. 본문 작성 중에 참고문헌 서지관리를 위해 BibTeX texindy, biber를 사용하고, 색인 생성을 위해 makeindex를 사용한다.\n본문 작성이 완료되면, \\(\\LaTeX\\) 컴파일러를 실행하여 .tex 파일을 PDF로 변환한다. 영어는 pdflatex, 한글은 xelatex 을 \\(\\LaTeX\\) 엔진으로 사용하고, 참고문헌과 색인이 포함된 경우 컴파일 과정이 수차례 이어진다.\n\n\n\n\\(\\LaTeX\\) 작업흐름\n\n\n\n\n\n\nLaan, K. van der. (1994). What is TEX and Metafont all about?\n\n\nSpivak, M. (1990). The Joy of\\(\\backslash\\)TeX \\(\\{\\)\\(\\}\\), a Gourmet Guide to Typesetting with the\\(\\backslash\\)AmSTeX \\(\\{\\)\\(\\}\\) Macro Package: A Gourmet Guide to Typesetting with the AMS-TEX Macro Package. American Mathematical Soc.\n\n\n김영록. (2017). 교육 현장에서의 텍의 활용. TeX: 조판, 그 이상의 가능성.\n\n\n이호재. (2017). 레이텍을 빨리 쓸 수 있는 방법. TEX: 조판, 그 이상의 가능성."
  },
  {
    "objectID": "publishing.html",
    "href": "publishing.html",
    "title": "23  출판",
    "section": "",
    "text": "24 법인 출판사 신청\n개인이 아닌 법인으로 출판사를 설립하거나 법인 업종에 “출판업”을 추가하는 경우 목적은 출판사 신고확인증을 발급받는 것이다. 책을 출판하는 경우 먼저 관할 지자체에 신고를 준비해야 한다. 이를 위해서 “출판사(신고서, 변경신고서)”를 작성하고 다음 서류를 준비하여 관할 지자체(구시군청)를 내방하여 제출한다. 출판사 신고서는 출판문화산업 진흥법 시행규칙에 별지 서식으로 다운로드 가능하다.\n출판사 등록제출서류 제출 후 3일 내 처리하는 것이 원칙이고 출판등록신고증은 등기(서류제출 시 수령주소 명시)로도 수령이 가능하다. 출판등록신고증이 완료되면 세무서를 사업자등록증에 이를 업종에 반영하여 마무리한다.\n국립중앙도서관에서 책을 출판하는 경우 “ISBN” 번호를 출판사가 부여받아야 한다. 이를 위해서 국립중앙도서관 ISBN ISSN 납본시스템에 접속하여 안내에 맞춰 후속 절차를 진행한다. 먼저 국립중앙도서관 ISBN ISSN 납본시스템 상단 계정등록 작업을 수행하여 앞서 발급받은 출판사 신고확인증을 증빙으로 계정등록을 한다.\n출판사가 출판할 책이 정해지면 다음 단계로 수익창출을 위해 인쇄소와 계약을 하여 종이형태 책을 500권, 1,000권 등 수요 구독자를 감안하여 인쇄소에서 출판한다.\n다양한 출판채널을 통해 독자를 만나고 책을 판매하여 수익을 출판사와 저자, 그리고 서점과 분배한다."
  },
  {
    "objectID": "publishing.html#발행자번호-신청",
    "href": "publishing.html#발행자번호-신청",
    "title": "23  출판",
    "section": "25.1 발행자번호 신청",
    "text": "25.1 발행자번호 신청\n발행자번호 신청을 통해 출판사 신고확인증에 기재된 출판사명과 대응되는 ISBN 발행자번호를 부여받는 작업을 수행한다. 처리기간은 업무일 기준 3일이 소요된다."
  },
  {
    "objectID": "publishing.html#isbn-번호-신청",
    "href": "publishing.html#isbn-번호-신청",
    "title": "23  출판",
    "section": "25.2 ISBN 번호 신청",
    "text": "25.2 ISBN 번호 신청\n출판사 발행자번호가 발급되면 출판할 책의 ISBN 번호를 부여할 수 있다."
  },
  {
    "objectID": "publishing.html#출판-디지털-전환",
    "href": "publishing.html#출판-디지털-전환",
    "title": "23  출판",
    "section": "23.5 출판 디지털 전환",
    "text": "23.5 출판 디지털 전환\n200자 원고지 4장은 통상 A4 용지 한장에 해당한다. 만약 A4 용지 10장 보고서나 논문을 작성한다고 하면, 종이 200자 원고지 40장에 연필이나 볼펜을 가지고 작성하게 된다. 최종본을 얻기까지 빨간색으로 선생님이나 주변의 첨삭지도를 받아 최종본을 만들기까지 여러번의 반복과정을 거치게 된다.\n최종 원고가 200자 원고지 40장에 담겨 탈고를 마치게 되면, 독자에게 다가갈 준비를 한다. 그림을 넣거나 아름다운 글씨체를 적용해 보고 종이 재질을 바꿔보기도 하고 영혼이 담긴 원고를 독자가 보기 좋고, 이해하기 쉽고, 때로는 감동과 재미를 줄 수 있도록 출판 단계에서 많은 사람들의 노력이 들어간다.\n탈고를 마친 원고에 글씨체를 비롯한 디자인 작업이 완료되면 출판장비를 갖춘 출판소에서 인쇄장비를 거쳐 종이책 혹은 보고서가 완성되고, 이렇게 대량으로 출력되면 각 서점으로 배송되어 독자가 서점에서 구독을 하게 된다.\n저자의 생각을 글로 표현하면 현재도 대부분 편집 및 디자인, 출판, 배송, 서점 등 각 단계에 사람이 관여하고 필요에 따라서는 컴퓨터가 작업을 지원하는데 사용되어 최종 독자에게 전달된다.\n책과 보고서 제작하는 과정은 워드 프로세스를 기본으로 두고, 숫자 계산이 필요하면 엑셀, 이미지가 필요하면 그래픽 전문 소프트웨어, 정보 검색도 웹브라우져를 사용한다. 글자, 단어, 문장, 문단, 장/절/항으로 생각의 단위를 서문, 본문, 결어 및 참고문헌, 주석, 그림, 그래프, 도표 등도 함께 체계적으로 작성해 나간다.\n다양한 소프트웨어를 통해서 원고를 탈고하게 되면 서식, 문장 문단 모양, 색인, 참조문헌 등 보기 좋고 가독성 높은 형태로 외양을 입히는 과정을 거치게 되는데 이 과정도 소프트웨어가 핵심적인 역할을 하게 된다. 책과 보고서에 대한 디자인 작업이 완료되면 다양한 형태로 배포하기 위한 프로그래밍 과정을 거쳐 PDF, 전자책(ePUB), 웹(HTML), 출판책 형태로 독자에게 전달된다.\n글을 써서 이를 독자에게 전달되는 과정은 과거에 전문작가, 디자인 전문가, 출판전문가, 서점운영자 등 수많은 전문가가 연관되어 있고 타자기, 디자인 기계, 인쇄기 등 수많은 기계가 필요했으며 이를 사업적으로 기술적으로 연결할 수 있는 다양한 통신 방법이 필요했다. 비전문가가 밖에서 보면 복잡하고 어려워 보이지만, 컴퓨팅 사고의 시각으로 보면 단순할 수 있다.\n\n\n\n\n\n\n종이 출판\n\n\n\n\n\n\n\n디지털 출판\n\n\n\n그림 23.1: 디지털 출판 방식"
  },
  {
    "objectID": "dw_website.html",
    "href": "dw_website.html",
    "title": "\n19  웹사이트\n",
    "section": "",
    "text": "20 외양 - 폰트, 색상 등 (alison2020blog?)\n지금까지 전반적인 블로그 게시글 작성과 관련된 전반적인 작업흐름에 집중했다면 글꼴, 색상 등 외양을 꾸며 좀더 과학기술 게시글이 더욱 친근하게 다가설 수 있도록 하자.\ndistill::create_theme(\"tidyverse\") 명령어를 사용하면 tidyverse.css 파일이 자동생성되고 폰트와 색상을 원하는 방식대로 변경시키면 된다. 다음 웹사이트를 참고하여 적절한 CSS 파일 변경을 통해 본인이 원하는 웹사이트를 구축한다.\n&gt; distill::create_theme(\"tidyverse\")\nv Created CSS file at theme.css\no TODO: Customize it to suit your needs\no TODO: Add 'theme' entry to your`site/article YAML\n\nSee docs at https://rstudio.github.io/distill/website.html#theming\n폰트만 한글로 바꿔 tidyverse.css를 저장한다. 기본 아이디어는 구글 폰트 웹사이트 https://fonts.google.com/ 에서 한글 폰트를 가져와서 이를 블로그 주요 텍스트의 글꼴을 저작자의 선택에 맞춰 반영시키는 것이다. 수정한 tidyverse.css 파일의 일부는 다음과 같다.\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n\n@import url('https://fonts.googleapis.com/css2?family=Sunflower:wght@500&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300&family=Sunflower:wght@500&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Gaegu:wght@700&family=Noto+Sans+KR:wght@100;300&family=Sunflower:wght@500&display=swap');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Sunflower', sans-serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       'Noto Sans KR', sans-serif;\n  --navbar-font:     'Gaegu', cursive;\n}"
  },
  {
    "objectID": "dw_website.html#project-setup",
    "href": "dw_website.html#project-setup",
    "title": "19  웹사이트",
    "section": "19.1 프로젝트 생성",
    "text": "19.1 프로젝트 생성\n쿼토(quarto) 설치하고 정적 웹사이트 제작을 위한 프로젝트를 준비한다. 문서로 웹사이트 개발을 위한 RStudio IDE를 통합개발환경으로 선택한 경우 File → New Project ... → Project Type 에서 Quarto Website를 선택한다.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 19.1: (정적) 웹사이트 프로젝트 선택과정\n\n\n다음 단계로 웹사이트가 담길 디렉토리를 지정하고 웹사이트 디렉토리를 생성하고 Create Project 버튼을 를 클릭한다. 쿼토 웹사이트 프로젝트가 생성되면 웹사이트 제작을 위한 기본 골격이 제시된다. _quarto.yml 파일에 웹사이트 기본 정보가 담겨지고 각 웹페이지는 index.qmd, about.qmd 파일로 저작한다.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 19.2: 쿼토 웹사이트 프로젝트 생성"
  },
  {
    "objectID": "dw_website.html#deployment-setup",
    "href": "dw_website.html#deployment-setup",
    "title": "19  웹사이트",
    "section": "19.4 웹사이트 배포",
    "text": "19.4 웹사이트 배포\n\n19.4.1 GitHub Pages 출판\nhttps://&lt;사용자명&gt;.github.io/ 저장소는 매우 특별한 GitHub 저장소다. 따라서, GitHub 저장소 명칭을 &lt;사용자명&gt;.github.io 으로 생성해야 한다. 예를 들어, statkclee.github.io 와 같이 사용자계정을 github.io와 붙여 먼저 판다. 그리고 나서, 상단 Settings로 들어간 다음 GitHub Pages 설정을 한다. 이때 GitHub 저장소의 특정 디렉토리 docs/ 디렉토리에 담긴 내용 전부가 정적 웹사이트에 게시되는 내용이 된다. 즉, docs/index.html → https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html로 바뀌어 웹사이트 생성 및 배포가 완료된다.\n\n\n\n정적 웹사이트 GitHub Pages 연결\n\n\n\n\n19.4.2 Quarto Pub 출판\nQuarto Pub 출판과정은 Quarto CLI를 통해 이뤄진다. RStudio의 내부 터미널을 사용하는 것을 권장하는데, 이유는 RStudio와 Quarto가 잘 통합되어 있어, 간편하게 출판 작업을 진행할 수 있기 때문이다. 1\n#| eval: false\n$ quarto publish quarto-pub\n? Authorize (Y/n) › \n❯ In order to publish to Quarto Pub you need to\n  authorize your account. Please be sure you are\n  logged into the correct Quarto Pub account in \n  your default web browser, then press Enter or \n  'Y' to authorize.\n첫번째 출판하게 되면 인증작업을 수행하고 나면 _publish.yml 파일이 하나 생성된다.\n#| eval: false\n- source: project\n  quarto-pub:\n    - id: 1fa3ab1f-c010-453a-aaf2-f462bd074a66\n      url: 'https://quartopub.com/sites/statkclee/quarto-ds'\n이제 모든 준비가 되었기 때문에 다음 명령어로 작성한 출판 문서를 포함한 웹사이트를 로컬에서 미리 확인 한 후에 Quarto Pub으로 전자출판한다. 윈도우에서는 RStudio 내부 Terminal CLI를 사용하는 것을 권장한다.\n#| eval: false\n$ quarto preview\n$ quarto publish quarto-pub"
  },
  {
    "objectID": "dw_website.html#writing-blog",
    "href": "dw_website.html#writing-blog",
    "title": "\n19  웹사이트\n",
    "section": "\n19.3 블로그글 작성",
    "text": "19.3 블로그글 작성\ndistill::create_post() 명령어를 사용해서 블로그를 작성한다. 예를 들어 distill::create_post(\"reticulate-python-and-r\") 명령어를 실행하게 되면, 작성 날짜 2020-01-12가 붙은 폴더가 _posts/2021-01-12-reticulate-python-and-r와 같이 생성되고 폴더 내부에 reticulate-python-and-r.Rmd 파일이 위치한다.\n이제 파일을 R마크다운 문서 작성하듯이 작성하고 나서 뜨게질(Knit) 하게 되면 컴파일 되어 HTML 문서가 생성된다.\n\nREADME.html' does not exist.\nerror with pandoc and title #52을 참조하여 README.html 파일 관련 이슈를 해결한다.\n\nrmarkdown::render(\"README.Rmd\", output_format = \"github_document\")"
  },
  {
    "objectID": "dw_website.html#create-blog",
    "href": "dw_website.html#create-blog",
    "title": "\n19  웹사이트\n",
    "section": "\n19.4 블로그 웹사이트 생성",
    "text": "19.4 블로그 웹사이트 생성\n블로그 글 작성이 완료되면 이를 블로그 웹사이트에 반영시키기 위해서 CTRL + SHIFT + B 키를 입력하여 작성한 블로그글이 웹사이트에 올라오도록 준비한다."
  },
  {
    "objectID": "dw_website.html#connect-github-repo",
    "href": "dw_website.html#connect-github-repo",
    "title": "\n19  웹사이트\n",
    "section": "\n19.5 GitHub 저장소 연결",
    "text": "19.5 GitHub 저장소 연결\nGitHub 저장소를 연결시켜야 하는데 &lt;사용자명&gt;.github.io 와 같이 지정하여 Repository를 GitHub 상단 + 버튼을 클릭하여 생성시킨다.\n\n다음으로 Git 작업흐름에 맞춰 순차적으로 작업하는데 로컬 컴퓨터에서 작업한 distill 블로그 웹저장소와 &lt;사용자명&gt;.github.io을 연결시킨다.\n\n$ git add -A\n$ git commit -m\"첫번째 블로그 게시글 배포\"\n$ git remote add origin git@github.com:statkclee/statkclee.github.io.git\n$ git pull origin master --allow-unrelated-histories"
  },
  {
    "objectID": "dw_website.html#congratulation-github-repo",
    "href": "dw_website.html#congratulation-github-repo",
    "title": "\n19  웹사이트\n",
    "section": "\n19.6 격려와 축하",
    "text": "19.6 격려와 축하\nhttps://&lt;사용자명&gt;.github.io/index.html 혹은 https://&lt;사용자명&gt;.github.io/ 웹사이트에 접속하게 되면 그동안 노력했던 결과물을 확인할 수 있다."
  },
  {
    "objectID": "dw_website.html#project-writing",
    "href": "dw_website.html#project-writing",
    "title": "19  웹사이트",
    "section": "19.2 웹사이트 저작",
    "text": "19.2 웹사이트 저작\n문서의 구조를 정의하는 _quarto.yml 파일에 웹사이트 문법을 적용하여 웹페이지는 .qmd 파일, 외양은 .css 혹은 .scss 파일에 정리한다. 관련하여 웹사이트를 구성하는 이미지, 동영상, 소리를 비롯한 각종 자산(assets)도 웹페이지에 잘 담기도록 저작한다.\n쿼토 웹사이트 프로젝트는 웹사이트 기본골격을 다음 파일과 디렉토리를 통해 제공된다. _site/ 디렉토리는 쿼토 웹사이트를 컴파일하게 되면 자동 생성된다. _site/ 디렉토리에 index.qmd 파일을 컴파일한 index.html 파일을 비롯한 정적 웹사이트 저작을 위한 각종 파일과 디렉토리로 채워진다.\n쿼토 웹사이트를 컴파일하는 방식은 Ctrl + Shift + K 단축키를 누르거나, 상단 Render 버튼을 클릭하거나, CTRL + SHIFT + B 단축키를 누르거나, Build에 Render Website를 클릭한다.\n\n_quarto.yml\nindex.rmd\nabout.rmd\n_site/\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 19.3: 로컬 웹사이트 컴파일\n\n\n_site/ 디렉토리는 정적 웹사이트가 배포되는 디렉토리로,\n기본적으로 http://netlify.com/를 상정한 경우 _site/를 사용하지만, docs/로 바꿔주게 되면 GitHub Pages 웹호스팅으로 사용하여 배포할 수 있게 된다. GitHub Pages 배포를 위해 _quarto.yaml 파일에 output-dir: docs을 추가하게 되면 정적 웹사이트가 _docs 폴더에 담기게 된다.\n요약하면 _quarto.yml 파일을 열어 output_dir: 설정이 없는 경우 output_dir: docs로 지정하고, 이미 존재하는 경우 output_dir: 값을 _site → docs으로 변경한다. 그리고 나서 쿼토 웹사이트를 빌드시키면 웹사이트 전체가 docs/ 디렉토리에 저장된다. 이것을 GitHub 저장소에 업로드하거나 push 해서 올리게 되면 블로그 웹사이트가 https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html을 통해 배포된다.\n\n\nproject:\n  type: website\n\n\n\nproject:\n  type: website\n  output-dir: docs"
  },
  {
    "objectID": "dw_website.html#theme-distill",
    "href": "dw_website.html#theme-distill",
    "title": "19  웹사이트",
    "section": "19.3 외양 - 폰트, 색상 등",
    "text": "19.3 외양 - 폰트, 색상 등\n지금까지 전반적인 웹사이트 생성과 웹페이지 콘텐츠 작성과 관련된 전반적인 작업흐름에 집중했다면 글꼴, 색상 등 외양을 바꾸면 근사한 웹사이트로 탈바꿈시킬 수 있다. 특히 쿼토는 부츠트랩 5(Bootstrap 5)를 지원하기 때문에 SCSS 변수 설정을 통해 멋진 웹사이트를 꾸밀 수 있다.\n글꼴만 한글로 바꿔 tidyverse.css를 저장한다. 기본 아이디어는 구글 글꼴 웹사이트 https://fonts.google.com/ 에서 한글 글꼴을 가져와서 웹사이트 제목과 텍스트에 글꼴을 저작자의 선택에 맞춰 반영한다. 수정한 tidyverse.css 파일 일부는 다음과 같다.\n@import url('https://fonts.googleapis.com/css2?family=Sunflower');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n@import url('https://fonts.googleapis.com/css2?family=Gaegu');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Sunflower', sans-serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       'Noto Sans KR', sans-serif;\n  --navbar-font:     'Gaegu', cursive;\n}"
  },
  {
    "objectID": "publishing.html#판형",
    "href": "publishing.html#판형",
    "title": "23  출판",
    "section": "23.6 판형",
    "text": "23.6 판형\n종이 크기는 다양한데 우리나라는 국제 표준인 ISO A형(A4 등 A 계열)을 채택하고 있는데 제조 효율에서는 표준으로 설계된 크기인 ISO A형이 활용성과 효율이 가장 좋은 것으로 알려져 있다. A형 전지는 A0로 표기하며 이를 접어서 절단할 때마다 숫자를 늘려 표기한다. A1은 한번 접어서 자른 크기이며, 흔히 사용하는 A4는 A0를 네 번 접어서 자른 종이 크기다.\nA계열로 일명 A0판이라고 부르는 841*1189mm 종이를 가로 세로로 접어가면서 자르는 방식으로 A4는 A1을 8조각으로 자른 것이다. ’국배판’으로 불리는 A4판(210*297mm)은 학습지 등 문제풀이나 필기가 필요한 서적에 주로 사용되고, 신국판으로 불리는 A5판의 변형본은 148*210mm인 A5보다 약간 큰 152*225mm 으로 한국 출판계에서 가장 흔한 사이즈다.\nB계열은 JIS B규격으로써 4*6전지나 B0이라고 부르는 1030*1456mm 종이를 가로 세로로 접어가면서 자르는 방식으로 A4와 마찬가지로 B4는 B1을 8조각으로 자른 것이다. 소설, 자서전, 전문서적에는 신국판(152*225mm)을 많이 사용하고, 46배판은 B5(16절) 182 x 257(4x6배판)과 같은 크기로 대학 전공서적 등에 주로 사용된다.\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 23.2: 종이크기(A0, B0)"
  },
  {
    "objectID": "publishing.html#법인-출판사-신청",
    "href": "publishing.html#법인-출판사-신청",
    "title": "23  출판",
    "section": "23.1 법인 출판사 신청",
    "text": "23.1 법인 출판사 신청\n개인이 아닌 법인으로 출판사를 설립하거나 법인 업종에 “출판업”을 추가하는 경우 목적은 출판사 신고확인증을 발급받는 것이다. 책을 출판하는 경우 먼저 관할 지자체에 신고를 준비해야 한다. 이를 위해서 “출판사(신고서, 변경신고서)”를 작성하고 다음 서류를 준비하여 관할 지자체(구시군청)를 내방하여 제출한다. 출판사 신고서는 출판문화산업 진흥법 시행규칙에 별지 서식으로 다운로드 가능하다.\n\n임대차 계약서\n법인등기부등본\n법인인감증명서\n법인인감\n법인대표 신분증\n\n출판사 등록제출서류 제출 후 3일 내 처리하는 것이 원칙이고 출판등록신고증은 등기(서류제출 시 수령주소 명시)로도 수령이 가능하다. 출판등록신고증이 완료되면 세무서를 사업자등록증에 이를 업종에 반영하여 마무리한다.\n\n\n\n\n\n\n출판사 신고확인증 예시"
  },
  {
    "objectID": "publishing.html#isbn-발급",
    "href": "publishing.html#isbn-발급",
    "title": "23  출판",
    "section": "23.2 ISBN 발급",
    "text": "23.2 ISBN 발급\n국립중앙도서관에서 책을 출판하는 경우 “ISBN” 번호를 출판사가 부여받아야 한다. 이를 위해서 국립중앙도서관 ISBN ISSN 납본시스템에 접속하여 안내에 맞춰 후속 절차를 진행한다. 먼저 국립중앙도서관 ISBN ISSN 납본시스템 상단 계정등록 작업을 수행하여 앞서 발급받은 출판사 신고확인증을 증빙으로 계정등록을 한다.\n\n23.2.1 발행자번호 신청\n발행자번호 신청을 통해 출판사 신고확인증에 기재된 출판사명과 대응되는 ISBN 발행자번호를 부여받는 작업을 수행한다. 처리기간은 업무일 기준 3일이 소요된다.\n\n\n\n\n\n\n\n23.2.2 ISBN 번호 신청\n출판사 발행자번호가 발급되면 출판할 책의 ISBN 번호를 부여할 수 있다."
  },
  {
    "objectID": "publishing.html#인쇄",
    "href": "publishing.html#인쇄",
    "title": "23  출판",
    "section": "23.3 인쇄",
    "text": "23.3 인쇄\n출판사가 출판할 책이 정해지면 다음 단계로 수익창출을 위해 인쇄소와 계약을 하여 종이형태 책을 500권, 1,000권 등 수요 구독자를 감안하여 인쇄소에서 출판한다."
  },
  {
    "objectID": "publishing.html#판매",
    "href": "publishing.html#판매",
    "title": "23  출판",
    "section": "23.4 판매",
    "text": "23.4 판매\n다양한 출판채널을 통해 독자를 만나고 책을 판매하여 수익을 출판사와 저자, 그리고 서점과 분배한다."
  },
  {
    "objectID": "document_class.html",
    "href": "document_class.html",
    "title": "\n14  문서 클래스\n",
    "section": "",
    "text": "15 한글 lipsum"
  },
  {
    "objectID": "dw_pdf.html#리눅스",
    "href": "dw_pdf.html#리눅스",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.2 리눅스",
    "text": "19.2 리눅스\nInstall Quarto 웹사이트에 쿼토 설치 방법이 잘 설명되어 있다. 먼저 쉘에서 curl로 쿼토 설치파일을 다운로드 받는다. gdebi-core를 설치하고 다운로드 받은 쿼토 파일을 gdebi 명령어로 설치하고 나서 quarto --version 명령어로 설치된 쿼토 버전을 확인한다.\n$ sudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb\n$ sudo apt-get install gdebi-core\n$ sudo gdebi quarto-linux-amd64.deb\n$ quarto --version\n1.3.450"
  },
  {
    "objectID": "dw_pdf.html#latex-설치",
    "href": "dw_pdf.html#latex-설치",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.3 \\(\\LaTeX\\) 설치",
    "text": "19.3 \\(\\LaTeX\\) 설치\n\\(Tiny\\TeX\\)은 TeX Live를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운 \\(\\LaTeX\\) 배포판으로 \\(\\LaTeX\\) 설치와 관련된 일반적인 불편함을 해결하기 위해 만들어졌고, 특히 “이휘 쉬에(Yihui Xie)”가 개발하여 R과 R 마크다운 통합이 잘 되어 있다.\n다른 \\(\\LaTeX\\) 배포판들이 수 기가바이트(GB)의 크기를 갖지만, \\(Tiny\\TeX\\)은 설치 크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는 사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, \\(\\LaTeX\\) 문서를 컴파일할 때 누락된 \\(\\LaTeX\\) 패키지도 자동으로 설치해주는 기능이 많은 사랑을 받고 있다.\n쿼토를 설치하면 quarto install tinytex 명령어로 \\(Tiny\\TeX\\)을 쉽게 설치할 수 있고, 설치 정보는 quarto tools info tinytex으로 파악이 가능하다.\n$ quarto install tinytex\nInstalling tinytex\n[✓] Downloading TinyTex v2023.09\n[✓] Unzipping TinyTeX-v2023.09.tar.gz\n[✓] Moving files\n[✓] Verifying tlgpg support\n[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/\nInstallation successful\n\n$ quarto tools info tinytex\n{\n  \"name\": \"TinyTeX\",\n  \"installed\": true,\n  \"version\": \"v2023.09\",\n  \"directory\": \"/home/statkclee/.TinyTeX\",\n  \"bin-directory\": \"/home/statkclee/.TinyTeX/bin/x86_64-linux\",\n  \"configuration\": {\n    \"status\": \"ok\"\n  }\n}\n기본적인 \\(\\LaTeX\\) 문서 구조에 표, 수식, 다이어그램, 주석을 추가한 \\(\\LaTeX\\) 기본 문서를 작성한다.\n\\documentclass{article}  % 문서 클래스 지정. article은 학술 논문, 보고서 등에 적합하다.\n\n\\usepackage{tikz}  % tikz 패키지 추가. 그래픽을 그리기 위해 필요하다.\n\n\\title{fathers of the atomic bomb}  % 문서의 제목 설정\n\\author{Oppenheimer}  % 문서의 저자 설정\n\\date{\\today}  % 문서의 날짜 설정. \\today를 사용하여 오늘 날짜를 자동 입력한다.\n\n\\begin{document}  % 문서의 본문 시작\n\n\\maketitle  % 제목, 저자, 날짜를 출력\n\n\\section{Introduction}  % \"Introduction\"이라는 섹션 생성\n\nThe name \"Oppenheimer\"\\footnote{Oppenheimer is pronounced in English as /ˈɒpənˌhaɪmər} is a German-origin surname that is most famously associated with J. Robert Oppenheimer, the American physicist known as one of the \"fathers of the atomic bomb.\"  % 본문과 각주\n\n\\section{Table}  % \"Table\"이라는 섹션 생성\nBelow is a simple table.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\nHeader 1 & Header 2 \\\\  % 테이블의 헤더\n\\hline\nRow 1, Col 1 & Row 1, Col 2 \\\\  % 첫 번째 행\nRow 2, Col 1 & Row 2, Col 2 \\\\  % 두 번째 행\n\\hline\n\\end{tabular}\n\\end{center}  % 테이블 종료\n\n\\section{Equation}  % \"Equation\"이라는 섹션 생성\nHere is a simple equation:\n\\begin{equation}  % 수식 환경 시작\n  f(x) = x^2  % 수식\n\\end{equation}  % 수식 환경 종료\n\n\\section{Diagram}  % \"Diagram\"이라는 섹션 생성\nHere is a simple diagram:\n\\begin{center}\n\\begin{tikzpicture}  % tikz로 그림을 그리기 시작\n  \\draw[-&gt;] (0,0) -- (4,0);  % x축 그리기\n  \\draw[-&gt;] (0,0) -- (0,4);  % y축 그리기\n  \\draw (0,0) -- (3,3);  % 대각선 그리기\n\\end{tikzpicture}\n\\end{center}  % 그림 환경 종료\n\n\\end{document}  % 문서의 본문 종료\nRStudio로 \\(\\LaTeX\\)을 이용해 PDF 문서를 생성할 때, 먼저 새로운 .tex 문서를 생성하고 표, 수식, 다이어그램, 주석이 포함된 \\(\\LaTeX\\) 코드를 복사-붙여넣는다. RStudio의 Compile PDF 버튼을 클릭하여 컴파하고, 완료되면 PDF 문서가 자동으로 열린다.\n\n\n\n\n\\(\\LaTeX\\) 문서 컴파일\n\n\n\n\n\n\n\\(\\LaTeX\\) 헬로월드 기본 문서\n\n\n\n\n19.3.1 한글 PDF\n영문 PDF를 한글로 번역하여 동일한 방식으로 PDF 파일을 만들기 위해 컴파일하게 되면 한글이 깨지거나 아무것도 없는 PDF 문서가 생성된다.\n\\documentclass{article}\n\n\\usepackage{tikz}\n\n\\title{원자폭탄의 아버지들}\n\\author{오펜하이머}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{소개}\n\n\"오펜하이머\"라는 이름\\footnote{오펜하이머는 영어로 /ˈɒpənˌhaɪmər/ 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 \"원자폭탄의 아버지\"로 알려져 있다.\n\n\\section{표}\n아래는 간단한 표이다.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\n헤더 1 & 헤더 2 \\\\\n\\hline\n행 1, 열 1 & 행 1, 열 2 \\\\\n행 2, 열 1 & 행 2, 열 2 \\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\n\\section{수식}\n다음은 간단한 수식이다:\n\\begin{equation}\n  f(x) = x^2\n\\end{equation}\n\n\\section{다이어그램}\n아래는 간단한 다이어그램이다:\n\\begin{center}\n\\begin{tikzpicture}\n  \\draw[-&gt;] (0,0) -- (4,0);\n  \\draw[-&gt;] (0,0) -- (0,4);\n  \\draw (0,0) -- (3,3);\n\\end{tikzpicture}\n\\end{center}\n\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n한글이 PDF 문서에 표현되지 않는 문제는 글꼴을 .tex 파일에 지정함으로써 해결된다. 먼저 전제조건으로 한글 글꼴(예를 들어, 나눔고딕 글꼴)이 설치되어 있고 이를 \\(\\LaTeX\\) 에서 컴파일하는 방식으로 작업한다.\n\n\\documentclass{article}\n\n\\usepackage{tikz}\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\\usepackage{tipa} % 발음기호(IPA symbols)\n\n\\title{원자폭탄의 아버지들}\n\\author{오펜하이머}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{소개}\n\n\"오펜하이머\"라는 이름\\footnote{오펜하이머는 영어로 \\textipa{/ˈɒpənˌhaɪmər/} , \\textipa{/\\'{O}p@n\\\"{h}aIm@r/} 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 \"원자폭탄의 아버지\"로 알려져 있다.\n\n\\section{표}\n아래는 간단한 표이다.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\n헤더 1 & 헤더 2 \\\\\n\\hline\n행 1, 열 1 & 행 1, 열 2 \\\\\n행 2, 열 1 & 행 2, 열 2 \\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\n\\section{수식}\n다음은 간단한 수식이다:\n\\begin{equation}\n  f(x) = x^2\n\\end{equation}\n\n\\section{다이어그램}\n아래는 간단한 다이어그램이다:\n\\begin{center}\n\\begin{tikzpicture}\n  \\draw[-&gt;] (0,0) -- (4,0);\n  \\draw[-&gt;] (0,0) -- (0,4);\n  \\draw (0,0) -- (3,3);\n\\end{tikzpicture}\n\\end{center}\n\n\\end{document}\n\n\n\n\\(\\LaTeX\\)에서 한글문제를 해결한 PDF 문서"
  },
  {
    "objectID": "dw_pdf.html",
    "href": "dw_pdf.html",
    "title": "\n19  쿼토 PDF\n",
    "section": "",
    "text": "20 Introduction\nThis is a simple \"Hello, World!\" document."
  },
  {
    "objectID": "dw_pdf.html#로렘-입숨",
    "href": "dw_pdf.html#로렘-입숨",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.3 로렘 입숨",
    "text": "19.3 로렘 입숨"
  },
  {
    "objectID": "dw_pdf.html#환경설정",
    "href": "dw_pdf.html#환경설정",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.1 환경설정",
    "text": "19.1 환경설정\n\n19.1.1 리눅스\nInstall Quarto 웹사이트에 쿼토 설치 방법이 잘 설명되어 있다. 먼저 쉘에서 curl로 쿼토 설치파일을 다운로드 받는다. gdebi-core를 설치하고 다운로드 받은 쿼토 파일을 gdebi 명령어로 설치하고 나서 quarto --version 명령어로 설치된 쿼토 버전을 확인한다.\n$ sudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb\n$ sudo apt-get install gdebi-core\n$ sudo gdebi quarto-linux-amd64.deb\n$ quarto --version\n1.3.450\n\n19.1.2 \\(\\LaTeX\\) 설치\n\\(Tiny\\TeX\\)은 TeX Live를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운 \\(\\LaTeX\\) 배포판으로 \\(\\LaTeX\\) 설치와 관련된 일반적인 불편함을 해결하기 위해 만들어졌고, 특히 “이휘 쉬에(Yihui Xie)”가 개발하여 R과 R 마크다운 통합이 잘 되어 있다.\n다른 \\(\\LaTeX\\) 배포판들이 수 기가바이트(GB)의 크기를 갖지만, \\(Tiny\\TeX\\)은 설치 크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는 사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, \\(\\LaTeX\\) 문서를 컴파일할 때 누락된 \\(\\LaTeX\\) 패키지도 자동으로 설치해주는 기능이 많은 사랑을 받고 있다.\n보통 TexLive에 기반을 둔 tinytex 를 사용하는데 한글을 사용하는 입장에서는 kotex를 설치하는 방법도 모색이 필요하다. 유니코드 문자를 처리하기 위해서 xelatex을 쿼토 \\(LaTeX\\) 기본엔진으로 지정하면 xelatex을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.\n쿼토를 설치하면 quarto install tinytex 명령어로 \\(Tiny\\TeX\\)을 쉽게 설치할 수 있고, 설치 정보는 quarto tools info tinytex으로 파악이 가능하다.\n$ quarto install tinytex\nInstalling tinytex\n[✓] Downloading TinyTex v2023.09\n[✓] Unzipping TinyTeX-v2023.09.tar.gz\n[✓] Moving files\n[✓] Verifying tlgpg support\n[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/\nInstallation successful\n\n$ quarto tools info tinytex\n{\n  \"name\": \"TinyTeX\",\n  \"installed\": true,\n  \"version\": \"v2023.09\",\n  \"directory\": \"/home/statkclee/.TinyTeX\",\n  \"bin-directory\": \"/home/statkclee/.TinyTeX/bin/x86_64-linux\",\n  \"configuration\": {\n    \"status\": \"ok\"\n  }\n}\nkotex 패키지 주요 장점 중 하나는 한글 관련 문제를 해결할 수 있는 다양한 \\(\\LaTeX\\) 패키지와 기본 한글 글꼴을 내장하고 있어 한글 문서 작성이 훨씬 편리하다. 하지만, tinytex를 기본 \\(\\LaTeX\\) 엔진으로 사용할 경우, 누락된 패키지로 인해 추가 작업이 어려울 수 있다. 이러한 문제를 해결하기 위해 tinytex::parse_install() 함수를 사용하면, 오류가 발생한 텍스트를 붙여넣을 때 자동으로 필요한 패키지를 설치해 준다. 설치과정에서 오류 사항이 담긴 .log 파일을 tinytex::parse_install() 함수에 인자로 넣어주면, 자동으로 필요한 패키지를 설치해 준다.\n\n# log 파일이 hello_world.log\ntinytex::parse_install(\"hello_world.log\")\n\ntinytex::parse_install(\n  text = \"! LaTeX Error: File `titlepic.sty' not found.\"\n)"
  },
  {
    "objectID": "dw_pdf.html#헬로월드",
    "href": "dw_pdf.html#헬로월드",
    "title": "\n19  쿼토 PDF\n",
    "section": "\n19.2 헬로월드",
    "text": "19.2 헬로월드\n기본적인 \\(\\LaTeX\\) 문서 구조에 표, 수식, 다이어그램, 주석을 추가한 \\(\\LaTeX\\) 기본 문서를 작성한다.\n\\documentclass{article}  % 문서 클래스 지정. article은 학술 논문, 보고서 등에 적합하다.\n\n\\usepackage{tikz}  % tikz 패키지 추가. 그래픽을 그리기 위해 필요하다.\n\n\\title{fathers of the atomic bomb}  % 문서의 제목 설정\n\\author{Oppenheimer}  % 문서의 저자 설정\n\\date{\\today}  % 문서의 날짜 설정. \\today를 사용하여 오늘 날짜를 자동 입력한다.\n\n\\begin{document}  % 문서의 본문 시작\n\n\\maketitle  % 제목, 저자, 날짜를 출력\n\n\\section{Introduction}  % \"Introduction\"이라는 섹션 생성\n\nThe name \"Oppenheimer\"\\footnote{Oppenheimer is pronounced in English as /ˈɒpənˌhaɪmər} is a German-origin surname that is most famously associated with J. Robert Oppenheimer, the American physicist known as one of the \"fathers of the atomic bomb.\"  % 본문과 각주\n\n\\section{Table}  % \"Table\"이라는 섹션 생성\nBelow is a simple table.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\nHeader 1 & Header 2 \\\\  % 테이블의 헤더\n\\hline\nRow 1, Col 1 & Row 1, Col 2 \\\\  % 첫 번째 행\nRow 2, Col 1 & Row 2, Col 2 \\\\  % 두 번째 행\n\\hline\n\\end{tabular}\n\\end{center}  % 테이블 종료\n\n\\section{Equation}  % \"Equation\"이라는 섹션 생성\nHere is a simple equation:\n\\begin{equation}  % 수식 환경 시작\n  f(x) = x^2  % 수식\n\\end{equation}  % 수식 환경 종료\n\n\\section{Diagram}  % \"Diagram\"이라는 섹션 생성\nHere is a simple diagram:\n\\begin{center}\n\\begin{tikzpicture}  % tikz로 그림을 그리기 시작\n  \\draw[-&gt;] (0,0) -- (4,0);  % x축 그리기\n  \\draw[-&gt;] (0,0) -- (0,4);  % y축 그리기\n  \\draw (0,0) -- (3,3);  % 대각선 그리기\n\\end{tikzpicture}\n\\end{center}  % 그림 환경 종료\n\n\\end{document}  % 문서의 본문 종료\nRStudio로 \\(\\LaTeX\\)을 이용해 PDF 문서를 생성할 때, 먼저 새로운 .tex 문서를 생성하고 표, 수식, 다이어그램, 주석이 포함된 \\(\\LaTeX\\) 코드를 복사-붙여넣는다. RStudio의 Compile PDF 버튼을 클릭하여 컴파하고, 완료되면 PDF 문서가 자동으로 열린다.\n\n\n\n\n\\(\\LaTeX\\) 문서 컴파일\n\n\n\n\n\n\n\\(\\LaTeX\\) 헬로월드 기본 문서\n\n\n\n\n19.2.1 한글 PDF\n영문 PDF를 한글로 번역하여 동일한 방식으로 PDF 파일을 만들기 위해 컴파일하게 되면 한글이 깨지거나 아무것도 없는 PDF 문서가 생성된다.\n\\documentclass{article}\n\n\\usepackage{tikz}\n\n\\title{원자폭탄의 아버지들}\n\\author{오펜하이머}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{소개}\n\n\"오펜하이머\"라는 이름\\footnote{오펜하이머는 영어로 /ˈɒpənˌhaɪmər/ 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 \"원자폭탄의 아버지\"로 알려져 있다.\n\n\\section{표}\n아래는 간단한 표이다.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\n헤더 1 & 헤더 2 \\\\\n\\hline\n행 1, 열 1 & 행 1, 열 2 \\\\\n행 2, 열 1 & 행 2, 열 2 \\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\n\\section{수식}\n다음은 간단한 수식이다:\n\\begin{equation}\n  f(x) = x^2\n\\end{equation}\n\n\\section{다이어그램}\n아래는 간단한 다이어그램이다:\n\\begin{center}\n\\begin{tikzpicture}\n  \\draw[-&gt;] (0,0) -- (4,0);\n  \\draw[-&gt;] (0,0) -- (0,4);\n  \\draw (0,0) -- (3,3);\n\\end{tikzpicture}\n\\end{center}\n\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n한글이 PDF 문서에 표현되지 않는 문제는 글꼴을 .tex 파일에 지정함으로써 해결된다. 먼저 전제조건으로 한글 글꼴(예를 들어, 나눔고딕 글꼴)이 설치되어 있고 이를 \\(\\LaTeX\\) 에서 컴파일하는 방식으로 작업한다.\n\n\\documentclass{article}\n\n\\usepackage{tikz}\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\\usepackage{tipa} % 발음기호(IPA symbols)\n\n\\title{원자폭탄의 아버지들}\n\\author{오펜하이머}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{소개}\n\n\"오펜하이머\"라는 이름\\footnote{오펜하이머는 영어로 \\textipa{/ˈɒpənˌhaɪmər/} , \\textipa{/\\'{O}p@n\\\"{h}aIm@r/} 로 발음된다}은 독일 기원의 성씨로 가장 유명한 사람은 미국 물리학자 J. 로버트 오펜하이머이다. 그는 \"원자폭탄의 아버지\"로 알려져 있다.\n\n\\section{표}\n아래는 간단한 표이다.\n\\begin{center}\n\\begin{tabular}{|c|c|}\n\\hline\n헤더 1 & 헤더 2 \\\\\n\\hline\n행 1, 열 1 & 행 1, 열 2 \\\\\n행 2, 열 1 & 행 2, 열 2 \\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\n\\section{수식}\n다음은 간단한 수식이다:\n\\begin{equation}\n  f(x) = x^2\n\\end{equation}\n\n\\section{다이어그램}\n아래는 간단한 다이어그램이다:\n\\begin{center}\n\\begin{tikzpicture}\n  \\draw[-&gt;] (0,0) -- (4,0);\n  \\draw[-&gt;] (0,0) -- (0,4);\n  \\draw (0,0) -- (3,3);\n\\end{tikzpicture}\n\\end{center}\n\n\\end{document}\n\n\n\n\\(\\LaTeX\\)에서 한글문제를 해결한 PDF 문서"
  },
  {
    "objectID": "document_class.html#lorem-ipsum",
    "href": "document_class.html#lorem-ipsum",
    "title": "\n14  문서 클래스\n",
    "section": "\n14.1 로렘 입숨",
    "text": "14.1 로렘 입숨\n로렘 입숨(Lorem Ipsum, 줄여서 립숨, lipsum)은 출판과 그래픽 디자인 분야에서 널리 사용되는 채우기 텍스트(dummy text)로 글꼴, 타이포그래피, 레이아웃과 같은 그래픽 요소나 시각적 연출을 검토하고 싶을 때 유용하게 쓰인다. 로렘 입숨은 최종 결과물에 들어갈 실제 텍스트가 아직 준비되지 않았을 때, 기계적으로 디자인 전반적인 느낌을 파악하기 위한 임시 채움 글로 활용된다.\n사람들은 텍스트가 보일 경우 그 내용에 집중하는 경향 때문에 로렘 입숨이 특히 진가를 발휘한다. 전형적인 로렘 입숨 텍스트는 라틴어 문장의 일부를 변형한 “Lorem ipsum dolor sit amet, consectetur adipiscing elit…”와 같은 형태로 시작된다. 디자인의 ‘보이는’ 부분을 검토할 때 방해가 되지 않는 중립적인 내용을 제공하여 디자인이나 서체 특성을 강조하고자 할 때, 로렘 입숨을 사용하면 사람들이 디자인 자체에 더 집중할 수 있게 되어, 출판사나 디자이너가 인쇄출판 시각적 요소에만 초점을 맞출 때 매우 유용하다. 1\n\n\n\n\n\n\n로렘 입숨 (영문) 사례\n\n\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\n\n14.1.1 영문 입숨\n영문 입숨 \\(\\LaTeX\\) 패키지로 lipsum, blindtext, kantlipsum, mwe 등이 있다. lipsum 패키지는 로렘 입숨(Lorem Ipsum) 텍스트를 쉽게 생성할 수 있어서 가장 널리 사용되는 텍스트 채우기 패키지 중 하나다. 특히, 문단 수를 지정할 수 있는 기능이 있어서 문서의 길이나 복잡성에 따라 유연하게 적용할 수 있다. 예를 들어, \\lipsum[1-5] 명령어를 사용하면 5개의 로렘 입숨 문단을 생성한다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n\\begin{document}\n\n\\title{Two-Sided Lipsum Example}\n\\author{Example Author}\n\\date{\\today}\n\n\\maketitle\n\n\\section{Introduction}\n\\lipsum[1] % 첫 번째 로렘 입숨 문단 생성\n\n\\section{Main Body}\n\\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n\n\\section{Conclusion}\n\\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\end{document}\n\n\n\n\n\n영문 입숨 2단 문서 사례\n\n\n\n\n14.1.2 한글 입숨\njiwonlipsum 패키지는 라틴 계열 문자를 위한 lipsum 패키지와 동일한 목표를 갖지만, 한글 및 한자에 특화된 글꼴, 레이아웃 등 타이포그래피의 요소를 예제로 채우기 텍스트(dummy text)를 생성하는 패키지로 김강수님이 제작했다. jiwonlipsum 팩키지는 KTUG Private Repository에 저장되어 있어 이를 설치한 후 한글 lipsum을 사용할 수 있다. jiwonlipsum 팩키지가 저장된 KTUG Private Repository 저장소를 활용하는 방식은 다음과 같다.\n\n저장소 추가: TeX Live 또는 MiKTeX의 패키지 관리자에서 KTUG Private Repository를 추가한다.\n패키지 설치: 패키지 관리자를 통해 jiwonlipsum 패키지를 검색하고 설치한다.\nLaTeX 문서에 적용: 설치가 완료되면, LaTeX 문서의 preamble(서문) 부분에 \\usepackage{jiwonlipsum}을 추가한다.\n텍스트 생성: 문서 내에서 \\jiwonlipsum 명령어를 사용하여 한글로 된 로렘 입숨 텍스트를 생성한다.\n\n$ tlmgr repository add http://ftp.ktug.org/KTUG/texlive/tlnet/ ktug\n$ tlmgr pinning add ktug \"*\"\n$ tlmgr install jiwonlipsum\ntlmgr.pl: package repositories\n        main = https://mirror.navercorp.com/CTAN/systems/texlive/tlnet (verified)\n        ktug = http://ftp.ktug.org/KTUG/texlive/tlnet/ (not verified: pubkey missing)\nFor more about verification, see https://texlive.info/verification.html.\n[1/1, ??:??/??:??] install: jiwonlipsum @ktug [245k]\nrunning mktexlsr ...\ndone running mktexlsr.\nrunning mtxrun --generate ...\ndone running mtxrun --generate.\ntlmgr.pl: package log updated: C:/texlive/2020/texmf-var/web2c/tlmgr.log\njiwonlipsum 패키지를 사용하여 한글로 된 채우기 텍스트 사례를 보여주는 예제다. 문서형식을 두 칼럼 형식 짧은 보고서(article) 형식으로 지정하고 나서, ‘NanumGothic’ 글꼴을 사용해서 한글을 표현하기 위한 준비를 한다. 제목, 저자, 수정일 정보를 포함한 제목 페이지를 만든 후, jiwonlipsum 패키지를 활용해 한 문단의 요약(abstract)과 ‘들어가며’ 섹션에 채우기 텍스트로 텍스트를 삽입한다.\n\n\n\\documentclass[twocolumn]{article}\n\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n\\usepackage{jiwonlipsum}\n\n\\title{멋진 \\LaTeX 제목 페이지}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\begin{abstract}\n\n\\jiwon[1]\n\n\\end{abstract}\n\n\\section{들어가며}\n\n\\jiwon\n\n\\end{document}\n\n\n\n\n\n한글 입숨 2단 문서 사례"
  },
  {
    "objectID": "document_class.html#korean-lipsum-install",
    "href": "document_class.html#korean-lipsum-install",
    "title": "\n14  문서 클래스\n",
    "section": "\n15.1 lipsum 팩키지 설치",
    "text": "15.1 lipsum 팩키지 설치\njiwonlipsum 팩키지는 KTUG Private Repository에 저장되어 있어 이를 설치한 후 한글 lipsum을 사용할 수 있다. jiwonlipsum 팩키지가 저장된 KTUG Private Repository 저장소를 활용하는 방식은 다음과 같다.\n\n$ tlmgr repository add http://ftp.ktug.org/KTUG/texlive/tlnet/ ktug\n$ tlmgr pinning add ktug \"*\"\n$ tlmgr install jiwonlipsum\ntlmgr.pl: package repositories\n        main = https://mirror.navercorp.com/CTAN/systems/texlive/tlnet (verified)\n        ktug = http://ftp.ktug.org/KTUG/texlive/tlnet/ (not verified: pubkey missing)\nFor more about verification, see https://texlive.info/verification.html.\n[1/1, ??:??/??:??] install: jiwonlipsum @ktug [245k]\nrunning mktexlsr ...\ndone running mktexlsr.\nrunning mtxrun --generate ...\ndone running mtxrun --generate.\ntlmgr.pl: package log updated: C:/texlive/2020/texmf-var/web2c/tlmgr.log"
  },
  {
    "objectID": "document_class.html#korean-lipsum-hw",
    "href": "document_class.html#korean-lipsum-hw",
    "title": "\n14  문서 클래스\n",
    "section": "\n15.2 lipsum 헬로월드",
    "text": "15.2 lipsum 헬로월드\n\\documentclass[]{article}\n\\usepackage{kotex}\n%\\usepackage{blindtext}\n\\usepackage{jiwonlipsum}\n\n%opening\n\\title{멋진 \\LaTeX 제목 페이지}\n\\author{이광춘}\n\\date{2021-03-03}\n\n\\begin{document}\n\n\\maketitle\n\n\\begin{abstract}\n\n%\\blindtext\n\\jiwon[1]\n\n\\end{abstract}\n\n\\section{들어가며}\n\n%\\Blindtext\n\\jiwon\n\n\\end{document}"
  },
  {
    "objectID": "document_class.html#문서-클래스",
    "href": "document_class.html#문서-클래스",
    "title": "\n14  문서 클래스\n",
    "section": "\n14.2 문서 클래스",
    "text": "14.2 문서 클래스\n\\(\\LaTeX\\) 문서 클래스(document class)로 article, report, book 이 기본으로 제공되는 문서 클래스다. KOMA-Script는 또다른 \\(\\LaTeX\\) 패키지 모음으로 기본 \\(\\LaTeX\\) 문서 클래스(article, report, book 등) 확장 버전으로, 주로 유럽에서 널리 사용되며, 유럽의 타이포그래피와 문서 규격에 더 적합하게 설계되었다.\n\nscrartcl: article 문서 클래스 확장이며, 과학 학술지, 프리젠테이션, 짧은 보고서, 프로그램 문서, 초대장 등에 쓰이며 1~30페이지 정도 분량을 갖는 문서 작성에 좋다. 추가적인 사용자 설정 옵션과 유럽 스타일 레이아웃을 지원한다.\nscrreprt: report 문서 클래스 확장이며 중간 길이 보고서나 학위 논문 작성에 적합하고, 대략 30~200 페이지 문서 작성에 좋다. scrartcl와 마찬가지로 추가적인 사용자 설정 옵션과 유럽 스타일 레이아웃을 제공한다.\nscrbook: book 문서 클래스 확장으로, 책이나 큰 프로젝트에 적합하고, 대략 200 페이지 이상 문서 작성에 적합하다. 양쪽 페이지 레이아웃과 추가적인 사용자 설정 옵션도 지원한다.\n\n\n\n\n\n\n\n기능\n      짧은 보고서(article)\n      보고서(report)\n      책(book)\n    \n\n\n명령어와 환경\n    \n\n\n장(Chapter) 명령어\n\n\n사용 불가\n\n\n사용 가능\n\n\n사용 가능\n\n\n\n\n부록(Appendix) 스타일링\n\n\n해당 없음\n\n\n부록 X\n\n\n부록 X\n\n\n\n\n부분(Parts)에 대한 새 페이지\n\n\n새 페이지 없음\n\n\n새 페이지\n\n\n새 페이지\n\n\n\n\n전문/본문/후문(Front/Main/Back matter)\n\n\n사용 불가\n\n\n사용 불가\n\n\n사용 가능\n\n\n\n\n요약(Abstract) 환경\n\n\n사용 가능\n\n\n사용 가능\n\n\n사용 불가\n\n\n\n기본 설정\n    \n\n\n양면 옵션(Twoside vs Oneside)\n\n\n단면(Oneside)\n\n\n단면(Oneside)\n\n\n양면(Twoside)\n\n\n\n\n열기 위치(Openright vs Openany)\n\n\n해당 없음\n\n\n열기 위치: 어디든(Openany)\n\n\n열기 위치: 오른쪽(Openright)\n\n\n\n\n페이지 스타일(Pagestyle)\n\n\n일반(Plain)\n\n\n일반(Plain)\n\n\n헤딩(Headings)\n\n\n\n\n제목 페이지(Titlepage)\n\n\n제목 페이지 없음\n\n\n제목 페이지 사용\n\n\n제목 페이지 사용\n\n\n\n\n최하위 섹션(Lowest-level sectioning)\n\n\n하위-하위 섹션(Subsubsection)\n\n\n하위 섹션(Subsection)\n\n\n하위 섹션(Subsection)\n\n\n\n\n상단 제목(Running headings)\n\n\n섹션과 하위 섹션\n\n\n장과 섹션\n\n\n장과 섹션\n\n\n\n\n번호 매김(Numbering scope)\n\n\n연속적\n\n\n장 단위\n\n\n장 단위\n\n\n\n\n참고문헌 표시(Bibliography heading)\n\n\nReferences\n\n\nBibliography\n\n\nBibliography\n\n\n\n\n\n\n\n\n14.2.1 짧은 보고서\n짧은 보고서는 article 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 짧은 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.\n\n\n\n\n\n\n\n\n\n14.2.2 보고서\n보고서는 report 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.\n\n\n\n\n\n\n\n\n\n14.2.3 책\n책은 book 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.\n\n\n\n\n\n\n\n\n\n14.2.4 한글문서 클래스\noblivoir 문서 클래스(documentclass)는 한글 문서 특성을 잘 반영하여 개발되었다. 다음과 같은 구문을 갇고 컴파일하게 되면 한글 문서형식을 갖는 PDF 파일을 얻게 된다."
  },
  {
    "objectID": "document_class.html#서지-데이터베이스",
    "href": "document_class.html#서지-데이터베이스",
    "title": "\n14  문서 클래스\n",
    "section": "\n14.3 서지 데이터베이스",
    "text": "14.3 서지 데이터베이스\n\\(\\LaTeX\\) 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 xelatex 명령을 사용하여 원본 \\(\\LaTeX\\) 코드를 컴파일하면 .aux와 .log 파일이 생성되고, biber 또는 bibtex 명령을 실행하여 참고문헌 정보를 처리하면서 .bbl 및 .blg 파일이 생성된다. 그 다음 다시 xelatex을 두 번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이 생성된다.\n\n\n\n\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#42f5e6,stroke:#333,stroke-width:2px;\n    style C fill:#f542e9,stroke:#333,stroke-width:2px;\n    style D fill:#42f54b,stroke:#333,stroke-width:2px;\n    style E fill:#f54242,stroke:#333,stroke-width:2px;\n\n    A[LaTeX&lt;br&gt;소스코드] --&gt;|xelatex| B{.aux,&lt;br&gt; .log}\n    B --&gt;|biber &lt;br&gt; bibtex| C{.bbl,&lt;br&gt; .blg}\n    C --&gt;|xelatex| D{.aux,&lt;br&gt; .log,&lt;br&gt;.pdf}\n    D --&gt;|xelatex| E[PDF]\n\n\n\n\n\n\n\n14.3.1 영문 참고문헌\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n% 참고문헌\n\\usepackage[backend=biber]{biblatex}\n\\addbibresource{references.bib}\n\n% 문서 전문\n\\title{Two-Sided Lipsum Example}\n\\author{John Lee}\n\\date{\\today}\n\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{Introduction}\n    \n    This is a citation~\\cite{dummy2023}.\n    \\lipsum[11] % 첫 번째 로렘 입숨 문단 생성  \n    \n    \\section{Main Body}\n    \\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n    \n    \\section{Conclusion}\n    This is a book citation~\\cite{ipsum2021}.\n    \\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\printbibliography\n    \n\\end{document}\n\n\n\n\n\n영문 참고문헌 사례\n\n\n\n\n14.3.2 국문 참고문헌\n\n\n\\documentclass[twocolumn]{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 채우기 텍스트 입숨 적용 ------------------\n\\usepackage{jiwonlipsum}\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=bibtex, style=numeric]{biblatex} % bibtex을 백엔드로 설정\n\\addbibresource{references.bib}\n\n\n% 문서의 제목, 저자, 날짜 설정\n\\title{한글 입숨 예제}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{서론}\n    \n    참고문헌을 연구를 했습니다.~\\cite{kim2023}\n    \\jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{본문}\n    또 영문 참고문헌 보고서를 연구했습니다.~\\cite{ipsum2021}\n    \\jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{결론}\n    마지막 연구했습니다.~\\cite{lee2021}\n    \\jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n한글 참고문헌 사례"
  },
  {
    "objectID": "components.html#참고문헌",
    "href": "components.html#참고문헌",
    "title": "\n11  문서 구성요소\n",
    "section": "\n11.6 참고문헌",
    "text": "11.6 참고문헌\n\\(\\LaTeX\\) 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 xelatex 명령을 사용하여 원본 \\(\\LaTeX\\) 코드를 컴파일하면 .aux와 .log 파일이 생성되고, biber 또는 bibtex 명령을 실행하여 참고문헌 정보를 처리하면서 .bbl 및 .blg 파일이 생성된다. 그 다음 다시 xelatex을 두 번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이 생성된다.\n\n\n\n\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#42f5e6,stroke:#333,stroke-width:2px;\n    style C fill:#f542e9,stroke:#333,stroke-width:2px;\n    style D fill:#42f54b,stroke:#333,stroke-width:2px;\n    style E fill:#f54242,stroke:#333,stroke-width:2px;\n\n    A[LaTeX&lt;br&gt;소스코드] --&gt;|xelatex| B{.aux,&lt;br&gt; .log}\n    B --&gt;|biber &lt;br&gt; bibtex| C{.bbl,&lt;br&gt; .blg}\n    C --&gt;|xelatex| D{.aux,&lt;br&gt; .log,&lt;br&gt;.pdf}\n    D --&gt;|xelatex| E[PDF]\n\n\n\n\n\n\n\n11.6.1 .bib 파일\n.bib 파일은 BibTeX “서지 데이터베이스”로 쿼토, R마크다운, 주피터 노트북, \\(\\LaTeX\\) 문서에서 참고문헌을 관리하는 데 사용된다. .bib 파일은 다양한 참고문헌(예: 논문, 책, 인터넷 자료 등)에 대한 메타데이터를 담고 있는데 제목, 저자, 출판일 등의 정보가 담겨있다.\n\\(\\LaTeX\\)으로 작성한 .tex 소스파일을 references.bib 서지 파일과 연결시켜 컴파일하여 .pdf 파일로 작업한다. 한가지 여기서 다루지 않는 사항으로 .csl 파일이 있다. .cls는 인용 스타일 언어(Citation Style Language) 파일로 XML 형식으로 작성되며, 참고문헌 서식규칙을 정의한다. 학술지, 출판사마다 각기 다른 참고문헌 스타일을 요구하기 때문에, .csl 파일에 다양한 스타일을 표현하다. 따라서, 참고문헌 콘텐츠가 담긴 .bib 파일과 참고문헌 스타일이 담긴 .cls 두파일이 멋진 참고문헌 출력을 위해 짝꿍처럼 함께 다닌다.\n다음 \\(\\LaTeX\\) 저작 파일은 서지 데이터가 담긴 references.bib 파일에 Kim2017과 xie2020r 두 개의 참고문헌이 들어있다.\n\\(\\LaTeX\\) 문서는 biblatex 패키지를 사용하여 이 references.bib 파일을 불러오고, \\cite 명령어로 특정된 참고문헌을 인용한다. 참고문헌 목록은 \\printbibliography[title=참고문헌] 명령어 출력되는데 title 옵션으로 참고문헌목록 제목을 “References”에서 “참고문헌”으로 변경하고 \\(\\LaTeX\\) 문서에서 인용된 참고문헌을 기본설정 .csl에 맞춰 출력한다. 만약, 특정 참고문헌 스타일을 반영하고자 한다면 \\(\\LaTeX\\) 파일에 .csl 파일을 지정하면 된다.\n\n\n\n.tex 소스파일\n\\documentclass{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % bibtex을 백엔드로 설정\n\\addbibresource{references.bib}\n\n\\begin{document}\n    \n    \\section{서론}\n    텍과 관련된 교육 현장에서의 활용에 대한 연구가 있습니다~\\cite{Kim2017}. \n    또한, R markdown에 대한 다양한 정보와 사용법이 소개된 책도 있습니다~\\cite{xie2020r}.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n.bib 서지 파일\n@article{Kim2017,  \n    author = {김영록},  \n    title = {교육 현장에서의 텍의 활용},  \n    journal = {TeX: 조판, 그 이상의 가능성},  \n    year = {2017}\n}\n\n@book{xie2020r,  \n    title={R markdown cookbook},  \n    author={Xie, Yihui and Dervieux, Christophe and Riederer, Emily},  \n    year={2020},  \n    publisher={CRC Press}\n}\n\n\n\n\n\n서식파일 참고문헌\n\n\n11.6.2 영문 참고문헌\n한글이 포함된 PDF 문서를 작성할 때 디버깅은 생각보다 복잡할 수 있다. 따라서 대개는 문서 기본 구조를 영어로 먼저 정확히 작동하는지 확인한 후, 한글로 전환하여 개발을 진행한다. 아래 \\(\\LaTeX\\) 문서 예시에서 전체적인 내용을 파악하기 쉽도록 lipsum 패키지로 텍스트를 채웠으며, 2단 편집과 참고문헌 관리 기능을 구현했다. biblatex 패키지와 \\addbibresource{references.bib} 명령어를 사용하여 참고문헌파일을 지정하고, 본문에서 \\cite 명령어를 통해 참고문헌을 인용했다. 마지막으로 \\printbibliography 명령어로 참고문헌 목록을 출력했다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n% 참고문헌\n\\usepackage[backend=biber]{biblatex}\n\\addbibresource{references.bib}\n\n% 문서 전문\n\\title{Two-Sided Lipsum Example}\n\\author{John Lee}\n\\date{\\today}\n\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{Introduction}\n    \n    This is a citation~\\cite{dummy2023}.\n    \\lipsum[11] % 첫 번째 로렘 입숨 문단 생성  \n    \n    \\section{Main Body}\n    \\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n    \n    \\section{Conclusion}\n    This is a book citation~\\cite{ipsum2021}.\n    \\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\printbibliography\n    \n\\end{document}\n\n\n\n\n\n영문 참고문헌 사례\n\n\n\n\n11.6.3 국문 참고문헌\n영문으로 작성한 작업 흐름을 그대로 이용할 수 있지만, 몇 가지 수정이 필요하다. 첫째, 영문 채우기 텍스트 패키지 ipsum을 jiwonlipsum으로 변경하여 한글 텍스트로 국문 문서임을 명확히 구성한다. 둘째, \\(\\LaTeX\\)에서 한글 글꼴을 적용하지 않으면 한글 표현이 깨지거나 전혀 출력되지 않을 수 있으므로, 한글 글꼴 적용 절차를 포함한다. 참고문헌 부제목이 영문 ’Reference’에서 ’참고문헌’으로 변경하여 기본적인 한글문서 외양을 확인한다.\n\n\n\\documentclass[twocolumn]{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 채우기 텍스트 입숨 적용 ------------------\n\\usepackage{jiwonlipsum}\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % biber 백엔드로 설정\n\\addbibresource{references.bib}\n\n\n% 문서의 제목, 저자, 날짜 설정\n\\title{한글 입숨 예제}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{서론}\n    \n    참고문헌을 연구를 했습니다.~\\cite{kim2023}\n    \\jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{본문}\n    또 영문 참고문헌 보고서를 연구했습니다.~\\cite{ipsum2021}\n    \\jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{결론}\n    마지막 연구했습니다.~\\cite{lee2021}\n    \\jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n한글 참고문헌 사례"
  }
]