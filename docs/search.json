[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 디지털 글쓰기",
    "section": "",
    "text": "서문\n역사적 사명을 …"
  },
  {
    "objectID": "fonts.html#font-coding",
    "href": "fonts.html#font-coding",
    "title": "\n1  글꼴\n",
    "section": "\n1.2 R 코딩 글꼴",
    "text": "1.2 R 코딩 글꼴\n문서를 위해 작성하는데 사용되는 글꼴과 R 코딩을 위해 사용되는 글꼴은 차이가 난다. 왜냐하면 R 코딩에 사용되는 글꼴은 가독성이 좋아야하고 디버깅에 용이해야 된다. 영어는 consolas 글꼴을 많이 사용하는데 무료가 아니다. 그래서 consolas에서 영감을 받은 SIL 오픈 폰트 라이선스를 따르는 Inconsolata가 R 코딩에 많이 사용되고 있다. 하지만, R코드를 작성할 때 주석을 한글로 달거나 R마크다운 작업을 할 경우 유사한 기능을 하는 한글 글꼴이 필요하다.\n\n네이버 나눔고딕 코딩글꼴\nD2 Coding 글꼴\n\n“네이버 나눔고딕 코딩글꼴”과 “D2 Coding 글꼴”을 설치하고 나서 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창에서 Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다.\n\n\nD2 코딩폰트 설치"
  },
  {
    "objectID": "fonts.html#r-viz-font",
    "href": "fonts.html#r-viz-font",
    "title": "\n1  글꼴\n",
    "section": "\n1.3 ggplot 시각화 글꼴",
    "text": "1.3 ggplot 시각화 글꼴\nextrafont 팩키지에서 font_import() 함수로 운영체제(윈도우/리눅스)에 설치된 글꼴을 R로 가져온다. 그리고 나서 loadfonts() 함수를 사용해서 설치된 글꼴을 사용하는 작업흐름을 따르게 된다.\n\nlibrary(extrafont)\nfont_import(pattern = \"D2\")\n\nImporting fonts may take a few minutes, depending on the number of fonts and the speed of the system.\nContinue? [y/n] y\nScanning ttf files in C:\\Windows\\Fonts ...\nExtracting .afm files from .ttf files...\nC:\\Windows\\Fonts\\D2Coding-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2Coding-Ver1.3.2-20180524\nC:\\Windows\\Fonts\\D2CodingBold-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2CodingBold-Ver1.3.2-20180524\nC:\\Windows\\Fonts\\MOD20.TTF =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/MOD20\nFound FontName for 3 fonts.\nScanning afm files in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics\nWriting font table in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/fonttable.csv\nWriting Fontmap to C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/Fontmap...\n\nfont_import(pattern = \"Nanum\")\n\n\n1.3.1 ggplot 한글 글꼴 사례\nextrafont 패키지 loadfonts() 함수를 사용해서 ggplot에서 적용시킬 수 있는 글꼴을 불러냈다. R 내장 데이터셋 iris를 사용하여 나눔글꼴 “Nanum Pen Script”을 기본 글꼴로 적용시켰다.\n\nlibrary(tidyverse)\nlibrary(extrafont)\nloadfonts() # 로컬 PC 에서 설치된 글꼴을 불러냄!!!\n\niris %&gt;% \n  ggplot(aes(x=Sepal.Length, y=Petal.Length, color=Species)) +\n    geom_point()+\n    labs(title=\"붓꽃 데이터 한글 글꼴 적용\", color=\"붓꽃 종류\") +\n    theme_minimal(base_family = \"Nanum Pen Script\") +\n    theme(legend.position = \"top\")"
  },
  {
    "objectID": "fonts.html#font-showtext",
    "href": "fonts.html#font-showtext",
    "title": "\n1  글꼴\n",
    "section": "\n1.4 showtext 패키지 1\n",
    "text": "1.4 showtext 패키지 1\n\nextrafont 패키지를 통해 한자를 포함한 한글을 처리할 수 있었으나, extrafont는 트루타입폰트(.ttf)를 PDF 그래픽 장치에 초점을 맞춰 개발이 되었다. 따라서, 데이터과학 최종산출물이 PDF 형태 책이 아닌 경우 여러가지 면에서 다양한 한글 글꼴을 표현하는데 있어 한계가 있다.\n새로 개발된 showtext 팩키지는 Ghostscript같은 외부 소프트웨어를 활용하지 않고도 다양한 (그래픽) 글꼴을 지원한다. showtext로 R 그래프를 생성할 때, 다양한 글꼴(TrueType, OpenType, Type 1, web fonts 등)을 지원한다.\n과거 PDF와 같은 책형태로 정보를 공유하고 전달하는 방식이 주류를 이뤘다면 인터넷 등장 이후 웹으로 정보 생성과 소비가 주류로 떠오르게 되면서 글꼴에도 변화가 생겼다. 가까운 미래에는 웹을 우선시하는 글꼴이 대세를 이룰 것으로 보인다.\n\n\nshowtext 글꼴\n\n사용자가 그래프에 텍스트를 넣기 위해 R 함수에서 text()를 호출할 때 showtext가 활성화 되어 있으면 showtext 팩키지 text() 함수를 호출해서 그래픽 혹은 이미지 파일에 텍스트를 표현하고 그렇지 않는 경우는 디폴트 장치함수 text() 함수를 호출하게 되어 있다.\n내부적으로 상세 작동 로직은 글꼴 위치를 파악해서 글리프(glyph) 정보를 추출하고 비트맵 형식, 벡터그래픽 형식에 따라서 비트맵일 경우 raster() 장치함수를 호출하고, 벡터그래픽인 경우 path() 장치함수를 호출해서 기능을 수행한다.\n\n1.4.1 R 설치 글꼴 확인\nextrafont 팩키지 loadfonts() 함수를 통해 .ttf 파일 정보를 확인한다. 현재 구글 글끌 페이지에서 많은 한글 글꼴을 지원하지 않고 있다. 구글에서 전세계 글꼴을 지원하다보 동아시아 3국 대상으로 지원되는 글꼴은 적은 것으로 보인다.\n\n# 0. 환경설정 --------------------------------------------------------------------------\nlibrary(tidyverse)\nlibrary(showtext) # 글꼴, install.packages(\"showtext\")\nlibrary(extrafont)\nloadfonts()\n\n\n1.4.2 ggplot 글꼴 적용\n한글 글꼴을 바로 적용하기에 앞서 showtext 패키지 포함된 영문글꼴 적용 사례를 먼저 돌려보자. ggplot 그래픽에 적용되는 showtext 활용 기본 작업흐름은 다음과 같다.\n\n글꼴을 적재한다.\n그래픽 장치를 연다\n\nshowtext를 통해 텍스트를 표시한다고 지정한다.\n그래프를 그린다.\n장치를 닫는다.\n\n\nlibrary(tidyverse)\nlibrary(showtext)\n\n# ggplot 그래픽 ----------------------------\n\ndat &lt;- data.frame(cond = factor(rep(c(\"A\",\"B\"), each=200)), \n                  rating = c(rnorm(200),rnorm(200, mean=.8)))\n\nfont_add_google(\"Schoolbell\", \"bell\") # 글꼴 적재\n\nshowtext.begin() # 그래픽 장치 열기\n\nggplot(dat, aes(x=rating)) + \n  geom_histogram(binwidth=.5)+ \n　annotate(\"text\", 1, 2.1, family = \"bell\", size = 15, color=\"red\", label = \"histogram\")\n\n\n\n\n\n\nshowtext.end() # 그래픽 장치 닫기"
  },
  {
    "objectID": "fonts.html#font-showtext-korean-example-ttf",
    "href": "fonts.html#font-showtext-korean-example-ttf",
    "title": "\n1  글꼴\n",
    "section": "\n1.5 로컬 글꼴 적용",
    "text": "1.5 로컬 글꼴 적용\n로컬 컴퓨터에 저장된 .ttf 파일을 사용자 지정해서 가져온 후 이를 ggplot에 반영하여 한글을 R 그래프에 적용하는 것도 가능하다. showtext는 extrafont 보다 나중에 개발되어 extrafont가 로컬 컴퓨터에 설치된 글꼴을 ggplot에 구현되는데 전력을 다했다면 showtext는 이를 발판으로 나중에 개발되어 구글 폰트와 같은 인터넷 글꼴과 최근 웹출판에 대한 개념도 넣어 개발된 것이 차이점이다.\n\n# ３. 한글 그래픽 --------------------------------------------------------------------------\n## 나눔펜　스크립트\nfont_add(\"NanumBarunGothic\", \"NanumBarunGothic.ttf\")\n\nshowtext.auto()\n\np &lt;- ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +\n  theme(axis.title = element_blank(), axis.ticks = element_blank(),\n        axis.text = element_blank()) +\n  annotate(\"text\", 1, 1.1, family = \"NanumBarunGothic\", size = 15, color=\"red\",\n           label = \"한글 사랑\") +\n  annotate(\"text\", 1, 0.9, label = 'korean for \"Hello, world!\"',\n           family = \"NanumBarunGothic\", size = 12)\n\nprint(p)"
  },
  {
    "objectID": "fonts.html#r-글꼴",
    "href": "fonts.html#r-글꼴",
    "title": "\n1  글꼴\n",
    "section": "\n1.1 R 글꼴",
    "text": "1.1 R 글꼴\n다각형을 그리는 path() 및 polygon(), 비트맵 이미지를 표시하는 raster(), 텍스트를 표시하는 text() 또는 textUTF8() 등을 통해 R에서 시각적 그래픽 요소를 구현하고 있다.\nR을 단순히 통계 언어로 생각하지 말고 적용범위를 확대해서 활용하면 데이터 과학 산출물을 다양한 전자문서로 제작하여 커뮤니케이션 할 수 있다. PDF, HTML, 워드 등 문서 뿐만 아니라, 파워포인트 같은 발표자료를 슬라이드로 제작하여 배포할 수 있다. 그래프 문법(Grammar of Graphics)에 따라 ggplot 시각화를 산출물에도 다양한 글꼴(font)을 반영하여 좀더 관심을 끌 수 있는 그래프 제작도 가능하다. 데이터 과학자나 개발자 관점에서도 통합개발환경(IDE)이 필요한데 개발과 저작에 집중할 수 있는 글꼴을 지정하여 활용할 경우 생산성도 높일 수 있고 좀더 쾌적한 환경에서 개발을 진행할 수 있다.\nR 스크립트 작성을 위한 글꼴과 그래프에 한글 글꼴(font)을 적용한다. ggplot을 비롯한 시각화를 위해 extrafont와 showtext 패키지를 활용하여 적절한 한글 글꼴을 사용할 뿐만 아니라 코딩 개발할 때 R 스크립트(.R) 및 R마크다운(.Rmd)에서도 적절한 한글글꼴 사용을 위해서 코딩관련 글꼴도 설치한다.\n기본적인 작업흐름은 운영체제에 먼저 외부에서 가져온 폰트를 설치한다. 그리고 나서 extrafont 팩키지 font_import() 함수를 사용해서 폰트를 R에서 불러 사용할 수 있도록 설치한다. 그리고 나서 loadfonts() 함수를 사용해서 글꼴을 ggplot등에서 불러 사용한다. 구글 글꼴을 사용하고자 할 경우 showtext 패키지를 사용해서 로컬 컴퓨터에 설치하여 적용한다.\n\n\nR 폰트/글꼴 설치"
  },
  {
    "objectID": "fonts.html#글꼴-패키지",
    "href": "fonts.html#글꼴-패키지",
    "title": "\n1  글꼴\n",
    "section": "\n1.6 글꼴 패키지",
    "text": "1.6 글꼴 패키지\n로컬 컴퓨터에 설치된 R 관련 폰트 패키지를 확인할 수 있다.\n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n패키지명\n      버전\n      날짜\n      URL\n    \n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts"
  },
  {
    "objectID": "fonts.html#작업흐름",
    "href": "fonts.html#작업흐름",
    "title": "\n1  글꼴\n",
    "section": "\n1.7 작업흐름",
    "text": "1.7 작업흐름\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 모든 사용자용으로 설치한다.\n\n\n윈도우 나눔스퀘어 글꼴 설치\n\nfs 패키지 file_exists() 함수로 NanumSquare.ttf 파일이 존재함을 확인한다. 그리고 나서, font_import() 명령어로 글꼴을 설치한다. 경로(path =)를 지정하는 방식과 pattern =을 지정하는 방식이 있는데 둘 중 글꼴을 설치되는 방식으로 진행한다.\n\nlibrary(extrafont)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(paths = \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\n\n동일한 방식으로 마루부리 글꼴도 설치한다.\n\nfont_import(pattern = \"MaruBuri-ExtraLight.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Regular.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Bold.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Light.ttf\", prompt = FALSE)\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nextrafont::loadfonts(\"win\", quiet = TRUE)\n\navailable_fonts &lt;- extrafont::fonts()\n\navailable_fonts[str_detect(available_fonts, \"Maru|Nanum\")]\n\n [1] \"NanumGothic\"                 \"NanumGothicExtraBold\"       \n [3] \"NanumGothic Light\"           \"MaruBuri Bold\"              \n [5] \"MaruBuri Light\"              \"MaruBuri Regular\"           \n [7] \"MaruBuri SemiBold\"           \"NanumBarunGothic\"           \n [9] \"NanumBarunGothic Light\"      \"NanumBarunGothic UltraLight\"\n[11] \"NanumBarunpen\"               \"NanumBarunpen Bold\"         \n[13] \"NanumSquare_ac Bold\"        \n\nggplot_fonts_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n    theme_minimal()  +\n    theme(\n      plot.title = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x  = element_text(family = \"MaruBuri\"),\n      axis.title.y  = element_text(family = \"MaruBuri\"),\n      axis.text.x   = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y   = element_text(family = \"MaruBuri\", size = 11),\n      legend.title  = element_text(family = \"MaruBuri\", size=13),\n      plot.caption = element_text(family = \"NanumSquare\", color = \"gray20\")\n    ) +\n    annotate(\n      \"text\", x = 200, y = 5000, label = \"회귀분석 모형\", \n      hjust = 0.5, size = 8, color = \"steelblue\",\n      family = \"MaruBuri\", face = \"bold\"\n    ) +\n    guides(shape = \"none\")\n\nggplot_fonts_gg\n\n\n\n\n\n\n# ragg::agg_jpeg(\"images/ggplot_fonts_gg.jpeg\",\n#               width = 10, height = 7, units = \"in\", res = 600)\n# ggplot_fonts_gg\n# dev.off()\n\n\n\nggplot 다른 한글 글꼴 적용"
  },
  {
    "objectID": "fonts.html#색상-팔레트",
    "href": "fonts.html#색상-팔레트",
    "title": "\n1  글꼴\n",
    "section": "\n1.8 색상 팔레트",
    "text": "1.8 색상 팔레트\n\nlibrary(wesanderson)\n\n\npal_name &lt;- names(tvthemes:::stevenUniverse_palette)\n\nshow_all_pal &lt;- function(pal_name) {\n  exp_pal &lt;- paste0(\"tvthemes:::stevenUniverse_palette$\", pal_name)\n  \n  pal_call &lt;- eval(expr = parse(text = exp_pal))\n  \n  return(scales::show_col(pal_call))\n}\n\npurrr::walk(pal_name, ~ show_all_pal(pal_name = .x))\n\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지다. 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer)\n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\n\n\n\n\n\n\ndev.off()\n\nnull device \n          1 \n\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄의 수를 집계한 다음, Torgersen 섬의 이름을 NA(결측값)으로 변경한다. 변경된 데이터를 바탕으로 ggplot2 패키지를 사용해 막대 그래프를 생성하며, 섬의 이름을 x축에, 각 섬의 펭귄 수를 y축에 배치하고, 각 막대는 해당 섬의 이름에 따라 다른 색상으로 채워운다. 결측값(여기서는 Torgersen 섬)은 회색으로 표시되며, 나머지 색상은 RColorBrewer의 “Accent” 팔레트를 사용하여 색을 채워넣는다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")"
  },
  {
    "objectID": "fonts.html#정당-색상",
    "href": "fonts.html#정당-색상",
    "title": "\n1  글꼴\n",
    "section": "\n1.9 정당 색상",
    "text": "1.9 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\")"
  },
  {
    "objectID": "fonts.html#이미지-색상",
    "href": "fonts.html#이미지-색상",
    "title": "\n1  글꼴\n",
    "section": "\n1.10 이미지 → 색상",
    "text": "1.10 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 2\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)"
  },
  {
    "objectID": "colors.html#color-mechanism",
    "href": "colors.html#color-mechanism",
    "title": "\n2  색상\n",
    "section": "\n2.1 시각화 메커니즘 1\n",
    "text": "2.1 시각화 메커니즘 1\n\n크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다.\n따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다.\n\n\n시각적 인지 메커니즘\n\n\n2.1.1 16진수 RGB 표색법\n양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 전문분야를 갖고 있으며 특히, ColorBrewer 으로 알려진 색생체계는 웹, 출판, 색맹을 고려하여 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 시각화를 할 때 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자.\n\nlibrary(RColorBrewer)\nbrewer.pal(n = 8, name = \"Dark2\")\n\n[1] \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\"\n[8] \"#666666\"\n\n\n# 기호는 관례로 붙이는 것이고, 16진수 문자열을 다음과 같이 파싱한다: #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다.\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다.\n\\[ 9E = 9 * 16^1 + 14 * 16^0 = 9 * 16 + 14 = 158 \\]\n무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다.\n도움이 되는 기억해야될 중요한 사례가 다음에 나타나 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nblue\n#0000FF\n0\n0\n255\n\n\ngreen\n#00FF00\n0\n255\n0\n\n\nred\n#FF0000\n255\n0\n0\n\n\n\n\n다음에 흑백, 회색을 표현한 것이 나타나 있다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nwhite, gray100\n#FFFFFF\n255\n255\n255\n\n\ngray67\n#ABABAB\n171\n171\n171\n\n\ngray33\n#545454\n84\n84\n84\n\n\nblack, gray0\n#000000\n0\n0\n0\n\n\n\n\n“gray” 회색으로 치환하게 되면, “gray”를 보게되는 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다.\n\n\nR에서 색상을 지정하는 방법\n\n\n양의 정수: palette()함수로 조작하거나 검색한 현재 색상 팔레트에 인덱스를 사용.\n\n색상 명칭: colors() 함수로 검색된 색상\n\n16진수 문자열: 16진수로 구성된 3개조에 추가해서, 알파 투명도를 나타내는 네번째 채널을 넣어 16진수 4개조로 구성된 생상표로 확장하기도 한다.\n\n\nrgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다."
  },
  {
    "objectID": "colors.html#dataviz-mechanism-hcl",
    "href": "colors.html#dataviz-mechanism-hcl",
    "title": "\n2  색상\n",
    "section": "\n2.2 RGB 색상모형 대안 - HCL\n",
    "text": "2.2 RGB 색상모형 대안 - HCL\n\nRGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계를 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다.\n색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다.\n사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다.2 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다.\n\n\nHCL 색상모형의 세가지 차원\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다.\n\n\n저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다.\n위캠의 ggplot2 책에 나온 6.6 그림이 HCL 색공간을 이해하는데 도움이 된다.\n\n\nggplot2 HCL 색공간\n\n위캠 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다.\ncolorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다.\n인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다.\n\n“Why Should Engineers and Scientists Be Worried About Color?”"
  },
  {
    "objectID": "colors.html#viz-printer-cmyk",
    "href": "colors.html#viz-printer-cmyk",
    "title": "\n2  색상\n",
    "section": "\n2.3 프린터 색상모형: CMYK 3 4\n",
    "text": "2.3 프린터 색상모형: CMYK 3 4\n\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다.\n학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다.\nRGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\npdf(\"data/color_rgb.pdf\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()\n\n\n\n\n\n\nCMYK 색상 출력\n\npdf(\"data/color_cmyk.pdf\", colormodel = \"cmyk\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()"
  },
  {
    "objectID": "colors.html#dataviz-color-brewer-viridis",
    "href": "colors.html#dataviz-color-brewer-viridis",
    "title": "\n2  색상\n",
    "section": "\n2.4 RColorBrewer 와 viridis\n",
    "text": "2.4 RColorBrewer 와 viridis\n\n\n2.4.1 RColorBrewer\n색상선택이 가장 논란이 많고, 이리저리 만지작 거리면서 정말 많은 시간을 보내는 분야다. 지리학자이며 생상 전문가 Cynthia Brewer 교수가 출판과 웹에서 사용되는 색상표를 제작했고, 이는 RColorBrewer 팩키지에 반영되어 있다. 팩키지를 설치하고 사용하면 된다. 연관된 전체 팔레트를 살펴보는 명령어는 display.brewer.all() 이다.\n\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\ndisplay.brewer.all()\n\n\n\n\n\n\n\n팔레트는 종류가 많지만 다음 세가지 범주에 속한다. 위에서 아래부터 다음과 같다.\n\n\n순차적(sequential) : 낮은 것에서 높은 것으로 한쪽 극단이 흥미롭고 반대쪽 극단이 재미없는 것을 시각화하는데 매우 좋다. 예를 들어 p-값, 상관계수 (주의: 상관계수 1 이 흥미로운 것은 양수를 가정했다)\n\n정량적(quantitative) : 순서가 없는 범주형 자료를 시각화할 때 유용하다. 예를 들어, 국가나 대륙. 특수한 “쌍을 이룬” 팔레트가 있다; 예를 들어, 곡물 밀 유형같이 실험이 아닌 요인, 실험군과 대조군 같은 이진 실험 요인.\n\n발산하는(diverging) : 극단의 음수에서 극단의 양수까지 범위를 같는 것을 시각화하는데 유용한다. 이런 데이터는 극단의 값이 중간에 위치한 덜 흥미로운 지점을 지난다. 예를 들어, t-통계량, z-점수, 상관계수가 이에 속한다.\n\n명칭을 명세해서 RColorBrewer 팔렛트 하나만 볼 수 있다.\n\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n\n\n\n\n\n\n\n\n2.4.2 viridis\n2015년 Stéfan van der Walt 와 Nathaniel Smith는 파이썬 matplotlib 팩키지에 사용될 새로운 색상 지도를 설계했고, SciPy 2015에서 발표했다. viridis 팩키지로 인해 R에 4가지 신규 팔레트가 추가되었다. CRAN과, GitHub에서 팩키지를 만날 수 있다.\n\n\nviridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색망을 갖는 독자도 올바르게 지각될 수 있도록 설계되었다.\n\n아직 나온지 얼마되지 않아서, 자세한 사항은 viridis 팩키지를 설치하고 소품문을 읽고 직접 경험하기 바란다.\n\n2.4.3 색맹을 갖는 사람\ndichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다.\n\nlibrary(dichromat) # install.packages(\"dichromat\")\n\ncolorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다.\n\n\n\n\n\n\n\n\ndichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹으로 표현되는 것이다.[@rogowitz1996ibm]\n\npal_name &lt;- names(tvthemes:::stevenUniverse_palette)\n\nshow_all_pal &lt;- function(pal_name) {\n  exp_pal &lt;- paste0(\"tvthemes:::stevenUniverse_palette$\", pal_name)\n  \n  pal_call &lt;- eval(expr = parse(text = exp_pal))\n  \n  return(scales::show_col(pal_call))\n}\n\npurrr::walk(pal_name, ~ show_all_pal(pal_name = .x))\n\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지다. 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer)\n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\n\n\n\n\n\n\ndev.off()\n\nnull device \n          1 \n\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄의 수를 집계한 다음, Torgersen 섬의 이름을 NA(결측값)으로 변경한다. 변경된 데이터를 바탕으로 ggplot2 패키지를 사용해 막대 그래프를 생성하며, 섬의 이름을 x축에, 각 섬의 펭귄 수를 y축에 배치하고, 각 막대는 해당 섬의 이름에 따라 다른 색상으로 채워운다. 결측값(여기서는 Torgersen 섬)은 회색으로 표시되며, 나머지 색상은 RColorBrewer의 “Accent” 팔레트를 사용하여 색을 채워넣는다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")"
  },
  {
    "objectID": "colors.html#정당-색상",
    "href": "colors.html#정당-색상",
    "title": "\n2  색상\n",
    "section": "\n2.5 정당 색상",
    "text": "2.5 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\")"
  },
  {
    "objectID": "colors.html#이미지-색상",
    "href": "colors.html#이미지-색상",
    "title": "\n2  색상\n",
    "section": "\n2.6 이미지 → 색상",
    "text": "2.6 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)"
  },
  {
    "objectID": "themes.html#테마-패키지",
    "href": "themes.html#테마-패키지",
    "title": "\n3  테마\n",
    "section": "\n3.1 테마 패키지",
    "text": "3.1 테마 패키지\nggplot2에 기본으로 제공되는 theme이 9개가 있어, 각 테마별로 시각화해보고 추후 가장 적합한 그래프를 선정한다. 먼저, 각 테마를 달리 적용하여 비교할 수 있는 기본 ggplot 그래프를 준비한다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nbase_penguins_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"기본 테마\",\n      subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n    ) +\n    guides(shape = \"none\") +\n    theme(legend.position = c(0.90, 0.15))\n\nbase_penguins_gg\n\n\n\n\n\n\n\n펭귄 데이터셋을 사용하여 물갈퀴 길이와 체중 사이의 관계를 시각화하는 그래프를 draw_themes() 함수로 테마를 달리 적용하여 ggplot 그래프를 생성한 후에 리스트 객체로 저장한다.\n다양한 테마를 draw_themes() 함수에 인자로 넘기기 위해 themes_name과 themes_vector에 테마명과 테마 함수를 저장장 한 후 map2() 함수로 테마를 달리한 ggplot 그래프를 저장한다. 마지막으로, patchwork::wrap_plots() 함수를 사용하여 모든 그래프를 결합하여 하나의 그래프로 출력한다.\n\ndraw_themes &lt;- function(theme_name, theme_choice) {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = theme_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_choice() +\n      theme(legend.position = c(0.90, 0.15))    \n}\n\n## 테마명과 벡터\nthemes_name &lt;- c(\"theme_gray\", \"theme_bw\", \"theme_linedraw\", \n                 \"theme_light\", \"theme_dark\", \"theme_minimal\", \"theme_classic\", \n                 \"theme_void\", \"theme_test\")\n\nthemes_vector &lt;- c(theme_gray , theme_bw , theme_linedraw , \n                  theme_light , theme_dark , theme_minimal , theme_classic , \n                  theme_void , theme_test )\n\ntheme_output &lt;- map2(themes_name, themes_vector, draw_themes)\n\npatchwork::wrap_plots(theme_output)\n\n\n\n\n\n\n\n\n3.1.1 hrbrthemes\n\n밥 루디스가 제작한 hrbrthemes 테마 패키지는 특히 텍스트가 많은 비즈니스 유형의 프레젠테이션에 적합한 테마와 테마 구성 요소를 제공한다.\n\nlibrary(hrbrthemes)\n\nhrbr_themes_name &lt;- c(\"theme_ipsum\", \"theme_ipsum_ps\", \"theme_ipsum_es\", \"theme_ipsum_rc\", \"theme_ipsum_ps\", \"theme_ipsum_pub\", \"theme_ipsum_tw\", \"theme_modern_rc\", \"theme_ft_rc\")\n\nhrbr_themes_vector &lt;- c(theme_ipsum, theme_ipsum_ps, theme_ipsum_es, theme_ipsum_rc, theme_ipsum_ps, theme_ipsum_pub, theme_ipsum_tw, theme_modern_rc, theme_ft_rc)\n\nhrbr_theme_output &lt;- map2(hrbr_themes_name, hrbr_themes_vector, draw_themes)\n\npatchwork::wrap_plots(hrbr_theme_output)\n\n\n\n\n\n\n\n\n3.1.2 ggthemes\n\n제프리 아놀드(Jeffrey Arnold)가 제작한 ggthemes 테마 패키지는 소프트웨어, 데이터 시각화 선구자 및 다양한 곳에서 영감을 얻은 다양한 테마를 제공한다.\n\nlibrary(ggthemes)\n\nggthemes_name &lt;- c(\"theme_base()\",\"theme_calc()\",\"theme_clean()\",\"theme_economist()\", \"theme_economist_white()\",\"theme_excel()\",\"theme_excel_new()\",\"theme_few()\",\"theme_fivethirtyeight()\",\"theme_foundation()\",\"theme_gdocs()\",\"theme_hc()\",\"theme_igray()\",\"theme_map()\",\"theme_pander()\",\"theme_solarized_2()\",\"theme_solid()\",\"theme_stata()\",\"theme_tufte()\",\"theme_wsj()\")\n\nggthemes_vector &lt;- c(theme_base, theme_calc, theme_clean, theme_economist, theme_economist_white, theme_excel, theme_excel_new, theme_few, theme_fivethirtyeight, theme_foundation, theme_gdocs, theme_hc, theme_igray, theme_map, theme_pander, theme_solarized_2, theme_solid, theme_stata, theme_tufte, theme_wsj)\n\nggtheme_output &lt;- map2(ggthemes_name, ggthemes_vector, draw_themes)\n\npatchwork::wrap_plots(ggtheme_output)\n\n\n\n\n\n\n\n\n3.1.3 wesanderson\n\n웨스 앤더슨(Wes Anderson) 영화의 독특하고 눈에 띄는 스타일을 기반으로 한 색상 팔레트를 제공하는 패키지다.\n\nlibrary(wesanderson)\n\ndraw_wesanderson &lt;- function(palette_name, wesanderson_palette =\"Darjeeling1\") {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = palette_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_minimal() +\n      theme(legend.position = c(0.90, 0.15)) +  \n      scale_color_manual(values= wes_palette(wesanderson_palette, n = 3))\n}\n\nwes_theme_output &lt;- map2(names(wes_palettes), names(wes_palettes), draw_wesanderson)\n\npatchwork::wrap_plots(wes_theme_output)"
  },
  {
    "objectID": "themes.html#자체-제작",
    "href": "themes.html#자체-제작",
    "title": "\n3  테마\n",
    "section": "\n3.2 자체 제작",
    "text": "3.2 자체 제작\n설치한 한글 글꼴과 색상을 매칭하여 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다.\n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  # ggthemes::theme_tufte() +\n  theme_minimal() +\n    \n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()"
  },
  {
    "objectID": "themes.html#그래픽-테마",
    "href": "themes.html#그래픽-테마",
    "title": "\n3  테마\n",
    "section": "\n3.1 그래픽 테마",
    "text": "3.1 그래픽 테마\nggplot2에 기본으로 제공되는 theme이 9개가 있어, 각 테마별로 시각화해보고 추후 가장 적합한 그래프를 선정한다. 먼저, 각 테마를 달리 적용하여 비교할 수 있는 기본 ggplot 그래프를 준비한다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nbase_penguins_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"기본 테마\",\n      subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n    ) +\n    guides(shape = \"none\") +\n    theme(legend.position = c(0.90, 0.15))\n\nbase_penguins_gg\n\n\n\n\n\n\n\n펭귄 데이터셋을 사용하여 물갈퀴 길이와 체중 사이의 관계를 시각화하는 그래프를 draw_themes() 함수로 테마를 달리 적용하여 ggplot 그래프를 생성한 후에 리스트 객체로 저장한다.\n다양한 테마를 draw_themes() 함수에 인자로 넘기기 위해 themes_name과 themes_vector에 테마명과 테마 함수를 저장장 한 후 map2() 함수로 테마를 달리한 ggplot 그래프를 저장한다. 마지막으로, patchwork::wrap_plots() 함수를 사용하여 모든 그래프를 결합하여 하나의 그래프로 출력한다.\n\ndraw_themes &lt;- function(theme_name, theme_choice) {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = theme_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_choice() +\n      theme(legend.position = c(0.90, 0.15))    \n}\n\n## 테마명과 벡터\nthemes_name &lt;- c(\"theme_gray\", \"theme_bw\", \"theme_linedraw\", \n                 \"theme_light\", \"theme_dark\", \"theme_minimal\", \"theme_classic\", \n                 \"theme_void\", \"theme_test\")\n\nthemes_vector &lt;- c(theme_gray , theme_bw , theme_linedraw , \n                  theme_light , theme_dark , theme_minimal , theme_classic , \n                  theme_void , theme_test )\n\ntheme_output &lt;- map2(themes_name, themes_vector, draw_themes)\n\npatchwork::wrap_plots(theme_output)\n\n\n\n\n\n\n\n\n3.1.1 hrbrthemes\n\n밥 루디스가 제작한 hrbrthemes 테마 패키지는 특히 텍스트가 많은 비즈니스 유형의 프레젠테이션에 적합한 테마와 테마 구성 요소를 제공한다.\n\nlibrary(hrbrthemes)\n\nhrbr_themes_name &lt;- c(\"theme_ipsum\", \"theme_ipsum_ps\", \"theme_ipsum_es\", \"theme_ipsum_rc\", \"theme_ipsum_ps\", \"theme_ipsum_pub\", \"theme_ipsum_tw\", \"theme_modern_rc\", \"theme_ft_rc\")\n\nhrbr_themes_vector &lt;- c(theme_ipsum, theme_ipsum_ps, theme_ipsum_es, theme_ipsum_rc, theme_ipsum_ps, theme_ipsum_pub, theme_ipsum_tw, theme_modern_rc, theme_ft_rc)\n\nhrbr_theme_output &lt;- map2(hrbr_themes_name, hrbr_themes_vector, draw_themes)\n\npatchwork::wrap_plots(hrbr_theme_output)\n\n\n\n\n\n\n\n\n3.1.2 ggthemes\n\n제프리 아놀드(Jeffrey Arnold)가 제작한 ggthemes 테마 패키지는 소프트웨어, 데이터 시각화 선구자 및 다양한 곳에서 영감을 얻은 다양한 테마를 제공한다.\n\nlibrary(ggthemes)\n\nggthemes_name &lt;- c(\"theme_base()\",\"theme_calc()\",\"theme_clean()\",\"theme_economist()\", \"theme_economist_white()\",\"theme_excel()\",\"theme_excel_new()\",\"theme_few()\",\"theme_fivethirtyeight()\",\"theme_foundation()\",\"theme_gdocs()\",\"theme_hc()\",\"theme_igray()\",\"theme_map()\",\"theme_pander()\",\"theme_solarized_2()\",\"theme_solid()\",\"theme_stata()\",\"theme_tufte()\",\"theme_wsj()\")\n\nggthemes_vector &lt;- c(theme_base, theme_calc, theme_clean, theme_economist, theme_economist_white, theme_excel, theme_excel_new, theme_few, theme_fivethirtyeight, theme_foundation, theme_gdocs, theme_hc, theme_igray, theme_map, theme_pander, theme_solarized_2, theme_solid, theme_stata, theme_tufte, theme_wsj)\n\nggtheme_output &lt;- map2(ggthemes_name, ggthemes_vector, draw_themes)\n\npatchwork::wrap_plots(ggtheme_output)\n\n\n\n\n\n\n\n\n3.1.3 wesanderson\n\n웨스 앤더슨(Wes Anderson) 영화의 독특하고 눈에 띄는 스타일을 기반으로 한 색상 팔레트를 제공하는 패키지다.\n\nlibrary(wesanderson)\n\ndraw_wesanderson &lt;- function(palette_name, wesanderson_palette =\"Darjeeling1\") {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = palette_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_minimal() +\n      theme(legend.position = c(0.90, 0.15)) +  \n      scale_color_manual(values= wes_palette(wesanderson_palette, n = 3))\n}\n\nwes_theme_output &lt;- map2(names(wes_palettes), names(wes_palettes), draw_wesanderson)\n\npatchwork::wrap_plots(wes_theme_output)"
  },
  {
    "objectID": "themes.html#사용자-테마",
    "href": "themes.html#사용자-테마",
    "title": "\n3  테마\n",
    "section": "\n3.2 사용자 테마",
    "text": "3.2 사용자 테마\n설치한 한글 글꼴과 색상을 매칭하여 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다.\n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  # ggthemes::theme_tufte() +\n  theme_minimal() +\n    \n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()"
  },
  {
    "objectID": "themes.html#자동-설정",
    "href": "themes.html#자동-설정",
    "title": "\n3  테마\n",
    "section": "\n3.3 자동 설정",
    "text": "3.3 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 ggplot 시각화를 할 때 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = ggplot2::element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = ggplot2::element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.title.y   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.text.x    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = ggplot2::element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = ggplot2::element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n펭귄 데이터 사용자 테마 적용 그래프"
  },
  {
    "objectID": "themes.html#표-테마",
    "href": "themes.html#표-테마",
    "title": "\n3  테마\n",
    "section": "\n3.4 표 테마",
    "text": "3.4 표 테마\nggplot 뿐만 아니라 gt 패키지에도 사용자 정의 테마 설정 기능이 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(magick)\n\npenguins_gt &lt;- penguins |&gt; \n  count(species, island) |&gt; \n  pivot_wider(names_from = island, values_from = n, values_fill = 0) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"species\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(Biscoe, Dream, Torgersen),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\npenguins_gt\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n    \n\n\npalmerpenguins 데이터 패키지\n    \n\n\n      Biscoe\n      Dream\n      Torgersen\n    \n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋\n    \n\n\n\n\n\n3.4.1 기본 색상과 스타일\n\nopt_colors &lt;- c(\"blue\", \"cyan\", \"pink\", \"green\", \"red\", \"gray\")\n\ndraw_color_gt &lt;- function(gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = 1, color = gt_color)\n}                \n\ngt_colors_list &lt;- map(opt_colors, draw_color_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_colors_list[[i]], str_glue(\"images/gt_theme_{opt_colors[i]}.png\"))\n}\n\n\nlibrary(magick)\n\nopt_colors &lt;- c(\"blue\", \"cyan\", \"pink\", \"green\", \"red\", \"gray\")\n\ncolor_path_filenames &lt;- vector(mode = \"character\", length = length(opt_colors))\n\nfor(i in 1:length(opt_colors)) {\n  color_path_filenames[i] &lt;-  str_glue(\"images/gt_theme_{opt_colors[i]}.png\")\n}\n\ngt_color_images_list &lt;- map(color_path_filenames, magick::image_read) |&gt; \n  map(image_resize, geometry = \"200x200\")\n\ngt_color_images &lt;- image_join(gt_color_images_list)\n\nimage_append(gt_color_images, stack = FALSE)\n\n\n\n\n\n\n\n\n3.4.2 스타일\n\nopt_sytles &lt;- 1:6\n\ndraw_style_gt &lt;- function(opt_sytle, gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = opt_sytle, color = gt_color)\n}                \n\ngt_styles_list &lt;- map(opt_sytles, draw_style_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_styles_list[[i]], str_glue(\"images/gt_theme_style_{opt_sytles[i]}.png\"))\n}\n\n\nopt_sytles &lt;- 1:6\n\nstyle_path_filenames &lt;- vector(mode = \"character\", length = length(opt_sytles))\n\nfor(i in 1:length(opt_sytles)) {\n  style_path_filenames[i] &lt;-  str_glue(\"images/gt_theme_style_{opt_sytles[i]}.png\")\n}\n\ngt_style_images_list &lt;- map(style_path_filenames, magick::image_read) |&gt; \n  map(image_resize, geometry = \"200x200\") \n  \ngt_style_images &lt;- image_join(gt_style_images_list)\n\nimage_append(gt_style_images, stack = FALSE)\n\n\n\n\n\n\n\n\n3.4.3 gtExtra\n\n\ngtExtra_themes &lt;- c(gt_theme_538, gt_theme_espn, gt_theme_nytimes, gt_theme_guardian,\n                    gt_theme_dot_matrix, gt_theme_dark, gt_theme_excel, gt_theme_pff)\n\ngtExtra_themes_names &lt;- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\", \"gt_theme_dot_matrix\", \"gt_theme_dark\",\n                          \"gt_theme_excel\", \"gt_theme_pff\")\n\ndraw_gtExtras_theme &lt;- function(gt_theme) {\n  penguins_gt |&gt; \n    gt_theme()\n}\n\n# draw_gtExtras_theme(gtExtra_themes[5][[1]])\n## gtExtras 테마적용 표 -------------------\n\ngtExtra_styles_list &lt;- vector(mode =\"list\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtra_styles_list[[i]] &lt;-  draw_gtExtras_theme(gtExtra_themes[i][[1]])\n}\n\n## 테마 표 png 파일 저장 -------------------\n\ngtExtras_path_filenames &lt;- vector(mode = \"character\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtras_path_filenames[i] &lt;-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtsave(gtExtra_styles_list[[i]], str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\"))\n}\n\n\ngtExtra_themes_names &lt;- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\", \"gt_theme_dot_matrix\", \"gt_theme_dark\",\n                          \"gt_theme_excel\", \"gt_theme_pff\")\n\ngtExtras_path_filenames &lt;- vector(mode = \"character\", length = length(gtExtra_themes_names))\n\nfor(i in 1:length(gtExtra_themes_names)) {\n  gtExtras_path_filenames[i] &lt;-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\ngtExtra_style_images_list &lt;- map(gtExtras_path_filenames, magick::image_read) |&gt; \n  map(image_resize, geometry = \"200x200\") \n  \ngtExtra_style_images &lt;- image_join(gtExtra_style_images_list)\n\nimage_append(gtExtra_style_images, stack = FALSE)"
  },
  {
    "objectID": "themes.html#그래프-자동-설정",
    "href": "themes.html#그래프-자동-설정",
    "title": "\n3  테마\n",
    "section": "\n3.3 그래프 자동 설정",
    "text": "3.3 그래프 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 ggplot 시각화를 할 때 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = ggplot2::element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = ggplot2::element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.title.y   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.text.x    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = ggplot2::element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = ggplot2::element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n펭귄 데이터 사용자 테마 적용 그래프"
  },
  {
    "objectID": "themes.html#사용자-테마-1",
    "href": "themes.html#사용자-테마-1",
    "title": "\n3  테마\n",
    "section": "\n3.5 사용자 테마",
    "text": "3.5 사용자 테마\n기본 표 테마에 글꼴, 텍스트 크기, 색상을 넣어 전문적으로 표를 작성한다.\n\npenguins_theme_gt &lt;- penguins_gt |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    # column_labels.background.color = '#1E61B0', # R logo 파란색\n    table.font.names =\"NanumSquare\",    \n    heading.title.font.size = px(26),\n    heading.subtitle.font.size = px(16),    \n    heading.background.color = \"transparent\", \n    column_labels.font.weight = 'bold',\n    table_body.hlines.width = px(0),\n    data_row.padding = px(6),\n    heading.align = 'center',\n    stub.background.color = \"#ffffff\",\n    stub.font.weight = \"bold\",\n    source_notes.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) |&gt; \n  cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n  cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n  ## 글꼴 달리 적용\n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_title(groups = 'subtitle')\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_body()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_column_labels()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n    ),\n    locations = cells_source_notes()\n  )\n\npenguins_theme_gt |&gt; \n  gtsave(filename = \"images/penguins_theme_gt.png\")\n\n\n\ngt 사용자 정의 테마 적용 표\n\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n  \n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt; \n    gt_theme_538() |&gt; \n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",    \n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),    \n      heading.background.color = \"transparent\", \n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt; \n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n    cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_column_labels()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n      ),\n      locations = cells_source_notes()\n    ) |&gt; \n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )    \n}\n\npenguins_gt |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n    \n\n\npalmerpenguins 데이터 패키지\n    \n\n\n      Biscoe\n      Dream\n      Torgersen\n    \n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋"
  },
  {
    "objectID": "themes.html#표-자동-설정",
    "href": "themes.html#표-자동-설정",
    "title": "\n3  테마\n",
    "section": "\n3.6 표 자동 설정",
    "text": "3.6 표 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 gt 표 제작에 테마를 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ngt_theme_hangul() 테마를 gt 표 객체에 반영한다.\n\nlibrary(gt)\nlibrary(gtExtras)\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n\n  gt_tbl |&gt;\n    gt_theme_538() |&gt;\n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),\n      heading.background.color = \"transparent\",\n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt;\n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt;\n    cols_align( align = \"auto\", columns = where(is.character)) |&gt;\n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_body()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_column_labels()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n      ),\n      locations = cells_source_notes()\n    ) |&gt;\n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )\n}\n\n.Rprofile 파일에 gt 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 gt_theme_hangul() 테마를 사용할 수 있다.\n\noriginal_penguins_gt &lt;- penguins |&gt; \n  drop_na() |&gt; \n  count(species, sex) |&gt; \n  pivot_wider(names_from = sex, values_from = n, values_fill = 0) |&gt; \n  janitor::adorn_totals(where = \"col\", name = \"합계\") |&gt; \n  rename(펭귄종 = species, 암컷 = female, 수컷 = male) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"펭귄종\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **암수와 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(펭귄종, 암컷, 수컷),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\ntheme_penguins_gt &lt;- original_penguins_gt |&gt; \n  gt_theme_hangul()\n\ngt_theme_hangul_penguins &lt;- gtExtras::gt_two_column_layout(list(original_penguins_gt, theme_penguins_gt))\n\ngt_theme_hangul_penguins |&gt; \n  gtsave_extra(\"images/gt_theme_hangul_penguins.png\", expand = 1)\n\n\n\ngt_theme_hangul() 테마 적용 전후"
  }
]